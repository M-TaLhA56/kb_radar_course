-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_hls is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    x_V_TDATA : IN STD_LOGIC_VECTOR (7 downto 0);
    x_V_TVALID : IN STD_LOGIC;
    x_V_TREADY : OUT STD_LOGIC;
    y_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_TVALID : OUT STD_LOGIC;
    y_TREADY : IN STD_LOGIC );
end;


architecture behav of fir_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fir_hls,hls_ip_2019_1_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045-ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.695500,HLS_SYN_LAT=4004,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=26,HLS_SYN_FF=795,HLS_SYN_LUT=667,HLS_VERSION=2019_1_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_FA0 : STD_LOGIC_VECTOR (11 downto 0) := "111110100000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv17_1FEE6 : STD_LOGIC_VECTOR (16 downto 0) := "11111111011100110";
    constant ap_const_lv17_1FF4E : STD_LOGIC_VECTOR (16 downto 0) := "11111111101001110";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv19_7FDAB : STD_LOGIC_VECTOR (18 downto 0) := "1111111110110101011";
    constant ap_const_lv19_7FD6D : STD_LOGIC_VECTOR (18 downto 0) := "1111111110101101101";
    constant ap_const_lv20_690 : STD_LOGIC_VECTOR (19 downto 0) := "00000000011010010000";
    constant ap_const_lv22_1919 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001100100011001";
    constant ap_const_lv22_1DF2 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001110111110010";
    constant ap_const_lv22_1C42 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001110001000010";
    constant ap_const_lv22_14D9 : STD_LOGIC_VECTOR (21 downto 0) := "0000000001010011011001";
    constant ap_const_lv19_7FD4F : STD_LOGIC_VECTOR (18 downto 0) := "1111111110101001111";
    constant ap_const_lv18_3FE44 : STD_LOGIC_VECTOR (17 downto 0) := "111111111001000100";
    constant ap_const_lv17_1FE45 : STD_LOGIC_VECTOR (16 downto 0) := "11111111001000101";
    constant ap_const_lv19_2D0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000001011010000";
    constant ap_const_lv21_B15 : STD_LOGIC_VECTOR (20 downto 0) := "000000000101100010101";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_rst_n_inv : STD_LOGIC;
    signal x_V_0_data_out : STD_LOGIC_VECTOR (7 downto 0);
    signal x_V_0_vld_in : STD_LOGIC;
    signal x_V_0_vld_out : STD_LOGIC;
    signal x_V_0_ack_in : STD_LOGIC;
    signal x_V_0_ack_out : STD_LOGIC;
    signal x_V_0_payload_A : STD_LOGIC_VECTOR (7 downto 0);
    signal x_V_0_payload_B : STD_LOGIC_VECTOR (7 downto 0);
    signal x_V_0_sel_rd : STD_LOGIC := '0';
    signal x_V_0_sel_wr : STD_LOGIC := '0';
    signal x_V_0_sel : STD_LOGIC;
    signal x_V_0_load_A : STD_LOGIC;
    signal x_V_0_load_B : STD_LOGIC;
    signal x_V_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal x_V_0_state_cmp_full : STD_LOGIC;
    signal y_1_data_out : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_vld_in : STD_LOGIC;
    signal y_1_vld_out : STD_LOGIC;
    signal y_1_ack_in : STD_LOGIC;
    signal y_1_ack_out : STD_LOGIC;
    signal y_1_payload_A : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_payload_B : STD_LOGIC_VECTOR (31 downto 0);
    signal y_1_sel_rd : STD_LOGIC := '0';
    signal y_1_sel_wr : STD_LOGIC := '0';
    signal y_1_sel : STD_LOGIC;
    signal y_1_load_A : STD_LOGIC;
    signal y_1_load_B : STD_LOGIC;
    signal y_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal y_1_state_cmp_full : STD_LOGIC;
    signal x_V_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal icmp_ln17_fu_509_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal y_TDATA_blk_n : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal icmp_ln17_reg_1053 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln17_reg_1053_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal icmp_ln17_reg_1053_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal shift_reg_V_30_0_reg_97 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_30_V_reg_108 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_29_V_reg_121 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_28_V_reg_134 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_27_V_reg_147 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_26_V_reg_160 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_25_V_reg_173 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_24_V_reg_186 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_23_V_reg_199 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_22_V_reg_212 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_21_V_reg_225 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_20_V_reg_238 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_19_V_reg_251 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_18_V_reg_264 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_17_V_reg_277 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_16_V_reg_290 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_15_V_reg_303 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_14_V_reg_316 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_13_V_reg_329 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_12_V_reg_342 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_11_V_reg_355 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_10_V_reg_368 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_9_V_reg_381 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_8_V_reg_394 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_7_V_reg_407 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_6_V_reg_420 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_5_V_reg_433 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_4_V_reg_446 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_3_V_reg_459 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_2_V_reg_472 : STD_LOGIC_VECTOR (7 downto 0);
    signal shift_reg_1_V_reg_485 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_0_reg_498 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_io : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_515_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shift_reg_0_V_reg_1062 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln215_fu_525_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln215_reg_1068 : STD_LOGIC_VECTOR (16 downto 0);
    signal mul_ln1352_2_fu_861_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1352_2_reg_1073 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1352_4_fu_867_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1352_4_reg_1078 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1352_6_fu_873_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1352_6_reg_1083 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1352_9_fu_879_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1352_9_reg_1088 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1352_11_fu_885_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1352_11_reg_1093 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1352_13_fu_891_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1352_13_reg_1098 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1352_15_fu_897_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1352_15_reg_1103 : STD_LOGIC_VECTOR (21 downto 0);
    signal mul_ln1352_17_fu_903_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1352_17_reg_1108 : STD_LOGIC_VECTOR (19 downto 0);
    signal mul_ln1352_20_fu_909_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1352_20_reg_1113 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1352_21_fu_915_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal mul_ln1352_21_reg_1118 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_921_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_26_reg_1123 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln30_6_fu_716_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln30_6_reg_1128 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln30_9_fu_728_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln30_9_reg_1133 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln30_12_fu_740_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln30_12_reg_1138 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln30_17_fu_752_p2 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln30_17_reg_1143 : STD_LOGIC_VECTOR (22 downto 0);
    signal add_ln30_20_fu_764_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln30_20_reg_1148 : STD_LOGIC_VECTOR (21 downto 0);
    signal add_ln30_28_fu_794_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln30_28_reg_1153 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln30_24_fu_856_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_shift_reg_V_30_0_phi_fu_101_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_shift_reg_30_V_phi_fu_113_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_shift_reg_28_V_phi_fu_139_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_shift_reg_27_V_phi_fu_152_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_shift_reg_22_V_phi_fu_217_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_shift_reg_19_V_phi_fu_256_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_shift_reg_17_V_phi_fu_282_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_shift_reg_15_V_phi_fu_308_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_shift_reg_13_V_phi_fu_334_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_shift_reg_9_V_phi_fu_386_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_shift_reg_5_V_phi_fu_438_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_shift_reg_3_V_phi_fu_464_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_phi_mux_shift_reg_1_V_phi_fu_490_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln215_fu_525_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln1352_23_fu_579_p0 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln_fu_600_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln1352_1_fu_620_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1352_2_fu_648_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1352_3_fu_668_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_929_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln30_fu_692_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_937_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_2_fu_695_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln30_2_fu_695_p2 : signal is "no";
    signal grp_fu_953_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_945_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln30_2_fu_704_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_5_fu_707_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 of add_ln30_5_fu_707_p2 : signal is "no";
    signal sext_ln30_1_fu_700_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln30_3_fu_712_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_962_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_970_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln30_5_fu_722_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln30_6_fu_725_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_979_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_987_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln30_8_fu_734_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln30_9_fu_737_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_995_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1003_p3 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln30_12_fu_746_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal sext_ln30_13_fu_749_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal grp_fu_1011_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal grp_fu_1020_p3 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln30_15_fu_758_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal sext_ln30_16_fu_761_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal grp_fu_1028_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln30_18_fu_770_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_fu_1037_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_24_fu_773_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 of add_ln30_24_fu_773_p2 : signal is "no";
    signal grp_fu_1045_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal sext_ln30_20_fu_782_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal add_ln30_27_fu_785_p2 : STD_LOGIC_VECTOR (18 downto 0);
    attribute use_dsp48 of add_ln30_27_fu_785_p2 : signal is "no";
    signal sext_ln30_19_fu_778_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln30_21_fu_790_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln30_7_fu_803_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln30_10_fu_806_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln30_4_fu_800_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln30_13_fu_809_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln30_14_fu_815_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln30_14_fu_825_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln30_17_fu_828_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln30_21_fu_831_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln30_22_fu_837_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal add_ln30_29_fu_840_p2 : STD_LOGIC_VECTOR (23 downto 0);
    signal sext_ln30_11_fu_821_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal sext_ln30_23_fu_846_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal add_ln30_30_fu_850_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal mul_ln1352_2_fu_861_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1352_4_fu_867_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1352_6_fu_873_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1352_9_fu_879_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1352_11_fu_885_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1352_13_fu_891_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1352_15_fu_897_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal mul_ln1352_17_fu_903_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal mul_ln1352_20_fu_909_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal mul_ln1352_21_fu_915_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_921_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_921_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_929_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_fu_937_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_945_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_953_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_962_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_970_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_979_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_987_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_995_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1003_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_1011_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1020_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1028_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_1037_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_1045_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component fir_hls_mul_mul_8bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component fir_hls_mul_mul_8cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (11 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component fir_hls_mul_mul_8dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component fir_hls_mac_muladeOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component fir_hls_mac_muladfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (8 downto 0);
        din2 : IN STD_LOGIC_VECTOR (16 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component fir_hls_mac_muladg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component fir_hls_mac_muladhbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (18 downto 0);
        dout : OUT STD_LOGIC_VECTOR (18 downto 0) );
    end component;


    component fir_hls_mac_muladibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (16 downto 0) );
    end component;


    component fir_hls_mac_muladjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component fir_hls_mac_muladkbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (19 downto 0);
        dout : OUT STD_LOGIC_VECTOR (20 downto 0) );
    end component;


    component fir_hls_mac_muladlbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (7 downto 0);
        din1 : IN STD_LOGIC_VECTOR (13 downto 0);
        din2 : IN STD_LOGIC_VECTOR (21 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;



begin
    fir_hls_mul_mul_8bkb_U1 : component fir_hls_mul_mul_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => ap_phi_mux_shift_reg_3_V_phi_fu_464_p4,
        din1 => mul_ln1352_2_fu_861_p1,
        dout => mul_ln1352_2_fu_861_p2);

    fir_hls_mul_mul_8bkb_U2 : component fir_hls_mul_mul_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => ap_phi_mux_shift_reg_5_V_phi_fu_438_p4,
        din1 => mul_ln1352_4_fu_867_p1,
        dout => mul_ln1352_4_fu_867_p2);

    fir_hls_mul_mul_8cud_U3 : component fir_hls_mul_mul_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        din0 => ap_phi_mux_shift_reg_9_V_phi_fu_386_p4,
        din1 => mul_ln1352_6_fu_873_p1,
        dout => mul_ln1352_6_fu_873_p2);

    fir_hls_mul_mul_8dEe_U4 : component fir_hls_mul_mul_8dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 22)
    port map (
        din0 => ap_phi_mux_shift_reg_13_V_phi_fu_334_p4,
        din1 => mul_ln1352_9_fu_879_p1,
        dout => mul_ln1352_9_fu_879_p2);

    fir_hls_mul_mul_8dEe_U5 : component fir_hls_mul_mul_8dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 22)
    port map (
        din0 => ap_phi_mux_shift_reg_15_V_phi_fu_308_p4,
        din1 => mul_ln1352_11_fu_885_p1,
        dout => mul_ln1352_11_fu_885_p2);

    fir_hls_mul_mul_8dEe_U6 : component fir_hls_mul_mul_8dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 22)
    port map (
        din0 => ap_phi_mux_shift_reg_17_V_phi_fu_282_p4,
        din1 => mul_ln1352_13_fu_891_p1,
        dout => mul_ln1352_13_fu_891_p2);

    fir_hls_mul_mul_8dEe_U7 : component fir_hls_mul_mul_8dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        dout_WIDTH => 22)
    port map (
        din0 => ap_phi_mux_shift_reg_19_V_phi_fu_256_p4,
        din1 => mul_ln1352_15_fu_897_p1,
        dout => mul_ln1352_15_fu_897_p2);

    fir_hls_mul_mul_8cud_U8 : component fir_hls_mul_mul_8cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 12,
        dout_WIDTH => 20)
    port map (
        din0 => ap_phi_mux_shift_reg_22_V_phi_fu_217_p4,
        din1 => mul_ln1352_17_fu_903_p1,
        dout => mul_ln1352_17_fu_903_p2);

    fir_hls_mul_mul_8bkb_U9 : component fir_hls_mul_mul_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => ap_phi_mux_shift_reg_27_V_phi_fu_152_p4,
        din1 => mul_ln1352_20_fu_909_p1,
        dout => mul_ln1352_20_fu_909_p2);

    fir_hls_mul_mul_8bkb_U10 : component fir_hls_mul_mul_8bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        dout_WIDTH => 19)
    port map (
        din0 => ap_phi_mux_shift_reg_28_V_phi_fu_139_p4,
        din1 => mul_ln1352_21_fu_915_p1,
        dout => mul_ln1352_21_fu_915_p2);

    fir_hls_mac_muladeOg_U11 : component fir_hls_mac_muladeOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => ap_phi_mux_shift_reg_30_V_phi_fu_113_p4,
        din1 => grp_fu_921_p1,
        din2 => grp_fu_921_p2,
        dout => grp_fu_921_p3);

    fir_hls_mac_muladfYi_U12 : component fir_hls_mac_muladfYi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 9,
        din2_WIDTH => 17,
        dout_WIDTH => 17)
    port map (
        din0 => shift_reg_0_V_reg_1062,
        din1 => grp_fu_929_p1,
        din2 => mul_ln215_reg_1068,
        dout => grp_fu_929_p3);

    fir_hls_mac_muladg8j_U13 : component fir_hls_mac_muladg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 19,
        dout_WIDTH => 19)
    port map (
        din0 => shift_reg_2_V_reg_472,
        din1 => grp_fu_937_p1,
        din2 => mul_ln1352_2_reg_1073,
        dout => grp_fu_937_p3);

    fir_hls_mac_muladhbi_U14 : component fir_hls_mac_muladhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        din2_WIDTH => 19,
        dout_WIDTH => 19)
    port map (
        din0 => shift_reg_4_V_reg_446,
        din1 => grp_fu_945_p1,
        din2 => mul_ln1352_4_reg_1078,
        dout => grp_fu_945_p3);

    fir_hls_mac_muladibs_U15 : component fir_hls_mac_muladibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => shift_reg_6_V_reg_420,
        din1 => grp_fu_953_p1,
        din2 => shl_ln_fu_600_p3,
        dout => grp_fu_953_p3);

    fir_hls_mac_muladjbC_U16 : component fir_hls_mac_muladjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        din2_WIDTH => 20,
        dout_WIDTH => 20)
    port map (
        din0 => shift_reg_8_V_reg_394,
        din1 => grp_fu_962_p1,
        din2 => mul_ln1352_6_reg_1083,
        dout => grp_fu_962_p3);

    fir_hls_mac_muladkbM_U17 : component fir_hls_mac_muladkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 13,
        din2_WIDTH => 20,
        dout_WIDTH => 21)
    port map (
        din0 => shift_reg_10_V_reg_368,
        din1 => grp_fu_970_p1,
        din2 => shl_ln1352_1_fu_620_p3,
        dout => grp_fu_970_p3);

    fir_hls_mac_muladlbW_U18 : component fir_hls_mac_muladlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => shift_reg_12_V_reg_342,
        din1 => grp_fu_979_p1,
        din2 => mul_ln1352_9_reg_1088,
        dout => grp_fu_979_p3);

    fir_hls_mac_muladlbW_U19 : component fir_hls_mac_muladlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => shift_reg_14_V_reg_316,
        din1 => grp_fu_987_p1,
        din2 => mul_ln1352_11_reg_1093,
        dout => grp_fu_987_p3);

    fir_hls_mac_muladlbW_U20 : component fir_hls_mac_muladlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => shift_reg_16_V_reg_290,
        din1 => grp_fu_995_p1,
        din2 => mul_ln1352_13_reg_1098,
        dout => grp_fu_995_p3);

    fir_hls_mac_muladlbW_U21 : component fir_hls_mac_muladlbW
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 14,
        din2_WIDTH => 22,
        dout_WIDTH => 22)
    port map (
        din0 => shift_reg_18_V_reg_264,
        din1 => grp_fu_1003_p1,
        din2 => mul_ln1352_15_reg_1103,
        dout => grp_fu_1003_p3);

    fir_hls_mac_muladkbM_U22 : component fir_hls_mac_muladkbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 13,
        din2_WIDTH => 20,
        dout_WIDTH => 21)
    port map (
        din0 => shift_reg_21_V_reg_225,
        din1 => grp_fu_1011_p1,
        din2 => shl_ln1352_2_fu_648_p3,
        dout => grp_fu_1011_p3);

    fir_hls_mac_muladjbC_U23 : component fir_hls_mac_muladjbC
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        din2_WIDTH => 20,
        dout_WIDTH => 20)
    port map (
        din0 => shift_reg_23_V_reg_199,
        din1 => grp_fu_1020_p1,
        din2 => mul_ln1352_17_reg_1108,
        dout => grp_fu_1020_p3);

    fir_hls_mac_muladibs_U24 : component fir_hls_mac_muladibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 11,
        dout_WIDTH => 17)
    port map (
        din0 => shift_reg_25_V_reg_173,
        din1 => grp_fu_1028_p1,
        din2 => shl_ln1352_3_fu_668_p3,
        dout => grp_fu_1028_p3);

    fir_hls_mac_muladhbi_U25 : component fir_hls_mac_muladhbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 11,
        din2_WIDTH => 19,
        dout_WIDTH => 19)
    port map (
        din0 => shift_reg_26_V_reg_160,
        din1 => grp_fu_1037_p1,
        din2 => mul_ln1352_20_reg_1113,
        dout => grp_fu_1037_p3);

    fir_hls_mac_muladg8j_U26 : component fir_hls_mac_muladg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 8,
        din1_WIDTH => 10,
        din2_WIDTH => 19,
        dout_WIDTH => 19)
    port map (
        din0 => shift_reg_29_V_reg_121,
        din1 => grp_fu_1045_p1,
        din2 => mul_ln1352_21_reg_1118,
        dout => grp_fu_1045_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    x_V_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                x_V_0_sel_rd <= ap_const_logic_0;
            else
                if (((x_V_0_ack_out = ap_const_logic_1) and (x_V_0_vld_out = ap_const_logic_1))) then 
                                        x_V_0_sel_rd <= not(x_V_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    x_V_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                x_V_0_sel_wr <= ap_const_logic_0;
            else
                if (((x_V_0_ack_in = ap_const_logic_1) and (x_V_0_vld_in = ap_const_logic_1))) then 
                                        x_V_0_sel_wr <= not(x_V_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    x_V_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                x_V_0_state <= ap_const_lv2_0;
            else
                if ((((x_V_0_vld_in = ap_const_logic_0) and (x_V_0_state = ap_const_lv2_2)) or ((x_V_0_vld_in = ap_const_logic_0) and (x_V_0_state = ap_const_lv2_3) and (x_V_0_ack_out = ap_const_logic_1)))) then 
                    x_V_0_state <= ap_const_lv2_2;
                elsif ((((x_V_0_ack_out = ap_const_logic_0) and (x_V_0_state = ap_const_lv2_1)) or ((x_V_0_ack_out = ap_const_logic_0) and (x_V_0_state = ap_const_lv2_3) and (x_V_0_vld_in = ap_const_logic_1)))) then 
                    x_V_0_state <= ap_const_lv2_1;
                elsif (((not(((x_V_0_vld_in = ap_const_logic_0) and (x_V_0_ack_out = ap_const_logic_1))) and not(((x_V_0_ack_out = ap_const_logic_0) and (x_V_0_vld_in = ap_const_logic_1))) and (x_V_0_state = ap_const_lv2_3)) or ((x_V_0_state = ap_const_lv2_1) and (x_V_0_ack_out = ap_const_logic_1)) or ((x_V_0_state = ap_const_lv2_2) and (x_V_0_vld_in = ap_const_logic_1)))) then 
                    x_V_0_state <= ap_const_lv2_3;
                else 
                    x_V_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    y_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                y_1_sel_rd <= ap_const_logic_0;
            else
                if (((y_1_ack_out = ap_const_logic_1) and (y_1_vld_out = ap_const_logic_1))) then 
                                        y_1_sel_rd <= not(y_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    y_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                y_1_sel_wr <= ap_const_logic_0;
            else
                if (((y_1_ack_in = ap_const_logic_1) and (y_1_vld_in = ap_const_logic_1))) then 
                                        y_1_sel_wr <= not(y_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    y_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                y_1_state <= ap_const_lv2_0;
            else
                if ((((y_1_state = ap_const_lv2_2) and (y_1_vld_in = ap_const_logic_0)) or ((y_1_state = ap_const_lv2_3) and (y_1_vld_in = ap_const_logic_0) and (y_1_ack_out = ap_const_logic_1)))) then 
                    y_1_state <= ap_const_lv2_2;
                elsif ((((y_1_state = ap_const_lv2_3) and (y_TREADY = ap_const_logic_0) and (y_1_vld_in = ap_const_logic_1)) or ((y_1_state = ap_const_lv2_1) and (y_TREADY = ap_const_logic_0)))) then 
                    y_1_state <= ap_const_lv2_1;
                elsif ((((y_1_state = ap_const_lv2_2) and (y_1_vld_in = ap_const_logic_1)) or (not(((y_1_vld_in = ap_const_logic_0) and (y_1_ack_out = ap_const_logic_1))) and not(((y_TREADY = ap_const_logic_0) and (y_1_vld_in = ap_const_logic_1))) and (y_1_state = ap_const_lv2_3)) or ((y_1_state = ap_const_lv2_1) and (y_1_ack_out = ap_const_logic_1)))) then 
                    y_1_state <= ap_const_lv2_3;
                else 
                    y_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_498_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_509_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_498 <= i_fu_515_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                i_0_reg_498 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    shift_reg_10_V_reg_368_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_10_V_reg_368 <= shift_reg_9_V_reg_381;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_10_V_reg_368 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_11_V_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_11_V_reg_355 <= shift_reg_10_V_reg_368;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_11_V_reg_355 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_12_V_reg_342_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_12_V_reg_342 <= shift_reg_11_V_reg_355;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_12_V_reg_342 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_13_V_reg_329_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_13_V_reg_329 <= shift_reg_12_V_reg_342;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_13_V_reg_329 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_14_V_reg_316_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_14_V_reg_316 <= shift_reg_13_V_reg_329;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_14_V_reg_316 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_15_V_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_15_V_reg_303 <= shift_reg_14_V_reg_316;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_15_V_reg_303 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_16_V_reg_290_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_16_V_reg_290 <= shift_reg_15_V_reg_303;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_16_V_reg_290 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_17_V_reg_277_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_17_V_reg_277 <= shift_reg_16_V_reg_290;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_17_V_reg_277 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_18_V_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_18_V_reg_264 <= shift_reg_17_V_reg_277;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_18_V_reg_264 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_19_V_reg_251_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_19_V_reg_251 <= shift_reg_18_V_reg_264;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_19_V_reg_251 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_1_V_reg_485_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_1_V_reg_485 <= shift_reg_0_V_reg_1062;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_1_V_reg_485 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_20_V_reg_238_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_20_V_reg_238 <= shift_reg_19_V_reg_251;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_20_V_reg_238 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_21_V_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_21_V_reg_225 <= shift_reg_20_V_reg_238;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_21_V_reg_225 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_22_V_reg_212_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_22_V_reg_212 <= shift_reg_21_V_reg_225;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_22_V_reg_212 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_23_V_reg_199_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_23_V_reg_199 <= shift_reg_22_V_reg_212;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_23_V_reg_199 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_24_V_reg_186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_24_V_reg_186 <= shift_reg_23_V_reg_199;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_24_V_reg_186 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_25_V_reg_173_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_25_V_reg_173 <= shift_reg_24_V_reg_186;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_25_V_reg_173 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_26_V_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_26_V_reg_160 <= shift_reg_25_V_reg_173;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_26_V_reg_160 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_27_V_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_27_V_reg_147 <= shift_reg_26_V_reg_160;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_27_V_reg_147 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_28_V_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_28_V_reg_134 <= shift_reg_27_V_reg_147;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_28_V_reg_134 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_29_V_reg_121_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_29_V_reg_121 <= shift_reg_28_V_reg_134;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_29_V_reg_121 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_2_V_reg_472_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_2_V_reg_472 <= shift_reg_1_V_reg_485;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_2_V_reg_472 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_30_V_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_30_V_reg_108 <= shift_reg_29_V_reg_121;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_30_V_reg_108 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_3_V_reg_459_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_3_V_reg_459 <= shift_reg_2_V_reg_472;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_3_V_reg_459 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_4_V_reg_446_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_4_V_reg_446 <= shift_reg_3_V_reg_459;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_4_V_reg_446 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_5_V_reg_433_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_5_V_reg_433 <= shift_reg_4_V_reg_446;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_5_V_reg_433 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_6_V_reg_420_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_6_V_reg_420 <= shift_reg_5_V_reg_433;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_6_V_reg_420 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_7_V_reg_407_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_7_V_reg_407 <= shift_reg_6_V_reg_420;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_7_V_reg_407 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_8_V_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_8_V_reg_394 <= shift_reg_7_V_reg_407;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_8_V_reg_394 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_9_V_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_9_V_reg_381 <= shift_reg_8_V_reg_394;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_9_V_reg_381 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    shift_reg_V_30_0_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                shift_reg_V_30_0_reg_97 <= shift_reg_30_V_reg_108;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
                shift_reg_V_30_0_reg_97 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln30_12_reg_1138 <= add_ln30_12_fu_740_p2;
                add_ln30_17_reg_1143 <= add_ln30_17_fu_752_p2;
                add_ln30_20_reg_1148 <= add_ln30_20_fu_764_p2;
                add_ln30_28_reg_1153 <= add_ln30_28_fu_794_p2;
                add_ln30_6_reg_1128 <= add_ln30_6_fu_716_p2;
                add_ln30_9_reg_1133 <= add_ln30_9_fu_728_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_509_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln30_26_reg_1123 <= grp_fu_921_p3;
                shift_reg_0_V_reg_1062 <= x_V_0_data_out;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln17_reg_1053 <= icmp_ln17_fu_509_p2;
                icmp_ln17_reg_1053_pp0_iter1_reg <= icmp_ln17_reg_1053;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln17_reg_1053_pp0_iter2_reg <= icmp_ln17_reg_1053_pp0_iter1_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln17_fu_509_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1352_11_reg_1093 <= mul_ln1352_11_fu_885_p2;
                mul_ln1352_13_reg_1098 <= mul_ln1352_13_fu_891_p2;
                mul_ln1352_15_reg_1103 <= mul_ln1352_15_fu_897_p2;
                mul_ln1352_17_reg_1108 <= mul_ln1352_17_fu_903_p2;
                mul_ln1352_20_reg_1113 <= mul_ln1352_20_fu_909_p2;
                mul_ln1352_21_reg_1118 <= mul_ln1352_21_fu_915_p2;
                mul_ln1352_2_reg_1073 <= mul_ln1352_2_fu_861_p2;
                mul_ln1352_4_reg_1078 <= mul_ln1352_4_fu_867_p2;
                mul_ln1352_6_reg_1083 <= mul_ln1352_6_fu_873_p2;
                mul_ln1352_9_reg_1088 <= mul_ln1352_9_fu_879_p2;
                    mul_ln215_reg_1068(16 downto 1) <= mul_ln215_fu_525_p2(16 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((x_V_0_load_A = ap_const_logic_1)) then
                x_V_0_payload_A <= x_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((x_V_0_load_B = ap_const_logic_1)) then
                x_V_0_payload_B <= x_V_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((y_1_load_A = ap_const_logic_1)) then
                y_1_payload_A <= sext_ln30_24_fu_856_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((y_1_load_B = ap_const_logic_1)) then
                y_1_payload_B <= sext_ln30_24_fu_856_p1;
            end if;
        end if;
    end process;
    mul_ln215_reg_1068(0) <= '0';

    ap_NS_fsm_assign_proc : process (y_TREADY, y_1_state, ap_CS_fsm, ap_enable_reg_pp0_iter0, icmp_ln17_fu_509_p2, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln17_fu_509_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0)) or ((icmp_ln17_fu_509_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                if ((not(((y_1_state = ap_const_lv2_1) or ((y_1_state = ap_const_lv2_3) and (y_TREADY = ap_const_logic_0)))) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln30_12_fu_740_p2 <= std_logic_vector(signed(sext_ln30_8_fu_734_p1) + signed(sext_ln30_9_fu_737_p1));
    add_ln30_13_fu_809_p2 <= std_logic_vector(signed(sext_ln30_7_fu_803_p1) + signed(sext_ln30_10_fu_806_p1));
    add_ln30_14_fu_815_p2 <= std_logic_vector(signed(sext_ln30_4_fu_800_p1) + signed(add_ln30_13_fu_809_p2));
    add_ln30_17_fu_752_p2 <= std_logic_vector(signed(sext_ln30_12_fu_746_p1) + signed(sext_ln30_13_fu_749_p1));
    add_ln30_20_fu_764_p2 <= std_logic_vector(signed(sext_ln30_15_fu_758_p1) + signed(sext_ln30_16_fu_761_p1));
    add_ln30_21_fu_831_p2 <= std_logic_vector(signed(sext_ln30_14_fu_825_p1) + signed(sext_ln30_17_fu_828_p1));
    add_ln30_24_fu_773_p2 <= std_logic_vector(signed(sext_ln30_18_fu_770_p1) + signed(grp_fu_1037_p3));
    add_ln30_27_fu_785_p2 <= std_logic_vector(signed(grp_fu_1045_p3) + signed(sext_ln30_20_fu_782_p1));
    add_ln30_28_fu_794_p2 <= std_logic_vector(signed(sext_ln30_19_fu_778_p1) + signed(sext_ln30_21_fu_790_p1));
    add_ln30_29_fu_840_p2 <= std_logic_vector(unsigned(add_ln30_21_fu_831_p2) + unsigned(sext_ln30_22_fu_837_p1));
    add_ln30_2_fu_695_p2 <= std_logic_vector(signed(sext_ln30_fu_692_p1) + signed(grp_fu_937_p3));
    add_ln30_30_fu_850_p2 <= std_logic_vector(signed(sext_ln30_11_fu_821_p1) + signed(sext_ln30_23_fu_846_p1));
    add_ln30_5_fu_707_p2 <= std_logic_vector(signed(grp_fu_945_p3) + signed(sext_ln30_2_fu_704_p1));
    add_ln30_6_fu_716_p2 <= std_logic_vector(signed(sext_ln30_1_fu_700_p1) + signed(sext_ln30_3_fu_712_p1));
    add_ln30_9_fu_728_p2 <= std_logic_vector(signed(sext_ln30_5_fu_722_p1) + signed(sext_ln30_6_fu_725_p1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(x_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln17_fu_509_p2)
    begin
                ap_block_pp0_stage0_01001 <= ((icmp_ln17_fu_509_p2 = ap_const_lv1_0) and (x_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(x_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln17_fu_509_p2, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln17_fu_509_p2 = ap_const_lv1_0) and (x_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(x_V_0_vld_out, ap_enable_reg_pp0_iter0, icmp_ln17_fu_509_p2, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_block_state4_io, ap_block_state5_io)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_const_boolean_1 = ap_block_state5_io) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)) or ((ap_const_boolean_1 = ap_block_state4_io) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((icmp_ln17_fu_509_p2 = ap_const_lv1_0) and (x_V_0_vld_out = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)));
    end process;


    ap_block_state2_pp0_stage0_iter0_assign_proc : process(x_V_0_vld_out, icmp_ln17_fu_509_p2)
    begin
                ap_block_state2_pp0_stage0_iter0 <= ((icmp_ln17_fu_509_p2 = ap_const_lv1_0) and (x_V_0_vld_out = ap_const_logic_0));
    end process;

        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(y_1_ack_in, icmp_ln17_reg_1053_pp0_iter1_reg)
    begin
                ap_block_state4_io <= ((icmp_ln17_reg_1053_pp0_iter1_reg = ap_const_lv1_0) and (y_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state5_io_assign_proc : process(y_1_ack_in, icmp_ln17_reg_1053_pp0_iter2_reg)
    begin
                ap_block_state5_io <= ((icmp_ln17_reg_1053_pp0_iter2_reg = ap_const_lv1_0) and (y_1_ack_in = ap_const_logic_0));
    end process;

        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state6_assign_proc : process(y_TREADY, y_1_state)
    begin
                ap_block_state6 <= ((y_1_state = ap_const_lv2_1) or ((y_1_state = ap_const_lv2_3) and (y_TREADY = ap_const_logic_0)));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln17_fu_509_p2)
    begin
        if ((icmp_ln17_fu_509_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_shift_reg_13_V_phi_fu_334_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_13_V_reg_329, shift_reg_12_V_reg_342, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_13_V_phi_fu_334_p4 <= shift_reg_12_V_reg_342;
        else 
            ap_phi_mux_shift_reg_13_V_phi_fu_334_p4 <= shift_reg_13_V_reg_329;
        end if; 
    end process;


    ap_phi_mux_shift_reg_15_V_phi_fu_308_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_15_V_reg_303, shift_reg_14_V_reg_316, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_15_V_phi_fu_308_p4 <= shift_reg_14_V_reg_316;
        else 
            ap_phi_mux_shift_reg_15_V_phi_fu_308_p4 <= shift_reg_15_V_reg_303;
        end if; 
    end process;


    ap_phi_mux_shift_reg_17_V_phi_fu_282_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_17_V_reg_277, shift_reg_16_V_reg_290, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_17_V_phi_fu_282_p4 <= shift_reg_16_V_reg_290;
        else 
            ap_phi_mux_shift_reg_17_V_phi_fu_282_p4 <= shift_reg_17_V_reg_277;
        end if; 
    end process;


    ap_phi_mux_shift_reg_19_V_phi_fu_256_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_19_V_reg_251, shift_reg_18_V_reg_264, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_19_V_phi_fu_256_p4 <= shift_reg_18_V_reg_264;
        else 
            ap_phi_mux_shift_reg_19_V_phi_fu_256_p4 <= shift_reg_19_V_reg_251;
        end if; 
    end process;


    ap_phi_mux_shift_reg_1_V_phi_fu_490_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_1_V_reg_485, shift_reg_0_V_reg_1062, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_1_V_phi_fu_490_p4 <= shift_reg_0_V_reg_1062;
        else 
            ap_phi_mux_shift_reg_1_V_phi_fu_490_p4 <= shift_reg_1_V_reg_485;
        end if; 
    end process;


    ap_phi_mux_shift_reg_22_V_phi_fu_217_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_22_V_reg_212, shift_reg_21_V_reg_225, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_22_V_phi_fu_217_p4 <= shift_reg_21_V_reg_225;
        else 
            ap_phi_mux_shift_reg_22_V_phi_fu_217_p4 <= shift_reg_22_V_reg_212;
        end if; 
    end process;


    ap_phi_mux_shift_reg_27_V_phi_fu_152_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_27_V_reg_147, shift_reg_26_V_reg_160, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_27_V_phi_fu_152_p4 <= shift_reg_26_V_reg_160;
        else 
            ap_phi_mux_shift_reg_27_V_phi_fu_152_p4 <= shift_reg_27_V_reg_147;
        end if; 
    end process;


    ap_phi_mux_shift_reg_28_V_phi_fu_139_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_28_V_reg_134, shift_reg_27_V_reg_147, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_28_V_phi_fu_139_p4 <= shift_reg_27_V_reg_147;
        else 
            ap_phi_mux_shift_reg_28_V_phi_fu_139_p4 <= shift_reg_28_V_reg_134;
        end if; 
    end process;


    ap_phi_mux_shift_reg_30_V_phi_fu_113_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_30_V_reg_108, shift_reg_29_V_reg_121, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_30_V_phi_fu_113_p4 <= shift_reg_29_V_reg_121;
        else 
            ap_phi_mux_shift_reg_30_V_phi_fu_113_p4 <= shift_reg_30_V_reg_108;
        end if; 
    end process;


    ap_phi_mux_shift_reg_3_V_phi_fu_464_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_3_V_reg_459, shift_reg_2_V_reg_472, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_3_V_phi_fu_464_p4 <= shift_reg_2_V_reg_472;
        else 
            ap_phi_mux_shift_reg_3_V_phi_fu_464_p4 <= shift_reg_3_V_reg_459;
        end if; 
    end process;


    ap_phi_mux_shift_reg_5_V_phi_fu_438_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_5_V_reg_433, shift_reg_4_V_reg_446, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_5_V_phi_fu_438_p4 <= shift_reg_4_V_reg_446;
        else 
            ap_phi_mux_shift_reg_5_V_phi_fu_438_p4 <= shift_reg_5_V_reg_433;
        end if; 
    end process;


    ap_phi_mux_shift_reg_9_V_phi_fu_386_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_9_V_reg_381, shift_reg_8_V_reg_394, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_9_V_phi_fu_386_p4 <= shift_reg_8_V_reg_394;
        else 
            ap_phi_mux_shift_reg_9_V_phi_fu_386_p4 <= shift_reg_9_V_reg_381;
        end if; 
    end process;


    ap_phi_mux_shift_reg_V_30_0_phi_fu_101_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, icmp_ln17_reg_1053, shift_reg_V_30_0_reg_97, shift_reg_30_V_reg_108, ap_enable_reg_pp0_iter1)
    begin
        if (((icmp_ln17_reg_1053 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_shift_reg_V_30_0_phi_fu_101_p4 <= shift_reg_30_V_reg_108;
        else 
            ap_phi_mux_shift_reg_V_30_0_phi_fu_101_p4 <= shift_reg_V_30_0_reg_97;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fu_1003_p1 <= ap_const_lv22_1919(14 - 1 downto 0);
    grp_fu_1011_p1 <= ap_const_lv21_B15(13 - 1 downto 0);
    grp_fu_1020_p1 <= ap_const_lv19_2D0(11 - 1 downto 0);
    grp_fu_1028_p1 <= ap_const_lv17_1FE45(10 - 1 downto 0);
    grp_fu_1037_p1 <= ap_const_lv19_7FD6D(11 - 1 downto 0);
    grp_fu_1045_p1 <= ap_const_lv18_3FE44(10 - 1 downto 0);
    grp_fu_921_p1 <= ap_const_lv17_1FEE6(10 - 1 downto 0);
    grp_fu_921_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln1352_23_fu_579_p0) * signed(ap_const_lv17_1FF4E))), 17));
    grp_fu_929_p1 <= ap_const_lv17_1FF4E(9 - 1 downto 0);
    grp_fu_937_p1 <= ap_const_lv18_3FE44(10 - 1 downto 0);
    grp_fu_945_p1 <= ap_const_lv19_7FD4F(11 - 1 downto 0);
    grp_fu_953_p1 <= ap_const_lv17_1FE45(10 - 1 downto 0);
    grp_fu_962_p1 <= ap_const_lv19_2D0(11 - 1 downto 0);
    grp_fu_970_p1 <= ap_const_lv21_B15(13 - 1 downto 0);
    grp_fu_979_p1 <= ap_const_lv22_14D9(14 - 1 downto 0);
    grp_fu_987_p1 <= ap_const_lv22_1C42(14 - 1 downto 0);
    grp_fu_995_p1 <= ap_const_lv22_1DF2(14 - 1 downto 0);
    i_fu_515_p2 <= std_logic_vector(unsigned(i_0_reg_498) + unsigned(ap_const_lv12_1));
    icmp_ln17_fu_509_p2 <= "1" when (i_0_reg_498 = ap_const_lv12_FA0) else "0";
    mul_ln1352_11_fu_885_p1 <= ap_const_lv22_1DF2(14 - 1 downto 0);
    mul_ln1352_13_fu_891_p1 <= ap_const_lv22_1C42(14 - 1 downto 0);
    mul_ln1352_15_fu_897_p1 <= ap_const_lv22_14D9(14 - 1 downto 0);
    mul_ln1352_17_fu_903_p1 <= ap_const_lv20_690(12 - 1 downto 0);
    mul_ln1352_20_fu_909_p1 <= ap_const_lv19_7FD4F(11 - 1 downto 0);
    mul_ln1352_21_fu_915_p1 <= ap_const_lv19_7FDAB(11 - 1 downto 0);
    mul_ln1352_23_fu_579_p0 <= ap_phi_mux_shift_reg_V_30_0_phi_fu_101_p4;
    mul_ln1352_2_fu_861_p1 <= ap_const_lv19_7FDAB(11 - 1 downto 0);
    mul_ln1352_4_fu_867_p1 <= ap_const_lv19_7FD6D(11 - 1 downto 0);
    mul_ln1352_6_fu_873_p1 <= ap_const_lv20_690(12 - 1 downto 0);
    mul_ln1352_9_fu_879_p1 <= ap_const_lv22_1919(14 - 1 downto 0);
    mul_ln215_fu_525_p0 <= ap_phi_mux_shift_reg_1_V_phi_fu_490_p4;
    mul_ln215_fu_525_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln215_fu_525_p0) * signed(ap_const_lv17_1FEE6))), 17));
        sext_ln30_10_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_12_reg_1138),24));

        sext_ln30_11_fu_821_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_14_fu_815_p2),25));

        sext_ln30_12_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_995_p3),23));

        sext_ln30_13_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1003_p3),23));

        sext_ln30_14_fu_825_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_17_reg_1143),24));

        sext_ln30_15_fu_758_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1011_p3),22));

        sext_ln30_16_fu_761_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1020_p3),22));

        sext_ln30_17_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_20_reg_1148),24));

        sext_ln30_18_fu_770_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_1028_p3),19));

        sext_ln30_19_fu_778_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_24_fu_773_p2),20));

        sext_ln30_1_fu_700_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_2_fu_695_p2),20));

        sext_ln30_20_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_26_reg_1123),19));

        sext_ln30_21_fu_790_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_27_fu_785_p2),20));

        sext_ln30_22_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_28_reg_1153),24));

        sext_ln30_23_fu_846_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_29_fu_840_p2),25));

        sext_ln30_24_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_30_fu_850_p2),32));

        sext_ln30_2_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_953_p3),19));

        sext_ln30_3_fu_712_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_5_fu_707_p2),20));

        sext_ln30_4_fu_800_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_6_reg_1128),24));

        sext_ln30_5_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_962_p3),22));

        sext_ln30_6_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_970_p3),22));

        sext_ln30_7_fu_803_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln30_9_reg_1133),24));

        sext_ln30_8_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_979_p3),23));

        sext_ln30_9_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_987_p3),23));

        sext_ln30_fu_692_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(grp_fu_929_p3),19));

    shl_ln1352_1_fu_620_p3 <= (shift_reg_11_V_reg_355 & ap_const_lv12_0);
    shl_ln1352_2_fu_648_p3 <= (shift_reg_20_V_reg_238 & ap_const_lv12_0);
    shl_ln1352_3_fu_668_p3 <= (shift_reg_24_V_reg_186 & ap_const_lv3_0);
    shl_ln_fu_600_p3 <= (shift_reg_7_V_reg_407 & ap_const_lv3_0);
    x_V_0_ack_in <= x_V_0_state(1);

    x_V_0_ack_out_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, icmp_ln17_fu_509_p2, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_fu_509_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            x_V_0_ack_out <= ap_const_logic_1;
        else 
            x_V_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    x_V_0_data_out_assign_proc : process(x_V_0_payload_A, x_V_0_payload_B, x_V_0_sel)
    begin
        if ((x_V_0_sel = ap_const_logic_1)) then 
            x_V_0_data_out <= x_V_0_payload_B;
        else 
            x_V_0_data_out <= x_V_0_payload_A;
        end if; 
    end process;

    x_V_0_load_A <= (x_V_0_state_cmp_full and not(x_V_0_sel_wr));
    x_V_0_load_B <= (x_V_0_state_cmp_full and x_V_0_sel_wr);
    x_V_0_sel <= x_V_0_sel_rd;
    x_V_0_state_cmp_full <= '0' when (x_V_0_state = ap_const_lv2_1) else '1';
    x_V_0_vld_in <= x_V_TVALID;
    x_V_0_vld_out <= x_V_0_state(0);

    x_V_TDATA_blk_n_assign_proc : process(x_V_0_state, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, icmp_ln17_fu_509_p2)
    begin
        if (((icmp_ln17_fu_509_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            x_V_TDATA_blk_n <= x_V_0_state(0);
        else 
            x_V_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    x_V_TREADY <= x_V_0_state(1);
    y_1_ack_in <= y_1_state(1);
    y_1_ack_out <= y_TREADY;

    y_1_data_out_assign_proc : process(y_1_payload_A, y_1_payload_B, y_1_sel)
    begin
        if ((y_1_sel = ap_const_logic_1)) then 
            y_1_data_out <= y_1_payload_B;
        else 
            y_1_data_out <= y_1_payload_A;
        end if; 
    end process;

    y_1_load_A <= (y_1_state_cmp_full and not(y_1_sel_wr));
    y_1_load_B <= (y_1_state_cmp_full and y_1_sel_wr);
    y_1_sel <= y_1_sel_rd;
    y_1_state_cmp_full <= '0' when (y_1_state = ap_const_lv2_1) else '1';

    y_1_vld_in_assign_proc : process(ap_enable_reg_pp0_iter2, icmp_ln17_reg_1053_pp0_iter1_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln17_reg_1053_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            y_1_vld_in <= ap_const_logic_1;
        else 
            y_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    y_1_vld_out <= y_1_state(0);
    y_TDATA <= y_1_data_out;

    y_TDATA_blk_n_assign_proc : process(y_1_state, ap_block_pp0_stage0, ap_enable_reg_pp0_iter2, icmp_ln17_reg_1053_pp0_iter1_reg, ap_enable_reg_pp0_iter3, icmp_ln17_reg_1053_pp0_iter2_reg)
    begin
        if ((((icmp_ln17_reg_1053_pp0_iter2_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)) or ((icmp_ln17_reg_1053_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0)))) then 
            y_TDATA_blk_n <= y_1_state(1);
        else 
            y_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    y_TVALID <= y_1_state(0);
end behav;
