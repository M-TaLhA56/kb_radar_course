// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "iq_mult.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic iq_mult::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic iq_mult::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> iq_mult::ap_ST_fsm_state1 = "1";
const sc_lv<32> iq_mult::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<16> iq_mult::ap_const_lv16_0 = "0000000000000000";
const bool iq_mult::ap_const_boolean_1 = true;

iq_mult::iq_mult(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( x_V_ap_vld );
    sensitive << ( ref_i_V_ap_vld );
    sensitive << ( ref_q_V_ap_vld );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld );
    sensitive << ( ref_i_V_ap_vld );
    sensitive << ( ref_q_V_ap_vld );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld );
    sensitive << ( ref_i_V_ap_vld );
    sensitive << ( ref_q_V_ap_vld );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld );
    sensitive << ( ref_i_V_ap_vld );
    sensitive << ( ref_q_V_ap_vld );
    sensitive << ( ret_V_fu_36_p2 );
    sensitive << ( ap_return_0_preg );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld );
    sensitive << ( ref_i_V_ap_vld );
    sensitive << ( ref_q_V_ap_vld );
    sensitive << ( ret_V_1_fu_46_p2 );
    sensitive << ( ap_return_1_preg );

    SC_METHOD(thread_lhs_V_fu_28_p1);
    sensitive << ( x_V );

    SC_METHOD(thread_ref_i_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ref_i_V_ap_vld );

    SC_METHOD(thread_ref_q_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ref_q_V_ap_vld );

    SC_METHOD(thread_ret_V_1_fu_46_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ref_q_V );

    SC_METHOD(thread_ret_V_1_fu_46_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_fu_28_p1 );

    SC_METHOD(thread_ret_V_1_fu_46_p2);
    sensitive << ( ret_V_1_fu_46_p0 );
    sensitive << ( ret_V_1_fu_46_p1 );

    SC_METHOD(thread_ret_V_fu_36_p0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ref_i_V );

    SC_METHOD(thread_ret_V_fu_36_p1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( lhs_V_fu_28_p1 );

    SC_METHOD(thread_ret_V_fu_36_p2);
    sensitive << ( ret_V_fu_36_p0 );
    sensitive << ( ret_V_fu_36_p1 );

    SC_METHOD(thread_x_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( x_V_ap_vld );
    sensitive << ( ref_i_V_ap_vld );
    sensitive << ( ref_q_V_ap_vld );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    ap_return_0_preg = "0000000000000000";
    ap_return_1_preg = "0000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "iq_mult_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x_V, "(port)x_V");
    sc_trace(mVcdFile, x_V_ap_vld, "(port)x_V_ap_vld");
    sc_trace(mVcdFile, ref_i_V, "(port)ref_i_V");
    sc_trace(mVcdFile, ref_i_V_ap_vld, "(port)ref_i_V_ap_vld");
    sc_trace(mVcdFile, ref_q_V, "(port)ref_q_V");
    sc_trace(mVcdFile, ref_q_V_ap_vld, "(port)ref_q_V_ap_vld");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, x_V_blk_n, "x_V_blk_n");
    sc_trace(mVcdFile, ref_i_V_blk_n, "ref_i_V_blk_n");
    sc_trace(mVcdFile, ref_q_V_blk_n, "ref_q_V_blk_n");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, ret_V_fu_36_p0, "ret_V_fu_36_p0");
    sc_trace(mVcdFile, ret_V_fu_36_p1, "ret_V_fu_36_p1");
    sc_trace(mVcdFile, lhs_V_fu_28_p1, "lhs_V_fu_28_p1");
    sc_trace(mVcdFile, ret_V_1_fu_46_p0, "ret_V_1_fu_46_p0");
    sc_trace(mVcdFile, ret_V_1_fu_46_p1, "ret_V_1_fu_46_p1");
    sc_trace(mVcdFile, ret_V_fu_36_p2, "ret_V_fu_36_p2");
    sc_trace(mVcdFile, ret_V_1_fu_46_p2, "ret_V_1_fu_46_p2");
    sc_trace(mVcdFile, ap_return_0_preg, "ap_return_0_preg");
    sc_trace(mVcdFile, ap_return_1_preg, "ap_return_1_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

iq_mult::~iq_mult() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void iq_mult::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ref_q_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ref_i_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_0_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ref_q_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ref_i_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld.read())))) {
            ap_return_0_preg = ret_V_fu_36_p2.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_1_preg = ap_const_lv16_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ref_q_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ref_i_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld.read())))) {
            ap_return_1_preg = ret_V_1_fu_46_p2.read();
        }
    }
}

void iq_mult::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void iq_mult::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ref_q_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ref_i_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld.read()));
}

void iq_mult::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ref_q_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ref_i_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void iq_mult::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void iq_mult::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ref_q_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ref_i_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void iq_mult::thread_ap_return_0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ref_q_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ref_i_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld.read())))) {
        ap_return_0 = ret_V_fu_36_p2.read();
    } else {
        ap_return_0 = ap_return_0_preg.read();
    }
}

void iq_mult::thread_ap_return_1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, ref_q_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, ref_i_V_ap_vld.read()) || esl_seteq<1,1,1>(ap_const_logic_0, x_V_ap_vld.read())))) {
        ap_return_1 = ret_V_1_fu_46_p2.read();
    } else {
        ap_return_1 = ap_return_1_preg.read();
    }
}

void iq_mult::thread_lhs_V_fu_28_p1() {
    lhs_V_fu_28_p1 = esl_sext<16,8>(x_V.read());
}

void iq_mult::thread_ref_i_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ref_i_V_blk_n = ref_i_V_ap_vld.read();
    } else {
        ref_i_V_blk_n = ap_const_logic_1;
    }
}

void iq_mult::thread_ref_q_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        ref_q_V_blk_n = ref_q_V_ap_vld.read();
    } else {
        ref_q_V_blk_n = ap_const_logic_1;
    }
}

void iq_mult::thread_ret_V_1_fu_46_p0() {
    ret_V_1_fu_46_p0 = ref_q_V.read();
}

void iq_mult::thread_ret_V_1_fu_46_p1() {
    ret_V_1_fu_46_p1 =  (sc_lv<8>) (lhs_V_fu_28_p1.read());
}

void iq_mult::thread_ret_V_1_fu_46_p2() {
    ret_V_1_fu_46_p2 = (!ret_V_1_fu_46_p0.read().is_01() || !ret_V_1_fu_46_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(ret_V_1_fu_46_p0.read()) * sc_bigint<8>(ret_V_1_fu_46_p1.read());
}

void iq_mult::thread_ret_V_fu_36_p0() {
    ret_V_fu_36_p0 = ref_i_V.read();
}

void iq_mult::thread_ret_V_fu_36_p1() {
    ret_V_fu_36_p1 =  (sc_lv<8>) (lhs_V_fu_28_p1.read());
}

void iq_mult::thread_ret_V_fu_36_p2() {
    ret_V_fu_36_p2 = (!ret_V_fu_36_p0.read().is_01() || !ret_V_fu_36_p1.read().is_01())? sc_lv<16>(): sc_bigint<8>(ret_V_fu_36_p0.read()) * sc_bigint<8>(ret_V_fu_36_p1.read());
}

void iq_mult::thread_x_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        x_V_blk_n = x_V_ap_vld.read();
    } else {
        x_V_blk_n = ap_const_logic_1;
    }
}

void iq_mult::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

