// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _d_conv_HH_
#define _d_conv_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "iq_mult.h"
#include "Block_proc.h"
#include "fir_filter_a.h"
#include "Block_proc33.h"
#include "fir_filter_b.h"
#include "fifo_w16_d2_A.h"

namespace ap_rtl {

struct d_conv : public sc_module {
    // Port declarations 12
    sc_in< sc_lv<8> > x_V;
    sc_in< sc_lv<8> > ref_i_V;
    sc_in< sc_lv<8> > ref_q_V;
    sc_out< sc_lv<32> > y_i_V;
    sc_out< sc_lv<32> > y_q_V;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > x_V_ap_vld;
    sc_in< sc_logic > ref_i_V_ap_vld;
    sc_in< sc_logic > ref_q_V_ap_vld;
    sc_out< sc_logic > y_i_V_ap_vld;
    sc_out< sc_logic > y_q_V_ap_vld;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    d_conv(sc_module_name name);
    SC_HAS_PROCESS(d_conv);

    ~d_conv();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    iq_mult* iq_mult_U0;
    Block_proc* Block_proc_U0;
    fir_filter_a* fir_filter_a_U0;
    Block_proc33* Block_proc33_U0;
    fir_filter_b* fir_filter_b_U0;
    fifo_w16_d2_A* x_i_V_U;
    fifo_w16_d2_A* x_q_V_U;
    fifo_w16_d2_A* extLd_loc_channel_U;
    fifo_w16_d2_A* extLd4_loc_channel_U;
    sc_signal< sc_logic > iq_mult_U0_ap_start;
    sc_signal< sc_logic > iq_mult_U0_ap_done;
    sc_signal< sc_logic > iq_mult_U0_ap_continue;
    sc_signal< sc_logic > iq_mult_U0_ap_idle;
    sc_signal< sc_logic > iq_mult_U0_ap_ready;
    sc_signal< sc_lv<16> > iq_mult_U0_ap_return_0;
    sc_signal< sc_lv<16> > iq_mult_U0_ap_return_1;
    sc_signal< sc_logic > ap_channel_done_x_q_V;
    sc_signal< sc_logic > x_q_V_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_x_q_V;
    sc_signal< sc_logic > ap_sync_channel_write_x_q_V;
    sc_signal< sc_logic > ap_channel_done_x_i_V;
    sc_signal< sc_logic > x_i_V_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_x_i_V;
    sc_signal< sc_logic > ap_sync_channel_write_x_i_V;
    sc_signal< sc_logic > Block_proc_U0_ap_start;
    sc_signal< sc_logic > Block_proc_U0_ap_done;
    sc_signal< sc_logic > Block_proc_U0_ap_continue;
    sc_signal< sc_logic > Block_proc_U0_ap_idle;
    sc_signal< sc_logic > Block_proc_U0_ap_ready;
    sc_signal< sc_lv<16> > Block_proc_U0_ap_return;
    sc_signal< sc_logic > ap_channel_done_extLd_loc_channel;
    sc_signal< sc_logic > extLd_loc_channel_full_n;
    sc_signal< sc_logic > fir_filter_a_U0_ap_start;
    sc_signal< sc_logic > fir_filter_a_U0_ap_done;
    sc_signal< sc_logic > fir_filter_a_U0_ap_continue;
    sc_signal< sc_logic > fir_filter_a_U0_ap_idle;
    sc_signal< sc_logic > fir_filter_a_U0_ap_ready;
    sc_signal< sc_lv<32> > fir_filter_a_U0_y_V;
    sc_signal< sc_logic > fir_filter_a_U0_y_V_ap_vld;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > Block_proc33_U0_ap_start;
    sc_signal< sc_logic > Block_proc33_U0_ap_done;
    sc_signal< sc_logic > Block_proc33_U0_ap_continue;
    sc_signal< sc_logic > Block_proc33_U0_ap_idle;
    sc_signal< sc_logic > Block_proc33_U0_ap_ready;
    sc_signal< sc_lv<16> > Block_proc33_U0_ap_return;
    sc_signal< sc_logic > ap_channel_done_extLd4_loc_channel;
    sc_signal< sc_logic > extLd4_loc_channel_full_n;
    sc_signal< sc_logic > fir_filter_b_U0_ap_start;
    sc_signal< sc_logic > fir_filter_b_U0_ap_done;
    sc_signal< sc_logic > fir_filter_b_U0_ap_continue;
    sc_signal< sc_logic > fir_filter_b_U0_ap_idle;
    sc_signal< sc_logic > fir_filter_b_U0_ap_ready;
    sc_signal< sc_lv<32> > fir_filter_b_U0_y_V;
    sc_signal< sc_logic > fir_filter_b_U0_y_V_ap_vld;
    sc_signal< sc_lv<16> > x_i_V_dout;
    sc_signal< sc_logic > x_i_V_empty_n;
    sc_signal< sc_lv<16> > x_q_V_dout;
    sc_signal< sc_logic > x_q_V_empty_n;
    sc_signal< sc_lv<16> > extLd_loc_channel_dout;
    sc_signal< sc_logic > extLd_loc_channel_empty_n;
    sc_signal< sc_lv<16> > extLd4_loc_channel_dout;
    sc_signal< sc_logic > extLd4_loc_channel_empty_n;
    sc_signal< sc_logic > iq_mult_U0_start_full_n;
    sc_signal< sc_logic > iq_mult_U0_start_write;
    sc_signal< sc_logic > Block_proc_U0_start_full_n;
    sc_signal< sc_logic > Block_proc_U0_start_write;
    sc_signal< sc_logic > fir_filter_a_U0_start_full_n;
    sc_signal< sc_logic > fir_filter_a_U0_start_write;
    sc_signal< sc_logic > Block_proc33_U0_start_full_n;
    sc_signal< sc_logic > Block_proc33_U0_start_write;
    sc_signal< sc_logic > fir_filter_b_U0_start_full_n;
    sc_signal< sc_logic > fir_filter_b_U0_start_write;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_Block_proc33_U0_ap_continue();
    void thread_Block_proc33_U0_ap_start();
    void thread_Block_proc33_U0_start_full_n();
    void thread_Block_proc33_U0_start_write();
    void thread_Block_proc_U0_ap_continue();
    void thread_Block_proc_U0_ap_start();
    void thread_Block_proc_U0_start_full_n();
    void thread_Block_proc_U0_start_write();
    void thread_ap_channel_done_extLd4_loc_channel();
    void thread_ap_channel_done_extLd_loc_channel();
    void thread_ap_channel_done_x_i_V();
    void thread_ap_channel_done_x_q_V();
    void thread_ap_sync_channel_write_x_i_V();
    void thread_ap_sync_channel_write_x_q_V();
    void thread_ap_sync_continue();
    void thread_fir_filter_a_U0_ap_continue();
    void thread_fir_filter_a_U0_ap_start();
    void thread_fir_filter_a_U0_start_full_n();
    void thread_fir_filter_a_U0_start_write();
    void thread_fir_filter_b_U0_ap_continue();
    void thread_fir_filter_b_U0_ap_start();
    void thread_fir_filter_b_U0_start_full_n();
    void thread_fir_filter_b_U0_start_write();
    void thread_iq_mult_U0_ap_continue();
    void thread_iq_mult_U0_ap_start();
    void thread_iq_mult_U0_start_full_n();
    void thread_iq_mult_U0_start_write();
    void thread_y_i_V();
    void thread_y_i_V_ap_vld();
    void thread_y_q_V();
    void thread_y_q_V_ap_vld();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
