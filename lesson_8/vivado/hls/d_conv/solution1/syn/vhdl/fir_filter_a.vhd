-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_filter_a is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    extLd_loc_channel : IN STD_LOGIC_VECTOR (15 downto 0);
    y_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fir_filter_a is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_FFFFFE27 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111000100111";
    constant ap_const_lv32_FFFFFE5F : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111001011111";
    constant ap_const_lv32_FFFFFDF9 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110111111001";
    constant ap_const_lv32_FFFFFDD6 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110111010110";
    constant ap_const_lv32_FFFFFE1B : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111000011011";
    constant ap_const_lv32_FFFFFEED : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111011101101";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_294 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010100";
    constant ap_const_lv32_56A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010101101010";
    constant ap_const_lv32_8CC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100011001100";
    constant ap_const_lv32_C83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110010000011";
    constant ap_const_lv32_104C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000001001100";
    constant ap_const_lv32_13D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001111010111";
    constant ap_const_lv32_16D5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011011010101";
    constant ap_const_lv32_1901 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100100000001";
    constant ap_const_lv32_1A25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101000100101";
    constant ap_const_lv26_3FFFE27 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111000100111";
    constant ap_const_lv26_3FFFE5F : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111001011111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal shift_reg_V_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_V_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal mul_ln700_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_reg_784 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_32_fu_149_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_32_reg_789 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_33_fu_165_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_33_reg_794 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_34_fu_181_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_34_reg_799 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_35_fu_197_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_35_reg_804 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_36_fu_213_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_36_reg_809 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_37_fu_229_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_37_reg_814 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_38_fu_245_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_38_reg_819 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_39_fu_261_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_39_reg_824 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_40_fu_277_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_40_reg_829 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_41_fu_293_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_41_reg_834 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_42_fu_309_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_42_reg_839 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_43_fu_325_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_43_reg_844 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_44_fu_341_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_44_reg_849 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_45_fu_357_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_45_reg_854 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_46_fu_373_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_46_reg_859 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_47_fu_389_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_47_reg_864 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_48_fu_405_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_48_reg_869 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_49_fu_421_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_49_reg_874 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_50_fu_437_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_50_reg_879 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_51_fu_453_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_51_reg_884 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_52_fu_469_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_52_reg_889 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_53_fu_485_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_53_reg_894 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_54_fu_501_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_54_reg_899 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_55_fu_517_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_55_reg_904 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_56_fu_533_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_56_reg_909 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_57_fu_549_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_57_reg_914 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_58_fu_565_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_58_reg_919 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_59_fu_581_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_59_reg_924 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln180_fu_591_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln180_reg_929 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_V_0_load_reg_934 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln700_62_fu_765_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln700_62_reg_939 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln700_32_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_32_reg_944 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_33_fu_638_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_33_reg_949 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_34_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_34_reg_954 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_39_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_39_reg_959 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_42_fu_668_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_42_reg_964 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_47_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_47_reg_969 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_48_fu_688_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_48_reg_974 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_49_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_49_reg_979 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_54_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_54_reg_984 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_55_fu_710_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln700_55_fu_710_p2 : signal is "no";
    signal add_ln700_55_reg_989 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_777_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln700_56_reg_994 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln700_44_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_44_reg_999 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_51_fu_737_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_51_reg_1004 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_58_fu_750_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_58_reg_1009 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln700_fu_133_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_32_fu_149_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_33_fu_165_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_34_fu_181_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_35_fu_197_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_36_fu_213_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_37_fu_229_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_38_fu_245_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_39_fu_261_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_40_fu_277_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_41_fu_293_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_42_fu_309_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_43_fu_325_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_44_fu_341_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_45_fu_357_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_46_fu_373_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_47_fu_389_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_48_fu_405_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_49_fu_421_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_50_fu_437_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_51_fu_453_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_52_fu_469_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_53_fu_485_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_54_fu_501_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_55_fu_517_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_56_fu_533_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_57_fu_549_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_58_fu_565_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_59_fu_581_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln180_fu_591_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln700_fu_624_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_31_fu_628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_37_fu_646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_38_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_40_fu_660_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_41_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_45_fu_674_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_46_fu_678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_52_fu_696_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_53_fu_700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_60_fu_771_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_35_fu_714_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_36_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_43_fu_723_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_50_fu_733_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln700_2_fu_742_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_57_fu_745_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_59_fu_755_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_62_fu_765_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln700_60_fu_771_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln700_60_fu_771_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_777_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component d_conv_mul_mul_16bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component d_conv_mul_mul_16cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component d_conv_mac_muladddEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    d_conv_mul_mul_16bkb_U5 : component d_conv_mul_mul_16bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => extLd_loc_channel,
        din1 => mul_ln700_62_fu_765_p1,
        dout => mul_ln700_62_fu_765_p2);

    d_conv_mul_mul_16cud_U6 : component d_conv_mul_mul_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln700_60_fu_771_p0,
        din1 => mul_ln700_60_fu_771_p1,
        dout => mul_ln700_60_fu_771_p2);

    d_conv_mac_muladddEe_U7 : component d_conv_mac_muladddEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        din0 => shift_reg_V_0_load_reg_934,
        din1 => grp_fu_777_p1,
        din2 => mul_ln700_62_reg_939,
        dout => grp_fu_777_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln700_32_reg_944 <= add_ln700_32_fu_632_p2;
                add_ln700_33_reg_949 <= add_ln700_33_fu_638_p2;
                add_ln700_34_reg_954 <= add_ln700_34_fu_642_p2;
                add_ln700_39_reg_959 <= add_ln700_39_fu_654_p2;
                add_ln700_42_reg_964 <= add_ln700_42_fu_668_p2;
                add_ln700_47_reg_969 <= add_ln700_47_fu_682_p2;
                add_ln700_48_reg_974 <= add_ln700_48_fu_688_p2;
                    add_ln700_49_reg_979(31 downto 1) <= add_ln700_49_fu_692_p2(31 downto 1);
                add_ln700_54_reg_984 <= add_ln700_54_fu_704_p2;
                add_ln700_55_reg_989 <= add_ln700_55_fu_710_p2;
                mul_ln700_32_reg_789 <= mul_ln700_32_fu_149_p2;
                mul_ln700_33_reg_794 <= mul_ln700_33_fu_165_p2;
                    mul_ln700_34_reg_799(31 downto 1) <= mul_ln700_34_fu_181_p2(31 downto 1);
                mul_ln700_35_reg_804 <= mul_ln700_35_fu_197_p2;
                mul_ln700_36_reg_809 <= mul_ln700_36_fu_213_p2;
                mul_ln700_37_reg_814 <= mul_ln700_37_fu_229_p2;
                    mul_ln700_38_reg_819(31 downto 2) <= mul_ln700_38_fu_245_p2(31 downto 2);
                    mul_ln700_39_reg_824(31 downto 1) <= mul_ln700_39_fu_261_p2(31 downto 1);
                    mul_ln700_40_reg_829(31 downto 2) <= mul_ln700_40_fu_277_p2(31 downto 2);
                mul_ln700_41_reg_834 <= mul_ln700_41_fu_293_p2;
                    mul_ln700_42_reg_839(31 downto 2) <= mul_ln700_42_fu_309_p2(31 downto 2);
                mul_ln700_43_reg_844 <= mul_ln700_43_fu_325_p2;
                mul_ln700_44_reg_849 <= mul_ln700_44_fu_341_p2;
                mul_ln700_45_reg_854 <= mul_ln700_45_fu_357_p2;
                mul_ln700_46_reg_859 <= mul_ln700_46_fu_373_p2;
                mul_ln700_47_reg_864 <= mul_ln700_47_fu_389_p2;
                mul_ln700_48_reg_869 <= mul_ln700_48_fu_405_p2;
                mul_ln700_49_reg_874 <= mul_ln700_49_fu_421_p2;
                mul_ln700_50_reg_879 <= mul_ln700_50_fu_437_p2;
                    mul_ln700_51_reg_884(31 downto 2) <= mul_ln700_51_fu_453_p2(31 downto 2);
                mul_ln700_52_reg_889 <= mul_ln700_52_fu_469_p2;
                    mul_ln700_53_reg_894(31 downto 2) <= mul_ln700_53_fu_485_p2(31 downto 2);
                    mul_ln700_54_reg_899(31 downto 1) <= mul_ln700_54_fu_501_p2(31 downto 1);
                    mul_ln700_55_reg_904(31 downto 2) <= mul_ln700_55_fu_517_p2(31 downto 2);
                mul_ln700_56_reg_909 <= mul_ln700_56_fu_533_p2;
                mul_ln700_57_reg_914 <= mul_ln700_57_fu_549_p2;
                mul_ln700_58_reg_919 <= mul_ln700_58_fu_565_p2;
                    mul_ln700_59_reg_924(31 downto 1) <= mul_ln700_59_fu_581_p2(31 downto 1);
                mul_ln700_62_reg_939 <= mul_ln700_62_fu_765_p2;
                mul_ln700_reg_784 <= mul_ln700_fu_133_p2;
                sext_ln180_reg_929 <= sext_ln180_fu_591_p1;
                shift_reg_V_0_load_reg_934 <= shift_reg_V_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln700_44_reg_999 <= add_ln700_44_fu_727_p2;
                add_ln700_51_reg_1004 <= add_ln700_51_fu_737_p2;
                add_ln700_58_reg_1009 <= add_ln700_58_fu_750_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln700_56_reg_994 <= grp_fu_777_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                shift_reg_V_0 <= extLd_loc_channel;
                shift_reg_V_1 <= shift_reg_V_0;
                shift_reg_V_10 <= shift_reg_V_9;
                shift_reg_V_11 <= shift_reg_V_10;
                shift_reg_V_12 <= shift_reg_V_11;
                shift_reg_V_13 <= shift_reg_V_12;
                shift_reg_V_14 <= shift_reg_V_13;
                shift_reg_V_15 <= shift_reg_V_14;
                shift_reg_V_16 <= shift_reg_V_15;
                shift_reg_V_17 <= shift_reg_V_16;
                shift_reg_V_18 <= shift_reg_V_17;
                shift_reg_V_19 <= shift_reg_V_18;
                shift_reg_V_2 <= sext_ln180_fu_591_p1;
                shift_reg_V_20 <= shift_reg_V_19;
                shift_reg_V_21 <= shift_reg_V_20;
                shift_reg_V_22 <= shift_reg_V_21;
                shift_reg_V_23 <= shift_reg_V_22;
                shift_reg_V_24 <= shift_reg_V_23;
                shift_reg_V_25 <= shift_reg_V_24;
                shift_reg_V_26 <= shift_reg_V_25;
                shift_reg_V_27 <= shift_reg_V_26;
                shift_reg_V_28 <= shift_reg_V_27;
                shift_reg_V_29 <= shift_reg_V_28;
                shift_reg_V_3 <= shift_reg_V_2;
                shift_reg_V_30 <= shift_reg_V_29;
                shift_reg_V_4 <= shift_reg_V_3;
                shift_reg_V_5 <= shift_reg_V_4;
                shift_reg_V_6 <= shift_reg_V_5;
                shift_reg_V_7 <= shift_reg_V_6;
                shift_reg_V_8 <= shift_reg_V_7;
                shift_reg_V_9 <= shift_reg_V_8;
            end if;
        end if;
    end process;
    mul_ln700_34_reg_799(0) <= '0';
    mul_ln700_38_reg_819(1 downto 0) <= "00";
    mul_ln700_39_reg_824(0) <= '0';
    mul_ln700_40_reg_829(1 downto 0) <= "00";
    mul_ln700_42_reg_839(1 downto 0) <= "00";
    mul_ln700_51_reg_884(1 downto 0) <= "00";
    mul_ln700_53_reg_894(1 downto 0) <= "00";
    mul_ln700_54_reg_899(0) <= '0';
    mul_ln700_55_reg_904(1 downto 0) <= "00";
    mul_ln700_59_reg_924(0) <= '0';
    add_ln700_49_reg_979(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln700_31_fu_628_p2 <= std_logic_vector(unsigned(mul_ln700_34_reg_799) + unsigned(mul_ln700_33_reg_794));
    add_ln700_32_fu_632_p2 <= std_logic_vector(unsigned(add_ln700_fu_624_p2) + unsigned(add_ln700_31_fu_628_p2));
    add_ln700_33_fu_638_p2 <= std_logic_vector(unsigned(mul_ln700_36_reg_809) + unsigned(mul_ln700_35_reg_804));
    add_ln700_34_fu_642_p2 <= std_logic_vector(unsigned(mul_ln700_38_reg_819) + unsigned(mul_ln700_37_reg_814));
    add_ln700_35_fu_714_p2 <= std_logic_vector(unsigned(add_ln700_33_reg_949) + unsigned(add_ln700_34_reg_954));
    add_ln700_36_fu_718_p2 <= std_logic_vector(unsigned(add_ln700_32_reg_944) + unsigned(add_ln700_35_fu_714_p2));
    add_ln700_37_fu_646_p2 <= std_logic_vector(unsigned(mul_ln700_40_reg_829) + unsigned(mul_ln700_39_reg_824));
    add_ln700_38_fu_650_p2 <= std_logic_vector(unsigned(mul_ln700_42_reg_839) + unsigned(mul_ln700_41_reg_834));
    add_ln700_39_fu_654_p2 <= std_logic_vector(unsigned(add_ln700_37_fu_646_p2) + unsigned(add_ln700_38_fu_650_p2));
    add_ln700_40_fu_660_p2 <= std_logic_vector(unsigned(mul_ln700_44_reg_849) + unsigned(mul_ln700_43_reg_844));
    add_ln700_41_fu_664_p2 <= std_logic_vector(unsigned(mul_ln700_46_reg_859) + unsigned(mul_ln700_45_reg_854));
    add_ln700_42_fu_668_p2 <= std_logic_vector(unsigned(add_ln700_40_fu_660_p2) + unsigned(add_ln700_41_fu_664_p2));
    add_ln700_43_fu_723_p2 <= std_logic_vector(unsigned(add_ln700_39_reg_959) + unsigned(add_ln700_42_reg_964));
    add_ln700_44_fu_727_p2 <= std_logic_vector(unsigned(add_ln700_36_fu_718_p2) + unsigned(add_ln700_43_fu_723_p2));
    add_ln700_45_fu_674_p2 <= std_logic_vector(unsigned(mul_ln700_48_reg_869) + unsigned(mul_ln700_47_reg_864));
    add_ln700_46_fu_678_p2 <= std_logic_vector(unsigned(mul_ln700_50_reg_879) + unsigned(mul_ln700_49_reg_874));
    add_ln700_47_fu_682_p2 <= std_logic_vector(unsigned(add_ln700_45_fu_674_p2) + unsigned(add_ln700_46_fu_678_p2));
    add_ln700_48_fu_688_p2 <= std_logic_vector(unsigned(mul_ln700_52_reg_889) + unsigned(mul_ln700_51_reg_884));
    add_ln700_49_fu_692_p2 <= std_logic_vector(unsigned(mul_ln700_54_reg_899) + unsigned(mul_ln700_53_reg_894));
    add_ln700_50_fu_733_p2 <= std_logic_vector(unsigned(add_ln700_48_reg_974) + unsigned(add_ln700_49_reg_979));
    add_ln700_51_fu_737_p2 <= std_logic_vector(unsigned(add_ln700_47_reg_969) + unsigned(add_ln700_50_fu_733_p2));
    add_ln700_52_fu_696_p2 <= std_logic_vector(unsigned(mul_ln700_56_reg_909) + unsigned(mul_ln700_55_reg_904));
    add_ln700_53_fu_700_p2 <= std_logic_vector(unsigned(mul_ln700_58_reg_919) + unsigned(mul_ln700_57_reg_914));
    add_ln700_54_fu_704_p2 <= std_logic_vector(unsigned(add_ln700_52_fu_696_p2) + unsigned(add_ln700_53_fu_700_p2));
    add_ln700_55_fu_710_p2 <= std_logic_vector(signed(mul_ln700_60_fu_771_p2) + signed(mul_ln700_59_reg_924));
    add_ln700_57_fu_745_p2 <= std_logic_vector(unsigned(add_ln700_55_reg_989) + unsigned(sext_ln700_2_fu_742_p1));
    add_ln700_58_fu_750_p2 <= std_logic_vector(unsigned(add_ln700_54_reg_984) + unsigned(add_ln700_57_fu_745_p2));
    add_ln700_59_fu_755_p2 <= std_logic_vector(unsigned(add_ln700_51_reg_1004) + unsigned(add_ln700_58_reg_1009));
    add_ln700_fu_624_p2 <= std_logic_vector(unsigned(mul_ln700_32_reg_789) + unsigned(mul_ln700_reg_784));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_777_p1 <= ap_const_lv26_3FFFE5F(10 - 1 downto 0);
    mul_ln700_32_fu_149_p0 <= shift_reg_V_29;
    mul_ln700_32_fu_149_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_32_fu_149_p0) * signed(ap_const_lv32_FFFFFE5F))), 32));
    mul_ln700_33_fu_165_p0 <= shift_reg_V_28;
    mul_ln700_33_fu_165_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_33_fu_165_p0) * signed(ap_const_lv32_FFFFFDF9))), 32));
    mul_ln700_34_fu_181_p0 <= shift_reg_V_27;
    mul_ln700_34_fu_181_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_34_fu_181_p0) * signed(ap_const_lv32_FFFFFDD6))), 32));
    mul_ln700_35_fu_197_p0 <= shift_reg_V_26;
    mul_ln700_35_fu_197_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_35_fu_197_p0) * signed(ap_const_lv32_FFFFFE1B))), 32));
    mul_ln700_36_fu_213_p0 <= shift_reg_V_25;
    mul_ln700_36_fu_213_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_36_fu_213_p0) * signed(ap_const_lv32_FFFFFEED))), 32));
    mul_ln700_37_fu_229_p0 <= shift_reg_V_24;
    mul_ln700_37_fu_229_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_37_fu_229_p0) * signed('0' &ap_const_lv32_67))), 32));
    mul_ln700_38_fu_245_p0 <= shift_reg_V_23;
    mul_ln700_38_fu_245_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_38_fu_245_p0) * signed('0' &ap_const_lv32_294))), 32));
    mul_ln700_39_fu_261_p0 <= shift_reg_V_22;
    mul_ln700_39_fu_261_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_39_fu_261_p0) * signed('0' &ap_const_lv32_56A))), 32));
    mul_ln700_40_fu_277_p0 <= shift_reg_V_21;
    mul_ln700_40_fu_277_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_40_fu_277_p0) * signed('0' &ap_const_lv32_8CC))), 32));
    mul_ln700_41_fu_293_p0 <= shift_reg_V_20;
    mul_ln700_41_fu_293_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_41_fu_293_p0) * signed('0' &ap_const_lv32_C83))), 32));
    mul_ln700_42_fu_309_p0 <= shift_reg_V_19;
    mul_ln700_42_fu_309_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_42_fu_309_p0) * signed('0' &ap_const_lv32_104C))), 32));
    mul_ln700_43_fu_325_p0 <= shift_reg_V_18;
    mul_ln700_43_fu_325_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_43_fu_325_p0) * signed('0' &ap_const_lv32_13D7))), 32));
    mul_ln700_44_fu_341_p0 <= shift_reg_V_17;
    mul_ln700_44_fu_341_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_44_fu_341_p0) * signed('0' &ap_const_lv32_16D5))), 32));
    mul_ln700_45_fu_357_p0 <= shift_reg_V_16;
    mul_ln700_45_fu_357_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_45_fu_357_p0) * signed('0' &ap_const_lv32_1901))), 32));
    mul_ln700_46_fu_373_p0 <= shift_reg_V_15;
    mul_ln700_46_fu_373_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_46_fu_373_p0) * signed('0' &ap_const_lv32_1A25))), 32));
    mul_ln700_47_fu_389_p0 <= shift_reg_V_14;
    mul_ln700_47_fu_389_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_47_fu_389_p0) * signed('0' &ap_const_lv32_1A25))), 32));
    mul_ln700_48_fu_405_p0 <= shift_reg_V_13;
    mul_ln700_48_fu_405_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_48_fu_405_p0) * signed('0' &ap_const_lv32_1901))), 32));
    mul_ln700_49_fu_421_p0 <= shift_reg_V_12;
    mul_ln700_49_fu_421_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_49_fu_421_p0) * signed('0' &ap_const_lv32_16D5))), 32));
    mul_ln700_50_fu_437_p0 <= shift_reg_V_11;
    mul_ln700_50_fu_437_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_50_fu_437_p0) * signed('0' &ap_const_lv32_13D7))), 32));
    mul_ln700_51_fu_453_p0 <= shift_reg_V_10;
    mul_ln700_51_fu_453_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_51_fu_453_p0) * signed('0' &ap_const_lv32_104C))), 32));
    mul_ln700_52_fu_469_p0 <= shift_reg_V_9;
    mul_ln700_52_fu_469_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_52_fu_469_p0) * signed('0' &ap_const_lv32_C83))), 32));
    mul_ln700_53_fu_485_p0 <= shift_reg_V_8;
    mul_ln700_53_fu_485_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_53_fu_485_p0) * signed('0' &ap_const_lv32_8CC))), 32));
    mul_ln700_54_fu_501_p0 <= shift_reg_V_7;
    mul_ln700_54_fu_501_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_54_fu_501_p0) * signed('0' &ap_const_lv32_56A))), 32));
    mul_ln700_55_fu_517_p0 <= shift_reg_V_6;
    mul_ln700_55_fu_517_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_55_fu_517_p0) * signed('0' &ap_const_lv32_294))), 32));
    mul_ln700_56_fu_533_p0 <= shift_reg_V_5;
    mul_ln700_56_fu_533_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_56_fu_533_p0) * signed('0' &ap_const_lv32_67))), 32));
    mul_ln700_57_fu_549_p0 <= shift_reg_V_4;
    mul_ln700_57_fu_549_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_57_fu_549_p0) * signed(ap_const_lv32_FFFFFEED))), 32));
    mul_ln700_58_fu_565_p0 <= shift_reg_V_3;
    mul_ln700_58_fu_565_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_58_fu_565_p0) * signed(ap_const_lv32_FFFFFE1B))), 32));
    mul_ln700_59_fu_581_p0 <= shift_reg_V_2;
    mul_ln700_59_fu_581_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_59_fu_581_p0) * signed(ap_const_lv32_FFFFFDD6))), 32));
    mul_ln700_60_fu_771_p0 <= sext_ln180_reg_929(16 - 1 downto 0);
    mul_ln700_60_fu_771_p1 <= ap_const_lv32_FFFFFDF9(11 - 1 downto 0);
    mul_ln700_62_fu_765_p1 <= ap_const_lv26_3FFFE27(10 - 1 downto 0);
    mul_ln700_fu_133_p0 <= shift_reg_V_30;
    mul_ln700_fu_133_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_fu_133_p0) * signed(ap_const_lv32_FFFFFE27))), 32));
    sext_ln180_fu_591_p0 <= shift_reg_V_1;
        sext_ln180_fu_591_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln180_fu_591_p0),32));

        sext_ln700_2_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln700_56_reg_994),32));

    y_V <= std_logic_vector(unsigned(add_ln700_44_reg_999) + unsigned(add_ln700_59_fu_755_p2));

    y_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_V_ap_vld <= ap_const_logic_1;
        else 
            y_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
