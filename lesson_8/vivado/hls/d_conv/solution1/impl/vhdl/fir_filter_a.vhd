-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fir_filter_a is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    extLd_loc_channel : IN STD_LOGIC_VECTOR (15 downto 0);
    y_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of fir_filter_a is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_FFFFFE27 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111000100111";
    constant ap_const_lv32_FFFFFE5F : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111001011111";
    constant ap_const_lv32_FFFFFDF9 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110111111001";
    constant ap_const_lv32_FFFFFDD6 : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111110111010110";
    constant ap_const_lv32_FFFFFE1B : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111000011011";
    constant ap_const_lv32_FFFFFEED : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111011101101";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_294 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001010010100";
    constant ap_const_lv32_56A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010101101010";
    constant ap_const_lv32_8CC : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100011001100";
    constant ap_const_lv32_C83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000110010000011";
    constant ap_const_lv32_104C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000001001100";
    constant ap_const_lv32_13D7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001001111010111";
    constant ap_const_lv32_16D5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001011011010101";
    constant ap_const_lv32_1901 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001100100000001";
    constant ap_const_lv32_1A25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001101000100101";
    constant ap_const_lv26_3FFFE27 : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111000100111";
    constant ap_const_lv26_3FFFE5F : STD_LOGIC_VECTOR (25 downto 0) := "11111111111111111001011111";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal shift_reg_V_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal shift_reg_V_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal shift_reg_V_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal mul_ln700_fu_137_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_reg_788 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_32_fu_153_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_32_reg_793 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_33_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_33_reg_798 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_34_fu_185_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_34_reg_803 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_35_fu_201_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_35_reg_808 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_36_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_36_reg_813 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_37_fu_233_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_37_reg_818 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_38_fu_249_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_38_reg_823 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_39_fu_265_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_39_reg_828 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_40_fu_281_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_40_reg_833 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_41_fu_297_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_41_reg_838 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_42_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_42_reg_843 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_43_fu_329_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_43_reg_848 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_44_fu_345_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_44_reg_853 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_45_fu_361_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_45_reg_858 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_46_fu_377_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_46_reg_863 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_47_fu_393_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_47_reg_868 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_48_fu_409_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_48_reg_873 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_49_fu_425_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_49_reg_878 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_50_fu_441_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_50_reg_883 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_51_fu_457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_51_reg_888 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_52_fu_473_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_52_reg_893 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_53_fu_489_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_53_reg_898 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_54_fu_505_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_54_reg_903 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_55_fu_521_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_55_reg_908 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_56_fu_537_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_56_reg_913 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_57_fu_553_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_57_reg_918 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_58_fu_569_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_58_reg_923 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_59_fu_585_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_59_reg_928 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln180_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln180_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal shift_reg_V_0_load_reg_938 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln700_62_fu_769_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln700_62_reg_943 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln700_32_fu_636_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_32_reg_948 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_33_fu_642_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_33_reg_953 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_34_fu_646_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_34_reg_958 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_39_fu_658_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_39_reg_963 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_42_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_42_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_47_fu_686_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_47_reg_973 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_48_fu_692_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_48_reg_978 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_49_fu_696_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_49_reg_983 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_54_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_54_reg_988 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_55_fu_714_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln700_55_fu_714_p2 : signal is "no";
    signal add_ln700_55_reg_993 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_781_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln700_56_reg_998 : STD_LOGIC_VECTOR (25 downto 0);
    signal add_ln700_44_fu_731_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_44_reg_1003 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_51_fu_741_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_51_reg_1008 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_58_fu_754_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_58_reg_1013 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal mul_ln700_fu_137_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_32_fu_153_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_33_fu_169_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_34_fu_185_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_35_fu_201_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_36_fu_217_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_37_fu_233_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_38_fu_249_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_39_fu_265_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_40_fu_281_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_41_fu_297_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_42_fu_313_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_43_fu_329_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_44_fu_345_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_45_fu_361_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_46_fu_377_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_47_fu_393_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_48_fu_409_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_49_fu_425_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_50_fu_441_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_51_fu_457_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_52_fu_473_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_53_fu_489_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_54_fu_505_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_55_fu_521_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_56_fu_537_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_57_fu_553_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_58_fu_569_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_59_fu_585_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln180_fu_595_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln700_fu_628_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_31_fu_632_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_37_fu_650_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_38_fu_654_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_40_fu_664_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_41_fu_668_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_45_fu_678_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_46_fu_682_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_52_fu_700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_53_fu_704_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_60_fu_775_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_35_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_36_fu_722_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_43_fu_727_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_50_fu_737_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln700_2_fu_746_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_57_fu_749_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln700_59_fu_759_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln700_62_fu_769_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal mul_ln700_60_fu_775_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln700_60_fu_775_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_781_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component d_conv_mul_mul_16bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component d_conv_mul_mul_16cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component d_conv_mac_muladddEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (9 downto 0);
        din2 : IN STD_LOGIC_VECTOR (25 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;



begin
    d_conv_mul_mul_16bkb_U5 : component d_conv_mul_mul_16bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        dout_WIDTH => 26)
    port map (
        din0 => extLd_loc_channel,
        din1 => mul_ln700_62_fu_769_p1,
        dout => mul_ln700_62_fu_769_p2);

    d_conv_mul_mul_16cud_U6 : component d_conv_mul_mul_16cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 11,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln700_60_fu_775_p0,
        din1 => mul_ln700_60_fu_775_p1,
        dout => mul_ln700_60_fu_775_p2);

    d_conv_mac_muladddEe_U7 : component d_conv_mac_muladddEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 10,
        din2_WIDTH => 26,
        dout_WIDTH => 26)
    port map (
        din0 => shift_reg_V_0_load_reg_938,
        din1 => grp_fu_781_p1,
        din2 => mul_ln700_62_reg_943,
        dout => grp_fu_781_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln700_32_reg_948 <= add_ln700_32_fu_636_p2;
                add_ln700_33_reg_953 <= add_ln700_33_fu_642_p2;
                add_ln700_34_reg_958 <= add_ln700_34_fu_646_p2;
                add_ln700_39_reg_963 <= add_ln700_39_fu_658_p2;
                add_ln700_42_reg_968 <= add_ln700_42_fu_672_p2;
                add_ln700_47_reg_973 <= add_ln700_47_fu_686_p2;
                add_ln700_48_reg_978 <= add_ln700_48_fu_692_p2;
                    add_ln700_49_reg_983(31 downto 1) <= add_ln700_49_fu_696_p2(31 downto 1);
                add_ln700_54_reg_988 <= add_ln700_54_fu_708_p2;
                add_ln700_55_reg_993 <= add_ln700_55_fu_714_p2;
                mul_ln700_32_reg_793 <= mul_ln700_32_fu_153_p2;
                mul_ln700_33_reg_798 <= mul_ln700_33_fu_169_p2;
                    mul_ln700_34_reg_803(31 downto 1) <= mul_ln700_34_fu_185_p2(31 downto 1);
                mul_ln700_35_reg_808 <= mul_ln700_35_fu_201_p2;
                mul_ln700_36_reg_813 <= mul_ln700_36_fu_217_p2;
                mul_ln700_37_reg_818 <= mul_ln700_37_fu_233_p2;
                    mul_ln700_38_reg_823(31 downto 2) <= mul_ln700_38_fu_249_p2(31 downto 2);
                    mul_ln700_39_reg_828(31 downto 1) <= mul_ln700_39_fu_265_p2(31 downto 1);
                    mul_ln700_40_reg_833(31 downto 2) <= mul_ln700_40_fu_281_p2(31 downto 2);
                mul_ln700_41_reg_838 <= mul_ln700_41_fu_297_p2;
                    mul_ln700_42_reg_843(31 downto 2) <= mul_ln700_42_fu_313_p2(31 downto 2);
                mul_ln700_43_reg_848 <= mul_ln700_43_fu_329_p2;
                mul_ln700_44_reg_853 <= mul_ln700_44_fu_345_p2;
                mul_ln700_45_reg_858 <= mul_ln700_45_fu_361_p2;
                mul_ln700_46_reg_863 <= mul_ln700_46_fu_377_p2;
                mul_ln700_47_reg_868 <= mul_ln700_47_fu_393_p2;
                mul_ln700_48_reg_873 <= mul_ln700_48_fu_409_p2;
                mul_ln700_49_reg_878 <= mul_ln700_49_fu_425_p2;
                mul_ln700_50_reg_883 <= mul_ln700_50_fu_441_p2;
                    mul_ln700_51_reg_888(31 downto 2) <= mul_ln700_51_fu_457_p2(31 downto 2);
                mul_ln700_52_reg_893 <= mul_ln700_52_fu_473_p2;
                    mul_ln700_53_reg_898(31 downto 2) <= mul_ln700_53_fu_489_p2(31 downto 2);
                    mul_ln700_54_reg_903(31 downto 1) <= mul_ln700_54_fu_505_p2(31 downto 1);
                    mul_ln700_55_reg_908(31 downto 2) <= mul_ln700_55_fu_521_p2(31 downto 2);
                mul_ln700_56_reg_913 <= mul_ln700_56_fu_537_p2;
                mul_ln700_57_reg_918 <= mul_ln700_57_fu_553_p2;
                mul_ln700_58_reg_923 <= mul_ln700_58_fu_569_p2;
                    mul_ln700_59_reg_928(31 downto 1) <= mul_ln700_59_fu_585_p2(31 downto 1);
                mul_ln700_62_reg_943 <= mul_ln700_62_fu_769_p2;
                mul_ln700_reg_788 <= mul_ln700_fu_137_p2;
                sext_ln180_reg_933 <= sext_ln180_fu_595_p1;
                shift_reg_V_0_load_reg_938 <= shift_reg_V_0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln700_44_reg_1003 <= add_ln700_44_fu_731_p2;
                add_ln700_51_reg_1008 <= add_ln700_51_fu_741_p2;
                add_ln700_58_reg_1013 <= add_ln700_58_fu_754_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln700_56_reg_998 <= grp_fu_781_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                shift_reg_V_0 <= extLd_loc_channel;
                shift_reg_V_1 <= shift_reg_V_0;
                shift_reg_V_10 <= shift_reg_V_9;
                shift_reg_V_11 <= shift_reg_V_10;
                shift_reg_V_12 <= shift_reg_V_11;
                shift_reg_V_13 <= shift_reg_V_12;
                shift_reg_V_14 <= shift_reg_V_13;
                shift_reg_V_15 <= shift_reg_V_14;
                shift_reg_V_16 <= shift_reg_V_15;
                shift_reg_V_17 <= shift_reg_V_16;
                shift_reg_V_18 <= shift_reg_V_17;
                shift_reg_V_19 <= shift_reg_V_18;
                shift_reg_V_2 <= sext_ln180_fu_595_p1;
                shift_reg_V_20 <= shift_reg_V_19;
                shift_reg_V_21 <= shift_reg_V_20;
                shift_reg_V_22 <= shift_reg_V_21;
                shift_reg_V_23 <= shift_reg_V_22;
                shift_reg_V_24 <= shift_reg_V_23;
                shift_reg_V_25 <= shift_reg_V_24;
                shift_reg_V_26 <= shift_reg_V_25;
                shift_reg_V_27 <= shift_reg_V_26;
                shift_reg_V_28 <= shift_reg_V_27;
                shift_reg_V_29 <= shift_reg_V_28;
                shift_reg_V_3 <= shift_reg_V_2;
                shift_reg_V_30 <= shift_reg_V_29;
                shift_reg_V_4 <= shift_reg_V_3;
                shift_reg_V_5 <= shift_reg_V_4;
                shift_reg_V_6 <= shift_reg_V_5;
                shift_reg_V_7 <= shift_reg_V_6;
                shift_reg_V_8 <= shift_reg_V_7;
                shift_reg_V_9 <= shift_reg_V_8;
            end if;
        end if;
    end process;
    mul_ln700_34_reg_803(0) <= '0';
    mul_ln700_38_reg_823(1 downto 0) <= "00";
    mul_ln700_39_reg_828(0) <= '0';
    mul_ln700_40_reg_833(1 downto 0) <= "00";
    mul_ln700_42_reg_843(1 downto 0) <= "00";
    mul_ln700_51_reg_888(1 downto 0) <= "00";
    mul_ln700_53_reg_898(1 downto 0) <= "00";
    mul_ln700_54_reg_903(0) <= '0';
    mul_ln700_55_reg_908(1 downto 0) <= "00";
    mul_ln700_59_reg_928(0) <= '0';
    add_ln700_49_reg_983(0) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln700_31_fu_632_p2 <= std_logic_vector(unsigned(mul_ln700_34_reg_803) + unsigned(mul_ln700_33_reg_798));
    add_ln700_32_fu_636_p2 <= std_logic_vector(unsigned(add_ln700_fu_628_p2) + unsigned(add_ln700_31_fu_632_p2));
    add_ln700_33_fu_642_p2 <= std_logic_vector(unsigned(mul_ln700_36_reg_813) + unsigned(mul_ln700_35_reg_808));
    add_ln700_34_fu_646_p2 <= std_logic_vector(unsigned(mul_ln700_38_reg_823) + unsigned(mul_ln700_37_reg_818));
    add_ln700_35_fu_718_p2 <= std_logic_vector(unsigned(add_ln700_33_reg_953) + unsigned(add_ln700_34_reg_958));
    add_ln700_36_fu_722_p2 <= std_logic_vector(unsigned(add_ln700_32_reg_948) + unsigned(add_ln700_35_fu_718_p2));
    add_ln700_37_fu_650_p2 <= std_logic_vector(unsigned(mul_ln700_40_reg_833) + unsigned(mul_ln700_39_reg_828));
    add_ln700_38_fu_654_p2 <= std_logic_vector(unsigned(mul_ln700_42_reg_843) + unsigned(mul_ln700_41_reg_838));
    add_ln700_39_fu_658_p2 <= std_logic_vector(unsigned(add_ln700_37_fu_650_p2) + unsigned(add_ln700_38_fu_654_p2));
    add_ln700_40_fu_664_p2 <= std_logic_vector(unsigned(mul_ln700_44_reg_853) + unsigned(mul_ln700_43_reg_848));
    add_ln700_41_fu_668_p2 <= std_logic_vector(unsigned(mul_ln700_46_reg_863) + unsigned(mul_ln700_45_reg_858));
    add_ln700_42_fu_672_p2 <= std_logic_vector(unsigned(add_ln700_40_fu_664_p2) + unsigned(add_ln700_41_fu_668_p2));
    add_ln700_43_fu_727_p2 <= std_logic_vector(unsigned(add_ln700_39_reg_963) + unsigned(add_ln700_42_reg_968));
    add_ln700_44_fu_731_p2 <= std_logic_vector(unsigned(add_ln700_36_fu_722_p2) + unsigned(add_ln700_43_fu_727_p2));
    add_ln700_45_fu_678_p2 <= std_logic_vector(unsigned(mul_ln700_48_reg_873) + unsigned(mul_ln700_47_reg_868));
    add_ln700_46_fu_682_p2 <= std_logic_vector(unsigned(mul_ln700_50_reg_883) + unsigned(mul_ln700_49_reg_878));
    add_ln700_47_fu_686_p2 <= std_logic_vector(unsigned(add_ln700_45_fu_678_p2) + unsigned(add_ln700_46_fu_682_p2));
    add_ln700_48_fu_692_p2 <= std_logic_vector(unsigned(mul_ln700_52_reg_893) + unsigned(mul_ln700_51_reg_888));
    add_ln700_49_fu_696_p2 <= std_logic_vector(unsigned(mul_ln700_54_reg_903) + unsigned(mul_ln700_53_reg_898));
    add_ln700_50_fu_737_p2 <= std_logic_vector(unsigned(add_ln700_48_reg_978) + unsigned(add_ln700_49_reg_983));
    add_ln700_51_fu_741_p2 <= std_logic_vector(unsigned(add_ln700_47_reg_973) + unsigned(add_ln700_50_fu_737_p2));
    add_ln700_52_fu_700_p2 <= std_logic_vector(unsigned(mul_ln700_56_reg_913) + unsigned(mul_ln700_55_reg_908));
    add_ln700_53_fu_704_p2 <= std_logic_vector(unsigned(mul_ln700_58_reg_923) + unsigned(mul_ln700_57_reg_918));
    add_ln700_54_fu_708_p2 <= std_logic_vector(unsigned(add_ln700_52_fu_700_p2) + unsigned(add_ln700_53_fu_704_p2));
    add_ln700_55_fu_714_p2 <= std_logic_vector(signed(mul_ln700_60_fu_775_p2) + signed(mul_ln700_59_reg_928));
    add_ln700_57_fu_749_p2 <= std_logic_vector(unsigned(add_ln700_55_reg_993) + unsigned(sext_ln700_2_fu_746_p1));
    add_ln700_58_fu_754_p2 <= std_logic_vector(unsigned(add_ln700_54_reg_988) + unsigned(add_ln700_57_fu_749_p2));
    add_ln700_59_fu_759_p2 <= std_logic_vector(unsigned(add_ln700_51_reg_1008) + unsigned(add_ln700_58_reg_1013));
    add_ln700_fu_628_p2 <= std_logic_vector(unsigned(mul_ln700_32_reg_793) + unsigned(mul_ln700_reg_788));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_done_reg, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_781_p1 <= ap_const_lv26_3FFFE5F(10 - 1 downto 0);
    mul_ln700_32_fu_153_p0 <= shift_reg_V_29;
    mul_ln700_32_fu_153_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_32_fu_153_p0) * signed(ap_const_lv32_FFFFFE5F))), 32));
    mul_ln700_33_fu_169_p0 <= shift_reg_V_28;
    mul_ln700_33_fu_169_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_33_fu_169_p0) * signed(ap_const_lv32_FFFFFDF9))), 32));
    mul_ln700_34_fu_185_p0 <= shift_reg_V_27;
    mul_ln700_34_fu_185_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_34_fu_185_p0) * signed(ap_const_lv32_FFFFFDD6))), 32));
    mul_ln700_35_fu_201_p0 <= shift_reg_V_26;
    mul_ln700_35_fu_201_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_35_fu_201_p0) * signed(ap_const_lv32_FFFFFE1B))), 32));
    mul_ln700_36_fu_217_p0 <= shift_reg_V_25;
    mul_ln700_36_fu_217_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_36_fu_217_p0) * signed(ap_const_lv32_FFFFFEED))), 32));
    mul_ln700_37_fu_233_p0 <= shift_reg_V_24;
    mul_ln700_37_fu_233_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_37_fu_233_p0) * signed('0' &ap_const_lv32_67))), 32));
    mul_ln700_38_fu_249_p0 <= shift_reg_V_23;
    mul_ln700_38_fu_249_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_38_fu_249_p0) * signed('0' &ap_const_lv32_294))), 32));
    mul_ln700_39_fu_265_p0 <= shift_reg_V_22;
    mul_ln700_39_fu_265_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_39_fu_265_p0) * signed('0' &ap_const_lv32_56A))), 32));
    mul_ln700_40_fu_281_p0 <= shift_reg_V_21;
    mul_ln700_40_fu_281_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_40_fu_281_p0) * signed('0' &ap_const_lv32_8CC))), 32));
    mul_ln700_41_fu_297_p0 <= shift_reg_V_20;
    mul_ln700_41_fu_297_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_41_fu_297_p0) * signed('0' &ap_const_lv32_C83))), 32));
    mul_ln700_42_fu_313_p0 <= shift_reg_V_19;
    mul_ln700_42_fu_313_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_42_fu_313_p0) * signed('0' &ap_const_lv32_104C))), 32));
    mul_ln700_43_fu_329_p0 <= shift_reg_V_18;
    mul_ln700_43_fu_329_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_43_fu_329_p0) * signed('0' &ap_const_lv32_13D7))), 32));
    mul_ln700_44_fu_345_p0 <= shift_reg_V_17;
    mul_ln700_44_fu_345_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_44_fu_345_p0) * signed('0' &ap_const_lv32_16D5))), 32));
    mul_ln700_45_fu_361_p0 <= shift_reg_V_16;
    mul_ln700_45_fu_361_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_45_fu_361_p0) * signed('0' &ap_const_lv32_1901))), 32));
    mul_ln700_46_fu_377_p0 <= shift_reg_V_15;
    mul_ln700_46_fu_377_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_46_fu_377_p0) * signed('0' &ap_const_lv32_1A25))), 32));
    mul_ln700_47_fu_393_p0 <= shift_reg_V_14;
    mul_ln700_47_fu_393_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_47_fu_393_p0) * signed('0' &ap_const_lv32_1A25))), 32));
    mul_ln700_48_fu_409_p0 <= shift_reg_V_13;
    mul_ln700_48_fu_409_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_48_fu_409_p0) * signed('0' &ap_const_lv32_1901))), 32));
    mul_ln700_49_fu_425_p0 <= shift_reg_V_12;
    mul_ln700_49_fu_425_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_49_fu_425_p0) * signed('0' &ap_const_lv32_16D5))), 32));
    mul_ln700_50_fu_441_p0 <= shift_reg_V_11;
    mul_ln700_50_fu_441_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_50_fu_441_p0) * signed('0' &ap_const_lv32_13D7))), 32));
    mul_ln700_51_fu_457_p0 <= shift_reg_V_10;
    mul_ln700_51_fu_457_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_51_fu_457_p0) * signed('0' &ap_const_lv32_104C))), 32));
    mul_ln700_52_fu_473_p0 <= shift_reg_V_9;
    mul_ln700_52_fu_473_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_52_fu_473_p0) * signed('0' &ap_const_lv32_C83))), 32));
    mul_ln700_53_fu_489_p0 <= shift_reg_V_8;
    mul_ln700_53_fu_489_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_53_fu_489_p0) * signed('0' &ap_const_lv32_8CC))), 32));
    mul_ln700_54_fu_505_p0 <= shift_reg_V_7;
    mul_ln700_54_fu_505_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_54_fu_505_p0) * signed('0' &ap_const_lv32_56A))), 32));
    mul_ln700_55_fu_521_p0 <= shift_reg_V_6;
    mul_ln700_55_fu_521_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_55_fu_521_p0) * signed('0' &ap_const_lv32_294))), 32));
    mul_ln700_56_fu_537_p0 <= shift_reg_V_5;
    mul_ln700_56_fu_537_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_56_fu_537_p0) * signed('0' &ap_const_lv32_67))), 32));
    mul_ln700_57_fu_553_p0 <= shift_reg_V_4;
    mul_ln700_57_fu_553_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_57_fu_553_p0) * signed(ap_const_lv32_FFFFFEED))), 32));
    mul_ln700_58_fu_569_p0 <= shift_reg_V_3;
    mul_ln700_58_fu_569_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_58_fu_569_p0) * signed(ap_const_lv32_FFFFFE1B))), 32));
    mul_ln700_59_fu_585_p0 <= shift_reg_V_2;
    mul_ln700_59_fu_585_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_59_fu_585_p0) * signed(ap_const_lv32_FFFFFDD6))), 32));
    mul_ln700_60_fu_775_p0 <= sext_ln180_reg_933(16 - 1 downto 0);
    mul_ln700_60_fu_775_p1 <= ap_const_lv32_FFFFFDF9(11 - 1 downto 0);
    mul_ln700_62_fu_769_p1 <= ap_const_lv26_3FFFE27(10 - 1 downto 0);
    mul_ln700_fu_137_p0 <= shift_reg_V_30;
    mul_ln700_fu_137_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln700_fu_137_p0) * signed(ap_const_lv32_FFFFFE27))), 32));
    sext_ln180_fu_595_p0 <= shift_reg_V_1;
        sext_ln180_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sext_ln180_fu_595_p0),32));

        sext_ln700_2_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln700_56_reg_998),32));

    y_V <= std_logic_vector(unsigned(add_ln700_44_reg_1003) + unsigned(add_ln700_59_fu_759_p2));

    y_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            y_V_ap_vld <= ap_const_logic_1;
        else 
            y_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
