-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity d_conv is
port (
    x_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ref_i_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ref_q_V : IN STD_LOGIC_VECTOR (7 downto 0);
    y_i_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    y_q_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x_V_ap_vld : IN STD_LOGIC;
    ref_i_V_ap_vld : IN STD_LOGIC;
    ref_q_V_ap_vld : IN STD_LOGIC;
    y_i_V_ap_vld : OUT STD_LOGIC;
    y_q_V_ap_vld : OUT STD_LOGIC );
end;


architecture behav of d_conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "d_conv,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045-ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.446000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=122,HLS_SYN_FF=4876,HLS_SYN_LUT=3390,HLS_VERSION=2019_1_3}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal iq_mult_U0_ap_start : STD_LOGIC;
    signal iq_mult_U0_ap_done : STD_LOGIC;
    signal iq_mult_U0_ap_continue : STD_LOGIC;
    signal iq_mult_U0_ap_idle : STD_LOGIC;
    signal iq_mult_U0_ap_ready : STD_LOGIC;
    signal iq_mult_U0_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal iq_mult_U0_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_x_q_V : STD_LOGIC;
    signal x_q_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_x_q_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_x_q_V : STD_LOGIC;
    signal ap_channel_done_x_i_V : STD_LOGIC;
    signal x_i_V_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_x_i_V : STD_LOGIC := '0';
    signal ap_sync_channel_write_x_i_V : STD_LOGIC;
    signal Block_proc_U0_ap_start : STD_LOGIC;
    signal Block_proc_U0_ap_done : STD_LOGIC;
    signal Block_proc_U0_ap_continue : STD_LOGIC;
    signal Block_proc_U0_ap_idle : STD_LOGIC;
    signal Block_proc_U0_ap_ready : STD_LOGIC;
    signal Block_proc_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_extLd_loc_channel : STD_LOGIC;
    signal extLd_loc_channel_full_n : STD_LOGIC;
    signal fir_filter_a_U0_ap_start : STD_LOGIC;
    signal fir_filter_a_U0_ap_done : STD_LOGIC;
    signal fir_filter_a_U0_ap_continue : STD_LOGIC;
    signal fir_filter_a_U0_ap_idle : STD_LOGIC;
    signal fir_filter_a_U0_ap_ready : STD_LOGIC;
    signal fir_filter_a_U0_y_V : STD_LOGIC_VECTOR (31 downto 0);
    signal fir_filter_a_U0_y_V_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal Block_proc33_U0_ap_start : STD_LOGIC;
    signal Block_proc33_U0_ap_done : STD_LOGIC;
    signal Block_proc33_U0_ap_continue : STD_LOGIC;
    signal Block_proc33_U0_ap_idle : STD_LOGIC;
    signal Block_proc33_U0_ap_ready : STD_LOGIC;
    signal Block_proc33_U0_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_channel_done_extLd4_loc_channel : STD_LOGIC;
    signal extLd4_loc_channel_full_n : STD_LOGIC;
    signal fir_filter_b_U0_ap_start : STD_LOGIC;
    signal fir_filter_b_U0_ap_done : STD_LOGIC;
    signal fir_filter_b_U0_ap_continue : STD_LOGIC;
    signal fir_filter_b_U0_ap_idle : STD_LOGIC;
    signal fir_filter_b_U0_ap_ready : STD_LOGIC;
    signal fir_filter_b_U0_y_V : STD_LOGIC_VECTOR (31 downto 0);
    signal fir_filter_b_U0_y_V_ap_vld : STD_LOGIC;
    signal x_i_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal x_i_V_empty_n : STD_LOGIC;
    signal x_q_V_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal x_q_V_empty_n : STD_LOGIC;
    signal extLd_loc_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal extLd_loc_channel_empty_n : STD_LOGIC;
    signal extLd4_loc_channel_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal extLd4_loc_channel_empty_n : STD_LOGIC;
    signal iq_mult_U0_start_full_n : STD_LOGIC;
    signal iq_mult_U0_start_write : STD_LOGIC;
    signal Block_proc_U0_start_full_n : STD_LOGIC;
    signal Block_proc_U0_start_write : STD_LOGIC;
    signal fir_filter_a_U0_start_full_n : STD_LOGIC;
    signal fir_filter_a_U0_start_write : STD_LOGIC;
    signal Block_proc33_U0_start_full_n : STD_LOGIC;
    signal Block_proc33_U0_start_write : STD_LOGIC;
    signal fir_filter_b_U0_start_full_n : STD_LOGIC;
    signal fir_filter_b_U0_start_write : STD_LOGIC;

    component iq_mult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_V : IN STD_LOGIC_VECTOR (7 downto 0);
        x_V_ap_vld : IN STD_LOGIC;
        ref_i_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ref_i_V_ap_vld : IN STD_LOGIC;
        ref_q_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ref_q_V_ap_vld : IN STD_LOGIC;
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component Block_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fir_filter_a IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        extLd_loc_channel : IN STD_LOGIC_VECTOR (15 downto 0);
        y_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_V_ap_vld : OUT STD_LOGIC );
    end component;


    component Block_proc33 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component fir_filter_b IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        extLd4_loc_channel : IN STD_LOGIC_VECTOR (15 downto 0);
        y_V : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_V_ap_vld : OUT STD_LOGIC );
    end component;


    component fifo_w16_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    iq_mult_U0 : component iq_mult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => iq_mult_U0_ap_start,
        ap_done => iq_mult_U0_ap_done,
        ap_continue => iq_mult_U0_ap_continue,
        ap_idle => iq_mult_U0_ap_idle,
        ap_ready => iq_mult_U0_ap_ready,
        x_V => x_V,
        x_V_ap_vld => x_V_ap_vld,
        ref_i_V => ref_i_V,
        ref_i_V_ap_vld => ref_i_V_ap_vld,
        ref_q_V => ref_q_V,
        ref_q_V_ap_vld => ref_q_V_ap_vld,
        ap_return_0 => iq_mult_U0_ap_return_0,
        ap_return_1 => iq_mult_U0_ap_return_1);

    Block_proc_U0 : component Block_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_proc_U0_ap_start,
        ap_done => Block_proc_U0_ap_done,
        ap_continue => Block_proc_U0_ap_continue,
        ap_idle => Block_proc_U0_ap_idle,
        ap_ready => Block_proc_U0_ap_ready,
        p_read => x_i_V_dout,
        ap_return => Block_proc_U0_ap_return);

    fir_filter_a_U0 : component fir_filter_a
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fir_filter_a_U0_ap_start,
        ap_done => fir_filter_a_U0_ap_done,
        ap_continue => fir_filter_a_U0_ap_continue,
        ap_idle => fir_filter_a_U0_ap_idle,
        ap_ready => fir_filter_a_U0_ap_ready,
        extLd_loc_channel => extLd_loc_channel_dout,
        y_V => fir_filter_a_U0_y_V,
        y_V_ap_vld => fir_filter_a_U0_y_V_ap_vld);

    Block_proc33_U0 : component Block_proc33
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_proc33_U0_ap_start,
        ap_done => Block_proc33_U0_ap_done,
        ap_continue => Block_proc33_U0_ap_continue,
        ap_idle => Block_proc33_U0_ap_idle,
        ap_ready => Block_proc33_U0_ap_ready,
        p_read => x_q_V_dout,
        ap_return => Block_proc33_U0_ap_return);

    fir_filter_b_U0 : component fir_filter_b
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fir_filter_b_U0_ap_start,
        ap_done => fir_filter_b_U0_ap_done,
        ap_continue => fir_filter_b_U0_ap_continue,
        ap_idle => fir_filter_b_U0_ap_idle,
        ap_ready => fir_filter_b_U0_ap_ready,
        extLd4_loc_channel => extLd4_loc_channel_dout,
        y_V => fir_filter_b_U0_y_V,
        y_V_ap_vld => fir_filter_b_U0_y_V_ap_vld);

    x_i_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iq_mult_U0_ap_return_0,
        if_full_n => x_i_V_full_n,
        if_write => ap_channel_done_x_i_V,
        if_dout => x_i_V_dout,
        if_empty_n => x_i_V_empty_n,
        if_read => Block_proc_U0_ap_ready);

    x_q_V_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => iq_mult_U0_ap_return_1,
        if_full_n => x_q_V_full_n,
        if_write => ap_channel_done_x_q_V,
        if_dout => x_q_V_dout,
        if_empty_n => x_q_V_empty_n,
        if_read => Block_proc33_U0_ap_ready);

    extLd_loc_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc_U0_ap_return,
        if_full_n => extLd_loc_channel_full_n,
        if_write => Block_proc_U0_ap_done,
        if_dout => extLd_loc_channel_dout,
        if_empty_n => extLd_loc_channel_empty_n,
        if_read => fir_filter_a_U0_ap_ready);

    extLd4_loc_channel_U : component fifo_w16_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_proc33_U0_ap_return,
        if_full_n => extLd4_loc_channel_full_n,
        if_write => Block_proc33_U0_ap_done,
        if_dout => extLd4_loc_channel_dout,
        if_empty_n => extLd4_loc_channel_empty_n,
        if_read => fir_filter_b_U0_ap_ready);





    ap_sync_reg_channel_write_x_i_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_x_i_V <= ap_const_logic_0;
            else
                if (((iq_mult_U0_ap_done and iq_mult_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_x_i_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_x_i_V <= ap_sync_channel_write_x_i_V;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_x_q_V_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_x_q_V <= ap_const_logic_0;
            else
                if (((iq_mult_U0_ap_done and iq_mult_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_x_q_V <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_x_q_V <= ap_sync_channel_write_x_q_V;
                end if; 
            end if;
        end if;
    end process;

    Block_proc33_U0_ap_continue <= extLd4_loc_channel_full_n;
    Block_proc33_U0_ap_start <= x_q_V_empty_n;
    Block_proc33_U0_start_full_n <= ap_const_logic_1;
    Block_proc33_U0_start_write <= ap_const_logic_0;
    Block_proc_U0_ap_continue <= extLd_loc_channel_full_n;
    Block_proc_U0_ap_start <= x_i_V_empty_n;
    Block_proc_U0_start_full_n <= ap_const_logic_1;
    Block_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_extLd4_loc_channel <= Block_proc33_U0_ap_done;
    ap_channel_done_extLd_loc_channel <= Block_proc_U0_ap_done;
    ap_channel_done_x_i_V <= (iq_mult_U0_ap_done and (ap_sync_reg_channel_write_x_i_V xor ap_const_logic_1));
    ap_channel_done_x_q_V <= (iq_mult_U0_ap_done and (ap_sync_reg_channel_write_x_q_V xor ap_const_logic_1));
    ap_sync_channel_write_x_i_V <= ((x_i_V_full_n and ap_channel_done_x_i_V) or ap_sync_reg_channel_write_x_i_V);
    ap_sync_channel_write_x_q_V <= ((x_q_V_full_n and ap_channel_done_x_q_V) or ap_sync_reg_channel_write_x_q_V);
    ap_sync_continue <= ap_const_logic_0;
    fir_filter_a_U0_ap_continue <= ap_const_logic_1;
    fir_filter_a_U0_ap_start <= extLd_loc_channel_empty_n;
    fir_filter_a_U0_start_full_n <= ap_const_logic_1;
    fir_filter_a_U0_start_write <= ap_const_logic_0;
    fir_filter_b_U0_ap_continue <= ap_const_logic_1;
    fir_filter_b_U0_ap_start <= extLd4_loc_channel_empty_n;
    fir_filter_b_U0_start_full_n <= ap_const_logic_1;
    fir_filter_b_U0_start_write <= ap_const_logic_0;
    iq_mult_U0_ap_continue <= (ap_sync_channel_write_x_q_V and ap_sync_channel_write_x_i_V);
    iq_mult_U0_ap_start <= ap_const_logic_1;
    iq_mult_U0_start_full_n <= ap_const_logic_1;
    iq_mult_U0_start_write <= ap_const_logic_0;
    y_i_V <= fir_filter_a_U0_y_V;
    y_i_V_ap_vld <= fir_filter_a_U0_y_V_ap_vld;
    y_q_V <= fir_filter_b_U0_y_V;
    y_q_V_ap_vld <= fir_filter_b_U0_y_V_ap_vld;
end behav;
