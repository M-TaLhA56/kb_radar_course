// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fir_filter_a (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        extLd_loc_channel,
        y_V,
        y_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] extLd_loc_channel;
output  [31:0] y_V;
output   y_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] shift_reg_V_30;
reg   [31:0] shift_reg_V_29;
reg   [31:0] shift_reg_V_28;
reg   [31:0] shift_reg_V_27;
reg   [31:0] shift_reg_V_26;
reg   [31:0] shift_reg_V_25;
reg   [31:0] shift_reg_V_24;
reg   [31:0] shift_reg_V_23;
reg   [31:0] shift_reg_V_22;
reg   [31:0] shift_reg_V_21;
reg   [31:0] shift_reg_V_20;
reg   [31:0] shift_reg_V_19;
reg   [31:0] shift_reg_V_18;
reg   [31:0] shift_reg_V_17;
reg   [31:0] shift_reg_V_16;
reg   [31:0] shift_reg_V_15;
reg   [31:0] shift_reg_V_14;
reg   [31:0] shift_reg_V_13;
reg   [31:0] shift_reg_V_12;
reg   [31:0] shift_reg_V_11;
reg   [31:0] shift_reg_V_10;
reg   [31:0] shift_reg_V_9;
reg   [31:0] shift_reg_V_8;
reg   [31:0] shift_reg_V_7;
reg   [31:0] shift_reg_V_6;
reg   [31:0] shift_reg_V_5;
reg   [31:0] shift_reg_V_4;
reg   [31:0] shift_reg_V_3;
reg   [31:0] shift_reg_V_2;
reg   [15:0] shift_reg_V_1;
reg   [15:0] shift_reg_V_0;
wire   [31:0] mul_ln700_fu_133_p2;
reg   [31:0] mul_ln700_reg_784;
wire   [31:0] mul_ln700_32_fu_149_p2;
reg   [31:0] mul_ln700_32_reg_789;
wire   [31:0] mul_ln700_33_fu_165_p2;
reg   [31:0] mul_ln700_33_reg_794;
wire   [31:0] mul_ln700_34_fu_181_p2;
reg   [31:0] mul_ln700_34_reg_799;
wire   [31:0] mul_ln700_35_fu_197_p2;
reg   [31:0] mul_ln700_35_reg_804;
wire   [31:0] mul_ln700_36_fu_213_p2;
reg   [31:0] mul_ln700_36_reg_809;
wire   [31:0] mul_ln700_37_fu_229_p2;
reg   [31:0] mul_ln700_37_reg_814;
wire   [31:0] mul_ln700_38_fu_245_p2;
reg   [31:0] mul_ln700_38_reg_819;
wire   [31:0] mul_ln700_39_fu_261_p2;
reg   [31:0] mul_ln700_39_reg_824;
wire   [31:0] mul_ln700_40_fu_277_p2;
reg   [31:0] mul_ln700_40_reg_829;
wire   [31:0] mul_ln700_41_fu_293_p2;
reg   [31:0] mul_ln700_41_reg_834;
wire   [31:0] mul_ln700_42_fu_309_p2;
reg   [31:0] mul_ln700_42_reg_839;
wire   [31:0] mul_ln700_43_fu_325_p2;
reg   [31:0] mul_ln700_43_reg_844;
wire   [31:0] mul_ln700_44_fu_341_p2;
reg   [31:0] mul_ln700_44_reg_849;
wire   [31:0] mul_ln700_45_fu_357_p2;
reg   [31:0] mul_ln700_45_reg_854;
wire   [31:0] mul_ln700_46_fu_373_p2;
reg   [31:0] mul_ln700_46_reg_859;
wire   [31:0] mul_ln700_47_fu_389_p2;
reg   [31:0] mul_ln700_47_reg_864;
wire   [31:0] mul_ln700_48_fu_405_p2;
reg   [31:0] mul_ln700_48_reg_869;
wire   [31:0] mul_ln700_49_fu_421_p2;
reg   [31:0] mul_ln700_49_reg_874;
wire   [31:0] mul_ln700_50_fu_437_p2;
reg   [31:0] mul_ln700_50_reg_879;
wire   [31:0] mul_ln700_51_fu_453_p2;
reg   [31:0] mul_ln700_51_reg_884;
wire   [31:0] mul_ln700_52_fu_469_p2;
reg   [31:0] mul_ln700_52_reg_889;
wire   [31:0] mul_ln700_53_fu_485_p2;
reg   [31:0] mul_ln700_53_reg_894;
wire   [31:0] mul_ln700_54_fu_501_p2;
reg   [31:0] mul_ln700_54_reg_899;
wire   [31:0] mul_ln700_55_fu_517_p2;
reg   [31:0] mul_ln700_55_reg_904;
wire   [31:0] mul_ln700_56_fu_533_p2;
reg   [31:0] mul_ln700_56_reg_909;
wire   [31:0] mul_ln700_57_fu_549_p2;
reg   [31:0] mul_ln700_57_reg_914;
wire   [31:0] mul_ln700_58_fu_565_p2;
reg   [31:0] mul_ln700_58_reg_919;
wire   [31:0] mul_ln700_59_fu_581_p2;
reg   [31:0] mul_ln700_59_reg_924;
wire  signed [31:0] sext_ln180_fu_591_p1;
reg  signed [31:0] sext_ln180_reg_929;
reg  signed [15:0] shift_reg_V_0_load_reg_934;
wire  signed [25:0] mul_ln700_62_fu_765_p2;
reg  signed [25:0] mul_ln700_62_reg_939;
wire   [31:0] add_ln700_32_fu_632_p2;
reg   [31:0] add_ln700_32_reg_944;
wire   [31:0] add_ln700_33_fu_638_p2;
reg   [31:0] add_ln700_33_reg_949;
wire   [31:0] add_ln700_34_fu_642_p2;
reg   [31:0] add_ln700_34_reg_954;
wire   [31:0] add_ln700_39_fu_654_p2;
reg   [31:0] add_ln700_39_reg_959;
wire   [31:0] add_ln700_42_fu_668_p2;
reg   [31:0] add_ln700_42_reg_964;
wire   [31:0] add_ln700_47_fu_682_p2;
reg   [31:0] add_ln700_47_reg_969;
wire   [31:0] add_ln700_48_fu_688_p2;
reg   [31:0] add_ln700_48_reg_974;
wire   [31:0] add_ln700_49_fu_692_p2;
reg   [31:0] add_ln700_49_reg_979;
wire   [31:0] add_ln700_54_fu_704_p2;
reg   [31:0] add_ln700_54_reg_984;
(* use_dsp48 = "no" *) wire   [31:0] add_ln700_55_fu_710_p2;
reg   [31:0] add_ln700_55_reg_989;
wire  signed [25:0] grp_fu_777_p3;
reg  signed [25:0] add_ln700_56_reg_994;
wire   [31:0] add_ln700_44_fu_727_p2;
reg   [31:0] add_ln700_44_reg_999;
wire   [31:0] add_ln700_51_fu_737_p2;
reg   [31:0] add_ln700_51_reg_1004;
wire   [31:0] add_ln700_58_fu_750_p2;
reg   [31:0] add_ln700_58_reg_1009;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] mul_ln700_fu_133_p0;
wire  signed [31:0] mul_ln700_32_fu_149_p0;
wire  signed [31:0] mul_ln700_33_fu_165_p0;
wire  signed [31:0] mul_ln700_34_fu_181_p0;
wire  signed [31:0] mul_ln700_35_fu_197_p0;
wire  signed [31:0] mul_ln700_36_fu_213_p0;
wire  signed [31:0] mul_ln700_37_fu_229_p0;
wire  signed [31:0] mul_ln700_38_fu_245_p0;
wire  signed [31:0] mul_ln700_39_fu_261_p0;
wire  signed [31:0] mul_ln700_40_fu_277_p0;
wire  signed [31:0] mul_ln700_41_fu_293_p0;
wire  signed [31:0] mul_ln700_42_fu_309_p0;
wire  signed [31:0] mul_ln700_43_fu_325_p0;
wire  signed [31:0] mul_ln700_44_fu_341_p0;
wire  signed [31:0] mul_ln700_45_fu_357_p0;
wire  signed [31:0] mul_ln700_46_fu_373_p0;
wire  signed [31:0] mul_ln700_47_fu_389_p0;
wire  signed [31:0] mul_ln700_48_fu_405_p0;
wire  signed [31:0] mul_ln700_49_fu_421_p0;
wire  signed [31:0] mul_ln700_50_fu_437_p0;
wire  signed [31:0] mul_ln700_51_fu_453_p0;
wire  signed [31:0] mul_ln700_52_fu_469_p0;
wire  signed [31:0] mul_ln700_53_fu_485_p0;
wire  signed [31:0] mul_ln700_54_fu_501_p0;
wire  signed [31:0] mul_ln700_55_fu_517_p0;
wire  signed [31:0] mul_ln700_56_fu_533_p0;
wire  signed [31:0] mul_ln700_57_fu_549_p0;
wire  signed [31:0] mul_ln700_58_fu_565_p0;
wire  signed [31:0] mul_ln700_59_fu_581_p0;
wire  signed [15:0] sext_ln180_fu_591_p0;
wire   [31:0] add_ln700_fu_624_p2;
wire   [31:0] add_ln700_31_fu_628_p2;
wire   [31:0] add_ln700_37_fu_646_p2;
wire   [31:0] add_ln700_38_fu_650_p2;
wire   [31:0] add_ln700_40_fu_660_p2;
wire   [31:0] add_ln700_41_fu_664_p2;
wire   [31:0] add_ln700_45_fu_674_p2;
wire   [31:0] add_ln700_46_fu_678_p2;
wire   [31:0] add_ln700_52_fu_696_p2;
wire   [31:0] add_ln700_53_fu_700_p2;
wire  signed [31:0] mul_ln700_60_fu_771_p2;
wire   [31:0] add_ln700_35_fu_714_p2;
wire   [31:0] add_ln700_36_fu_718_p2;
wire   [31:0] add_ln700_43_fu_723_p2;
wire   [31:0] add_ln700_50_fu_733_p2;
wire  signed [31:0] sext_ln700_2_fu_742_p1;
wire   [31:0] add_ln700_57_fu_745_p2;
wire   [31:0] add_ln700_59_fu_755_p2;
wire  signed [9:0] mul_ln700_62_fu_765_p1;
wire  signed [15:0] mul_ln700_60_fu_771_p0;
wire  signed [10:0] mul_ln700_60_fu_771_p1;
wire  signed [9:0] grp_fu_777_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 shift_reg_V_30 = 32'd0;
#0 shift_reg_V_29 = 32'd0;
#0 shift_reg_V_28 = 32'd0;
#0 shift_reg_V_27 = 32'd0;
#0 shift_reg_V_26 = 32'd0;
#0 shift_reg_V_25 = 32'd0;
#0 shift_reg_V_24 = 32'd0;
#0 shift_reg_V_23 = 32'd0;
#0 shift_reg_V_22 = 32'd0;
#0 shift_reg_V_21 = 32'd0;
#0 shift_reg_V_20 = 32'd0;
#0 shift_reg_V_19 = 32'd0;
#0 shift_reg_V_18 = 32'd0;
#0 shift_reg_V_17 = 32'd0;
#0 shift_reg_V_16 = 32'd0;
#0 shift_reg_V_15 = 32'd0;
#0 shift_reg_V_14 = 32'd0;
#0 shift_reg_V_13 = 32'd0;
#0 shift_reg_V_12 = 32'd0;
#0 shift_reg_V_11 = 32'd0;
#0 shift_reg_V_10 = 32'd0;
#0 shift_reg_V_9 = 32'd0;
#0 shift_reg_V_8 = 32'd0;
#0 shift_reg_V_7 = 32'd0;
#0 shift_reg_V_6 = 32'd0;
#0 shift_reg_V_5 = 32'd0;
#0 shift_reg_V_4 = 32'd0;
#0 shift_reg_V_3 = 32'd0;
#0 shift_reg_V_2 = 32'd0;
#0 shift_reg_V_1 = 16'd0;
#0 shift_reg_V_0 = 16'd0;
end

d_conv_mul_mul_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 26 ))
d_conv_mul_mul_16bkb_U5(
    .din0(extLd_loc_channel),
    .din1(mul_ln700_62_fu_765_p1),
    .dout(mul_ln700_62_fu_765_p2)
);

d_conv_mul_mul_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 32 ))
d_conv_mul_mul_16cud_U6(
    .din0(mul_ln700_60_fu_771_p0),
    .din1(mul_ln700_60_fu_771_p1),
    .dout(mul_ln700_60_fu_771_p2)
);

d_conv_mac_muladddEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
d_conv_mac_muladddEe_U7(
    .din0(shift_reg_V_0_load_reg_934),
    .din1(grp_fu_777_p1),
    .din2(mul_ln700_62_reg_939),
    .dout(grp_fu_777_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln700_32_reg_944 <= add_ln700_32_fu_632_p2;
        add_ln700_33_reg_949 <= add_ln700_33_fu_638_p2;
        add_ln700_34_reg_954 <= add_ln700_34_fu_642_p2;
        add_ln700_39_reg_959 <= add_ln700_39_fu_654_p2;
        add_ln700_42_reg_964 <= add_ln700_42_fu_668_p2;
        add_ln700_47_reg_969 <= add_ln700_47_fu_682_p2;
        add_ln700_48_reg_974 <= add_ln700_48_fu_688_p2;
        add_ln700_49_reg_979[31 : 1] <= add_ln700_49_fu_692_p2[31 : 1];
        add_ln700_54_reg_984 <= add_ln700_54_fu_704_p2;
        add_ln700_55_reg_989 <= add_ln700_55_fu_710_p2;
        mul_ln700_32_reg_789 <= mul_ln700_32_fu_149_p2;
        mul_ln700_33_reg_794 <= mul_ln700_33_fu_165_p2;
        mul_ln700_34_reg_799[31 : 1] <= mul_ln700_34_fu_181_p2[31 : 1];
        mul_ln700_35_reg_804 <= mul_ln700_35_fu_197_p2;
        mul_ln700_36_reg_809 <= mul_ln700_36_fu_213_p2;
        mul_ln700_37_reg_814 <= mul_ln700_37_fu_229_p2;
        mul_ln700_38_reg_819[31 : 2] <= mul_ln700_38_fu_245_p2[31 : 2];
        mul_ln700_39_reg_824[31 : 1] <= mul_ln700_39_fu_261_p2[31 : 1];
        mul_ln700_40_reg_829[31 : 2] <= mul_ln700_40_fu_277_p2[31 : 2];
        mul_ln700_41_reg_834 <= mul_ln700_41_fu_293_p2;
        mul_ln700_42_reg_839[31 : 2] <= mul_ln700_42_fu_309_p2[31 : 2];
        mul_ln700_43_reg_844 <= mul_ln700_43_fu_325_p2;
        mul_ln700_44_reg_849 <= mul_ln700_44_fu_341_p2;
        mul_ln700_45_reg_854 <= mul_ln700_45_fu_357_p2;
        mul_ln700_46_reg_859 <= mul_ln700_46_fu_373_p2;
        mul_ln700_47_reg_864 <= mul_ln700_47_fu_389_p2;
        mul_ln700_48_reg_869 <= mul_ln700_48_fu_405_p2;
        mul_ln700_49_reg_874 <= mul_ln700_49_fu_421_p2;
        mul_ln700_50_reg_879 <= mul_ln700_50_fu_437_p2;
        mul_ln700_51_reg_884[31 : 2] <= mul_ln700_51_fu_453_p2[31 : 2];
        mul_ln700_52_reg_889 <= mul_ln700_52_fu_469_p2;
        mul_ln700_53_reg_894[31 : 2] <= mul_ln700_53_fu_485_p2[31 : 2];
        mul_ln700_54_reg_899[31 : 1] <= mul_ln700_54_fu_501_p2[31 : 1];
        mul_ln700_55_reg_904[31 : 2] <= mul_ln700_55_fu_517_p2[31 : 2];
        mul_ln700_56_reg_909 <= mul_ln700_56_fu_533_p2;
        mul_ln700_57_reg_914 <= mul_ln700_57_fu_549_p2;
        mul_ln700_58_reg_919 <= mul_ln700_58_fu_565_p2;
        mul_ln700_59_reg_924[31 : 1] <= mul_ln700_59_fu_581_p2[31 : 1];
        mul_ln700_62_reg_939 <= mul_ln700_62_fu_765_p2;
        mul_ln700_reg_784 <= mul_ln700_fu_133_p2;
        sext_ln180_reg_929 <= sext_ln180_fu_591_p1;
        shift_reg_V_0_load_reg_934 <= shift_reg_V_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln700_44_reg_999 <= add_ln700_44_fu_727_p2;
        add_ln700_51_reg_1004 <= add_ln700_51_fu_737_p2;
        add_ln700_58_reg_1009 <= add_ln700_58_fu_750_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln700_56_reg_994 <= grp_fu_777_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_V_0 <= extLd_loc_channel;
        shift_reg_V_1 <= shift_reg_V_0;
        shift_reg_V_10 <= shift_reg_V_9;
        shift_reg_V_11 <= shift_reg_V_10;
        shift_reg_V_12 <= shift_reg_V_11;
        shift_reg_V_13 <= shift_reg_V_12;
        shift_reg_V_14 <= shift_reg_V_13;
        shift_reg_V_15 <= shift_reg_V_14;
        shift_reg_V_16 <= shift_reg_V_15;
        shift_reg_V_17 <= shift_reg_V_16;
        shift_reg_V_18 <= shift_reg_V_17;
        shift_reg_V_19 <= shift_reg_V_18;
        shift_reg_V_2 <= sext_ln180_fu_591_p1;
        shift_reg_V_20 <= shift_reg_V_19;
        shift_reg_V_21 <= shift_reg_V_20;
        shift_reg_V_22 <= shift_reg_V_21;
        shift_reg_V_23 <= shift_reg_V_22;
        shift_reg_V_24 <= shift_reg_V_23;
        shift_reg_V_25 <= shift_reg_V_24;
        shift_reg_V_26 <= shift_reg_V_25;
        shift_reg_V_27 <= shift_reg_V_26;
        shift_reg_V_28 <= shift_reg_V_27;
        shift_reg_V_29 <= shift_reg_V_28;
        shift_reg_V_3 <= shift_reg_V_2;
        shift_reg_V_30 <= shift_reg_V_29;
        shift_reg_V_4 <= shift_reg_V_3;
        shift_reg_V_5 <= shift_reg_V_4;
        shift_reg_V_6 <= shift_reg_V_5;
        shift_reg_V_7 <= shift_reg_V_6;
        shift_reg_V_8 <= shift_reg_V_7;
        shift_reg_V_9 <= shift_reg_V_8;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        y_V_ap_vld = 1'b1;
    end else begin
        y_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_31_fu_628_p2 = (mul_ln700_34_reg_799 + mul_ln700_33_reg_794);

assign add_ln700_32_fu_632_p2 = (add_ln700_fu_624_p2 + add_ln700_31_fu_628_p2);

assign add_ln700_33_fu_638_p2 = (mul_ln700_36_reg_809 + mul_ln700_35_reg_804);

assign add_ln700_34_fu_642_p2 = (mul_ln700_38_reg_819 + mul_ln700_37_reg_814);

assign add_ln700_35_fu_714_p2 = (add_ln700_33_reg_949 + add_ln700_34_reg_954);

assign add_ln700_36_fu_718_p2 = (add_ln700_32_reg_944 + add_ln700_35_fu_714_p2);

assign add_ln700_37_fu_646_p2 = (mul_ln700_40_reg_829 + mul_ln700_39_reg_824);

assign add_ln700_38_fu_650_p2 = (mul_ln700_42_reg_839 + mul_ln700_41_reg_834);

assign add_ln700_39_fu_654_p2 = (add_ln700_37_fu_646_p2 + add_ln700_38_fu_650_p2);

assign add_ln700_40_fu_660_p2 = (mul_ln700_44_reg_849 + mul_ln700_43_reg_844);

assign add_ln700_41_fu_664_p2 = (mul_ln700_46_reg_859 + mul_ln700_45_reg_854);

assign add_ln700_42_fu_668_p2 = (add_ln700_40_fu_660_p2 + add_ln700_41_fu_664_p2);

assign add_ln700_43_fu_723_p2 = (add_ln700_39_reg_959 + add_ln700_42_reg_964);

assign add_ln700_44_fu_727_p2 = (add_ln700_36_fu_718_p2 + add_ln700_43_fu_723_p2);

assign add_ln700_45_fu_674_p2 = (mul_ln700_48_reg_869 + mul_ln700_47_reg_864);

assign add_ln700_46_fu_678_p2 = (mul_ln700_50_reg_879 + mul_ln700_49_reg_874);

assign add_ln700_47_fu_682_p2 = (add_ln700_45_fu_674_p2 + add_ln700_46_fu_678_p2);

assign add_ln700_48_fu_688_p2 = (mul_ln700_52_reg_889 + mul_ln700_51_reg_884);

assign add_ln700_49_fu_692_p2 = (mul_ln700_54_reg_899 + mul_ln700_53_reg_894);

assign add_ln700_50_fu_733_p2 = (add_ln700_48_reg_974 + add_ln700_49_reg_979);

assign add_ln700_51_fu_737_p2 = (add_ln700_47_reg_969 + add_ln700_50_fu_733_p2);

assign add_ln700_52_fu_696_p2 = (mul_ln700_56_reg_909 + mul_ln700_55_reg_904);

assign add_ln700_53_fu_700_p2 = (mul_ln700_58_reg_919 + mul_ln700_57_reg_914);

assign add_ln700_54_fu_704_p2 = (add_ln700_52_fu_696_p2 + add_ln700_53_fu_700_p2);

assign add_ln700_55_fu_710_p2 = ($signed(mul_ln700_60_fu_771_p2) + $signed(mul_ln700_59_reg_924));

assign add_ln700_57_fu_745_p2 = ($signed(add_ln700_55_reg_989) + $signed(sext_ln700_2_fu_742_p1));

assign add_ln700_58_fu_750_p2 = (add_ln700_54_reg_984 + add_ln700_57_fu_745_p2);

assign add_ln700_59_fu_755_p2 = (add_ln700_51_reg_1004 + add_ln700_58_reg_1009);

assign add_ln700_fu_624_p2 = (mul_ln700_32_reg_789 + mul_ln700_reg_784);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign grp_fu_777_p1 = 26'd67108447;

assign mul_ln700_32_fu_149_p0 = shift_reg_V_29;

assign mul_ln700_32_fu_149_p2 = ($signed(mul_ln700_32_fu_149_p0) * $signed(-'h1A1));

assign mul_ln700_33_fu_165_p0 = shift_reg_V_28;

assign mul_ln700_33_fu_165_p2 = ($signed(mul_ln700_33_fu_165_p0) * $signed(-'h207));

assign mul_ln700_34_fu_181_p0 = shift_reg_V_27;

assign mul_ln700_34_fu_181_p2 = ($signed(mul_ln700_34_fu_181_p0) * $signed(-'h22A));

assign mul_ln700_35_fu_197_p0 = shift_reg_V_26;

assign mul_ln700_35_fu_197_p2 = ($signed(mul_ln700_35_fu_197_p0) * $signed(-'h1E5));

assign mul_ln700_36_fu_213_p0 = shift_reg_V_25;

assign mul_ln700_36_fu_213_p2 = ($signed(mul_ln700_36_fu_213_p0) * $signed(-'h113));

assign mul_ln700_37_fu_229_p0 = shift_reg_V_24;

assign mul_ln700_37_fu_229_p2 = ($signed(mul_ln700_37_fu_229_p0) * $signed('h67));

assign mul_ln700_38_fu_245_p0 = shift_reg_V_23;

assign mul_ln700_38_fu_245_p2 = ($signed(mul_ln700_38_fu_245_p0) * $signed('h294));

assign mul_ln700_39_fu_261_p0 = shift_reg_V_22;

assign mul_ln700_39_fu_261_p2 = ($signed(mul_ln700_39_fu_261_p0) * $signed('h56A));

assign mul_ln700_40_fu_277_p0 = shift_reg_V_21;

assign mul_ln700_40_fu_277_p2 = ($signed(mul_ln700_40_fu_277_p0) * $signed('h8CC));

assign mul_ln700_41_fu_293_p0 = shift_reg_V_20;

assign mul_ln700_41_fu_293_p2 = ($signed(mul_ln700_41_fu_293_p0) * $signed('hC83));

assign mul_ln700_42_fu_309_p0 = shift_reg_V_19;

assign mul_ln700_42_fu_309_p2 = ($signed(mul_ln700_42_fu_309_p0) * $signed('h104C));

assign mul_ln700_43_fu_325_p0 = shift_reg_V_18;

assign mul_ln700_43_fu_325_p2 = ($signed(mul_ln700_43_fu_325_p0) * $signed('h13D7));

assign mul_ln700_44_fu_341_p0 = shift_reg_V_17;

assign mul_ln700_44_fu_341_p2 = ($signed(mul_ln700_44_fu_341_p0) * $signed('h16D5));

assign mul_ln700_45_fu_357_p0 = shift_reg_V_16;

assign mul_ln700_45_fu_357_p2 = ($signed(mul_ln700_45_fu_357_p0) * $signed('h1901));

assign mul_ln700_46_fu_373_p0 = shift_reg_V_15;

assign mul_ln700_46_fu_373_p2 = ($signed(mul_ln700_46_fu_373_p0) * $signed('h1A25));

assign mul_ln700_47_fu_389_p0 = shift_reg_V_14;

assign mul_ln700_47_fu_389_p2 = ($signed(mul_ln700_47_fu_389_p0) * $signed('h1A25));

assign mul_ln700_48_fu_405_p0 = shift_reg_V_13;

assign mul_ln700_48_fu_405_p2 = ($signed(mul_ln700_48_fu_405_p0) * $signed('h1901));

assign mul_ln700_49_fu_421_p0 = shift_reg_V_12;

assign mul_ln700_49_fu_421_p2 = ($signed(mul_ln700_49_fu_421_p0) * $signed('h16D5));

assign mul_ln700_50_fu_437_p0 = shift_reg_V_11;

assign mul_ln700_50_fu_437_p2 = ($signed(mul_ln700_50_fu_437_p0) * $signed('h13D7));

assign mul_ln700_51_fu_453_p0 = shift_reg_V_10;

assign mul_ln700_51_fu_453_p2 = ($signed(mul_ln700_51_fu_453_p0) * $signed('h104C));

assign mul_ln700_52_fu_469_p0 = shift_reg_V_9;

assign mul_ln700_52_fu_469_p2 = ($signed(mul_ln700_52_fu_469_p0) * $signed('hC83));

assign mul_ln700_53_fu_485_p0 = shift_reg_V_8;

assign mul_ln700_53_fu_485_p2 = ($signed(mul_ln700_53_fu_485_p0) * $signed('h8CC));

assign mul_ln700_54_fu_501_p0 = shift_reg_V_7;

assign mul_ln700_54_fu_501_p2 = ($signed(mul_ln700_54_fu_501_p0) * $signed('h56A));

assign mul_ln700_55_fu_517_p0 = shift_reg_V_6;

assign mul_ln700_55_fu_517_p2 = ($signed(mul_ln700_55_fu_517_p0) * $signed('h294));

assign mul_ln700_56_fu_533_p0 = shift_reg_V_5;

assign mul_ln700_56_fu_533_p2 = ($signed(mul_ln700_56_fu_533_p0) * $signed('h67));

assign mul_ln700_57_fu_549_p0 = shift_reg_V_4;

assign mul_ln700_57_fu_549_p2 = ($signed(mul_ln700_57_fu_549_p0) * $signed(-'h113));

assign mul_ln700_58_fu_565_p0 = shift_reg_V_3;

assign mul_ln700_58_fu_565_p2 = ($signed(mul_ln700_58_fu_565_p0) * $signed(-'h1E5));

assign mul_ln700_59_fu_581_p0 = shift_reg_V_2;

assign mul_ln700_59_fu_581_p2 = ($signed(mul_ln700_59_fu_581_p0) * $signed(-'h22A));

assign mul_ln700_60_fu_771_p0 = sext_ln180_reg_929;

assign mul_ln700_60_fu_771_p1 = 32'd4294966777;

assign mul_ln700_62_fu_765_p1 = 26'd67108391;

assign mul_ln700_fu_133_p0 = shift_reg_V_30;

assign mul_ln700_fu_133_p2 = ($signed(mul_ln700_fu_133_p0) * $signed(-'h1D9));

assign sext_ln180_fu_591_p0 = shift_reg_V_1;

assign sext_ln180_fu_591_p1 = sext_ln180_fu_591_p0;

assign sext_ln700_2_fu_742_p1 = add_ln700_56_reg_994;

assign y_V = (add_ln700_44_reg_999 + add_ln700_59_fu_755_p2);

always @ (posedge ap_clk) begin
    mul_ln700_34_reg_799[0] <= 1'b0;
    mul_ln700_38_reg_819[1:0] <= 2'b00;
    mul_ln700_39_reg_824[0] <= 1'b0;
    mul_ln700_40_reg_829[1:0] <= 2'b00;
    mul_ln700_42_reg_839[1:0] <= 2'b00;
    mul_ln700_51_reg_884[1:0] <= 2'b00;
    mul_ln700_53_reg_894[1:0] <= 2'b00;
    mul_ln700_54_reg_899[0] <= 1'b0;
    mul_ln700_55_reg_904[1:0] <= 2'b00;
    mul_ln700_59_reg_924[0] <= 1'b0;
    add_ln700_49_reg_979[0] <= 1'b0;
end

endmodule //fir_filter_a
