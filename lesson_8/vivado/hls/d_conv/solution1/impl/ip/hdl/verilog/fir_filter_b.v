// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module fir_filter_b (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        extLd4_loc_channel,
        y_V,
        y_V_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [15:0] extLd4_loc_channel;
output  [31:0] y_V;
output   y_V_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg y_V_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] shift_reg_V_1_30;
reg   [31:0] shift_reg_V_1_29;
reg   [31:0] shift_reg_V_1_28;
reg   [31:0] shift_reg_V_1_27;
reg   [31:0] shift_reg_V_1_26;
reg   [31:0] shift_reg_V_1_25;
reg   [31:0] shift_reg_V_1_24;
reg   [31:0] shift_reg_V_1_23;
reg   [31:0] shift_reg_V_1_22;
reg   [31:0] shift_reg_V_1_21;
reg   [31:0] shift_reg_V_1_20;
reg   [31:0] shift_reg_V_1_19;
reg   [31:0] shift_reg_V_1_18;
reg   [31:0] shift_reg_V_1_17;
reg   [31:0] shift_reg_V_1_16;
reg   [31:0] shift_reg_V_1_15;
reg   [31:0] shift_reg_V_1_14;
reg   [31:0] shift_reg_V_1_13;
reg   [31:0] shift_reg_V_1_12;
reg   [31:0] shift_reg_V_1_11;
reg   [31:0] shift_reg_V_1_10;
reg   [31:0] shift_reg_V_1_9;
reg   [31:0] shift_reg_V_1_8;
reg   [31:0] shift_reg_V_1_7;
reg   [31:0] shift_reg_V_1_6;
reg   [31:0] shift_reg_V_1_5;
reg   [31:0] shift_reg_V_1_4;
reg   [31:0] shift_reg_V_1_3;
reg   [31:0] shift_reg_V_1_2;
reg   [15:0] shift_reg_V_1_1;
reg   [15:0] shift_reg_V_1_0;
wire   [31:0] mul_ln700_fu_137_p2;
reg   [31:0] mul_ln700_reg_788;
wire   [31:0] mul_ln700_1_fu_153_p2;
reg   [31:0] mul_ln700_1_reg_793;
wire   [31:0] mul_ln700_2_fu_169_p2;
reg   [31:0] mul_ln700_2_reg_798;
wire   [31:0] mul_ln700_3_fu_185_p2;
reg   [31:0] mul_ln700_3_reg_803;
wire   [31:0] mul_ln700_4_fu_201_p2;
reg   [31:0] mul_ln700_4_reg_808;
wire   [31:0] mul_ln700_5_fu_217_p2;
reg   [31:0] mul_ln700_5_reg_813;
wire   [31:0] mul_ln700_6_fu_233_p2;
reg   [31:0] mul_ln700_6_reg_818;
wire   [31:0] mul_ln700_7_fu_249_p2;
reg   [31:0] mul_ln700_7_reg_823;
wire   [31:0] mul_ln700_8_fu_265_p2;
reg   [31:0] mul_ln700_8_reg_828;
wire   [31:0] mul_ln700_9_fu_281_p2;
reg   [31:0] mul_ln700_9_reg_833;
wire   [31:0] mul_ln700_10_fu_297_p2;
reg   [31:0] mul_ln700_10_reg_838;
wire   [31:0] mul_ln700_11_fu_313_p2;
reg   [31:0] mul_ln700_11_reg_843;
wire   [31:0] mul_ln700_12_fu_329_p2;
reg   [31:0] mul_ln700_12_reg_848;
wire   [31:0] mul_ln700_13_fu_345_p2;
reg   [31:0] mul_ln700_13_reg_853;
wire   [31:0] mul_ln700_14_fu_361_p2;
reg   [31:0] mul_ln700_14_reg_858;
wire   [31:0] mul_ln700_15_fu_377_p2;
reg   [31:0] mul_ln700_15_reg_863;
wire   [31:0] mul_ln700_16_fu_393_p2;
reg   [31:0] mul_ln700_16_reg_868;
wire   [31:0] mul_ln700_17_fu_409_p2;
reg   [31:0] mul_ln700_17_reg_873;
wire   [31:0] mul_ln700_18_fu_425_p2;
reg   [31:0] mul_ln700_18_reg_878;
wire   [31:0] mul_ln700_19_fu_441_p2;
reg   [31:0] mul_ln700_19_reg_883;
wire   [31:0] mul_ln700_20_fu_457_p2;
reg   [31:0] mul_ln700_20_reg_888;
wire   [31:0] mul_ln700_21_fu_473_p2;
reg   [31:0] mul_ln700_21_reg_893;
wire   [31:0] mul_ln700_22_fu_489_p2;
reg   [31:0] mul_ln700_22_reg_898;
wire   [31:0] mul_ln700_23_fu_505_p2;
reg   [31:0] mul_ln700_23_reg_903;
wire   [31:0] mul_ln700_24_fu_521_p2;
reg   [31:0] mul_ln700_24_reg_908;
wire   [31:0] mul_ln700_25_fu_537_p2;
reg   [31:0] mul_ln700_25_reg_913;
wire   [31:0] mul_ln700_26_fu_553_p2;
reg   [31:0] mul_ln700_26_reg_918;
wire   [31:0] mul_ln700_27_fu_569_p2;
reg   [31:0] mul_ln700_27_reg_923;
wire   [31:0] mul_ln700_28_fu_585_p2;
reg   [31:0] mul_ln700_28_reg_928;
wire  signed [31:0] sext_ln180_fu_595_p1;
reg  signed [31:0] sext_ln180_reg_933;
reg  signed [15:0] shift_reg_V_1_0_load_reg_938;
wire  signed [25:0] mul_ln700_31_fu_769_p2;
reg  signed [25:0] mul_ln700_31_reg_943;
wire   [31:0] add_ln700_2_fu_636_p2;
reg   [31:0] add_ln700_2_reg_948;
wire   [31:0] add_ln700_3_fu_642_p2;
reg   [31:0] add_ln700_3_reg_953;
wire   [31:0] add_ln700_4_fu_646_p2;
reg   [31:0] add_ln700_4_reg_958;
wire   [31:0] add_ln700_9_fu_658_p2;
reg   [31:0] add_ln700_9_reg_963;
wire   [31:0] add_ln700_12_fu_672_p2;
reg   [31:0] add_ln700_12_reg_968;
wire   [31:0] add_ln700_17_fu_686_p2;
reg   [31:0] add_ln700_17_reg_973;
wire   [31:0] add_ln700_18_fu_692_p2;
reg   [31:0] add_ln700_18_reg_978;
wire   [31:0] add_ln700_19_fu_696_p2;
reg   [31:0] add_ln700_19_reg_983;
wire   [31:0] add_ln700_24_fu_708_p2;
reg   [31:0] add_ln700_24_reg_988;
(* use_dsp48 = "no" *) wire   [31:0] add_ln700_25_fu_714_p2;
reg   [31:0] add_ln700_25_reg_993;
wire  signed [25:0] grp_fu_781_p3;
reg  signed [25:0] add_ln700_26_reg_998;
wire   [31:0] add_ln700_14_fu_731_p2;
reg   [31:0] add_ln700_14_reg_1003;
wire   [31:0] add_ln700_21_fu_741_p2;
reg   [31:0] add_ln700_21_reg_1008;
wire   [31:0] add_ln700_28_fu_754_p2;
reg   [31:0] add_ln700_28_reg_1013;
reg    ap_block_pp0_stage0_subdone;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_01001;
wire  signed [31:0] mul_ln700_fu_137_p0;
wire  signed [31:0] mul_ln700_1_fu_153_p0;
wire  signed [31:0] mul_ln700_2_fu_169_p0;
wire  signed [31:0] mul_ln700_3_fu_185_p0;
wire  signed [31:0] mul_ln700_4_fu_201_p0;
wire  signed [31:0] mul_ln700_5_fu_217_p0;
wire  signed [31:0] mul_ln700_6_fu_233_p0;
wire  signed [31:0] mul_ln700_7_fu_249_p0;
wire  signed [31:0] mul_ln700_8_fu_265_p0;
wire  signed [31:0] mul_ln700_9_fu_281_p0;
wire  signed [31:0] mul_ln700_10_fu_297_p0;
wire  signed [31:0] mul_ln700_11_fu_313_p0;
wire  signed [31:0] mul_ln700_12_fu_329_p0;
wire  signed [31:0] mul_ln700_13_fu_345_p0;
wire  signed [31:0] mul_ln700_14_fu_361_p0;
wire  signed [31:0] mul_ln700_15_fu_377_p0;
wire  signed [31:0] mul_ln700_16_fu_393_p0;
wire  signed [31:0] mul_ln700_17_fu_409_p0;
wire  signed [31:0] mul_ln700_18_fu_425_p0;
wire  signed [31:0] mul_ln700_19_fu_441_p0;
wire  signed [31:0] mul_ln700_20_fu_457_p0;
wire  signed [31:0] mul_ln700_21_fu_473_p0;
wire  signed [31:0] mul_ln700_22_fu_489_p0;
wire  signed [31:0] mul_ln700_23_fu_505_p0;
wire  signed [31:0] mul_ln700_24_fu_521_p0;
wire  signed [31:0] mul_ln700_25_fu_537_p0;
wire  signed [31:0] mul_ln700_26_fu_553_p0;
wire  signed [31:0] mul_ln700_27_fu_569_p0;
wire  signed [31:0] mul_ln700_28_fu_585_p0;
wire  signed [15:0] sext_ln180_fu_595_p0;
wire   [31:0] add_ln700_fu_628_p2;
wire   [31:0] add_ln700_1_fu_632_p2;
wire   [31:0] add_ln700_7_fu_650_p2;
wire   [31:0] add_ln700_8_fu_654_p2;
wire   [31:0] add_ln700_10_fu_664_p2;
wire   [31:0] add_ln700_11_fu_668_p2;
wire   [31:0] add_ln700_15_fu_678_p2;
wire   [31:0] add_ln700_16_fu_682_p2;
wire   [31:0] add_ln700_22_fu_700_p2;
wire   [31:0] add_ln700_23_fu_704_p2;
wire  signed [31:0] mul_ln700_29_fu_775_p2;
wire   [31:0] add_ln700_5_fu_718_p2;
wire   [31:0] add_ln700_6_fu_722_p2;
wire   [31:0] add_ln700_13_fu_727_p2;
wire   [31:0] add_ln700_20_fu_737_p2;
wire  signed [31:0] sext_ln700_1_fu_746_p1;
wire   [31:0] add_ln700_27_fu_749_p2;
wire   [31:0] add_ln700_29_fu_759_p2;
wire  signed [9:0] mul_ln700_31_fu_769_p1;
wire  signed [15:0] mul_ln700_29_fu_775_p0;
wire  signed [10:0] mul_ln700_29_fu_775_p1;
wire  signed [9:0] grp_fu_781_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 shift_reg_V_1_30 = 32'd0;
#0 shift_reg_V_1_29 = 32'd0;
#0 shift_reg_V_1_28 = 32'd0;
#0 shift_reg_V_1_27 = 32'd0;
#0 shift_reg_V_1_26 = 32'd0;
#0 shift_reg_V_1_25 = 32'd0;
#0 shift_reg_V_1_24 = 32'd0;
#0 shift_reg_V_1_23 = 32'd0;
#0 shift_reg_V_1_22 = 32'd0;
#0 shift_reg_V_1_21 = 32'd0;
#0 shift_reg_V_1_20 = 32'd0;
#0 shift_reg_V_1_19 = 32'd0;
#0 shift_reg_V_1_18 = 32'd0;
#0 shift_reg_V_1_17 = 32'd0;
#0 shift_reg_V_1_16 = 32'd0;
#0 shift_reg_V_1_15 = 32'd0;
#0 shift_reg_V_1_14 = 32'd0;
#0 shift_reg_V_1_13 = 32'd0;
#0 shift_reg_V_1_12 = 32'd0;
#0 shift_reg_V_1_11 = 32'd0;
#0 shift_reg_V_1_10 = 32'd0;
#0 shift_reg_V_1_9 = 32'd0;
#0 shift_reg_V_1_8 = 32'd0;
#0 shift_reg_V_1_7 = 32'd0;
#0 shift_reg_V_1_6 = 32'd0;
#0 shift_reg_V_1_5 = 32'd0;
#0 shift_reg_V_1_4 = 32'd0;
#0 shift_reg_V_1_3 = 32'd0;
#0 shift_reg_V_1_2 = 32'd0;
#0 shift_reg_V_1_1 = 16'd0;
#0 shift_reg_V_1_0 = 16'd0;
end

d_conv_mul_mul_16bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .dout_WIDTH( 26 ))
d_conv_mul_mul_16bkb_U14(
    .din0(extLd4_loc_channel),
    .din1(mul_ln700_31_fu_769_p1),
    .dout(mul_ln700_31_fu_769_p2)
);

d_conv_mul_mul_16cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 32 ))
d_conv_mul_mul_16cud_U15(
    .din0(mul_ln700_29_fu_775_p0),
    .din1(mul_ln700_29_fu_775_p1),
    .dout(mul_ln700_29_fu_775_p2)
);

d_conv_mac_muladddEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 10 ),
    .din2_WIDTH( 26 ),
    .dout_WIDTH( 26 ))
d_conv_mac_muladddEe_U16(
    .din0(shift_reg_V_1_0_load_reg_938),
    .din1(grp_fu_781_p1),
    .din2(mul_ln700_31_reg_943),
    .dout(grp_fu_781_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln700_12_reg_968 <= add_ln700_12_fu_672_p2;
        add_ln700_17_reg_973 <= add_ln700_17_fu_686_p2;
        add_ln700_18_reg_978 <= add_ln700_18_fu_692_p2;
        add_ln700_19_reg_983[31 : 1] <= add_ln700_19_fu_696_p2[31 : 1];
        add_ln700_24_reg_988 <= add_ln700_24_fu_708_p2;
        add_ln700_25_reg_993 <= add_ln700_25_fu_714_p2;
        add_ln700_2_reg_948 <= add_ln700_2_fu_636_p2;
        add_ln700_3_reg_953 <= add_ln700_3_fu_642_p2;
        add_ln700_4_reg_958 <= add_ln700_4_fu_646_p2;
        add_ln700_9_reg_963 <= add_ln700_9_fu_658_p2;
        mul_ln700_10_reg_838 <= mul_ln700_10_fu_297_p2;
        mul_ln700_11_reg_843[31 : 2] <= mul_ln700_11_fu_313_p2[31 : 2];
        mul_ln700_12_reg_848 <= mul_ln700_12_fu_329_p2;
        mul_ln700_13_reg_853 <= mul_ln700_13_fu_345_p2;
        mul_ln700_14_reg_858 <= mul_ln700_14_fu_361_p2;
        mul_ln700_15_reg_863 <= mul_ln700_15_fu_377_p2;
        mul_ln700_16_reg_868 <= mul_ln700_16_fu_393_p2;
        mul_ln700_17_reg_873 <= mul_ln700_17_fu_409_p2;
        mul_ln700_18_reg_878 <= mul_ln700_18_fu_425_p2;
        mul_ln700_19_reg_883 <= mul_ln700_19_fu_441_p2;
        mul_ln700_1_reg_793 <= mul_ln700_1_fu_153_p2;
        mul_ln700_20_reg_888[31 : 2] <= mul_ln700_20_fu_457_p2[31 : 2];
        mul_ln700_21_reg_893 <= mul_ln700_21_fu_473_p2;
        mul_ln700_22_reg_898[31 : 2] <= mul_ln700_22_fu_489_p2[31 : 2];
        mul_ln700_23_reg_903[31 : 1] <= mul_ln700_23_fu_505_p2[31 : 1];
        mul_ln700_24_reg_908[31 : 2] <= mul_ln700_24_fu_521_p2[31 : 2];
        mul_ln700_25_reg_913 <= mul_ln700_25_fu_537_p2;
        mul_ln700_26_reg_918 <= mul_ln700_26_fu_553_p2;
        mul_ln700_27_reg_923 <= mul_ln700_27_fu_569_p2;
        mul_ln700_28_reg_928[31 : 1] <= mul_ln700_28_fu_585_p2[31 : 1];
        mul_ln700_2_reg_798 <= mul_ln700_2_fu_169_p2;
        mul_ln700_31_reg_943 <= mul_ln700_31_fu_769_p2;
        mul_ln700_3_reg_803[31 : 1] <= mul_ln700_3_fu_185_p2[31 : 1];
        mul_ln700_4_reg_808 <= mul_ln700_4_fu_201_p2;
        mul_ln700_5_reg_813 <= mul_ln700_5_fu_217_p2;
        mul_ln700_6_reg_818 <= mul_ln700_6_fu_233_p2;
        mul_ln700_7_reg_823[31 : 2] <= mul_ln700_7_fu_249_p2[31 : 2];
        mul_ln700_8_reg_828[31 : 1] <= mul_ln700_8_fu_265_p2[31 : 1];
        mul_ln700_9_reg_833[31 : 2] <= mul_ln700_9_fu_281_p2[31 : 2];
        mul_ln700_reg_788 <= mul_ln700_fu_137_p2;
        sext_ln180_reg_933 <= sext_ln180_fu_595_p1;
        shift_reg_V_1_0_load_reg_938 <= shift_reg_V_1_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln700_14_reg_1003 <= add_ln700_14_fu_731_p2;
        add_ln700_21_reg_1008 <= add_ln700_21_fu_741_p2;
        add_ln700_28_reg_1013 <= add_ln700_28_fu_754_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln700_26_reg_998 <= grp_fu_781_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        shift_reg_V_1_0 <= extLd4_loc_channel;
        shift_reg_V_1_1 <= shift_reg_V_1_0;
        shift_reg_V_1_10 <= shift_reg_V_1_9;
        shift_reg_V_1_11 <= shift_reg_V_1_10;
        shift_reg_V_1_12 <= shift_reg_V_1_11;
        shift_reg_V_1_13 <= shift_reg_V_1_12;
        shift_reg_V_1_14 <= shift_reg_V_1_13;
        shift_reg_V_1_15 <= shift_reg_V_1_14;
        shift_reg_V_1_16 <= shift_reg_V_1_15;
        shift_reg_V_1_17 <= shift_reg_V_1_16;
        shift_reg_V_1_18 <= shift_reg_V_1_17;
        shift_reg_V_1_19 <= shift_reg_V_1_18;
        shift_reg_V_1_2 <= sext_ln180_fu_595_p1;
        shift_reg_V_1_20 <= shift_reg_V_1_19;
        shift_reg_V_1_21 <= shift_reg_V_1_20;
        shift_reg_V_1_22 <= shift_reg_V_1_21;
        shift_reg_V_1_23 <= shift_reg_V_1_22;
        shift_reg_V_1_24 <= shift_reg_V_1_23;
        shift_reg_V_1_25 <= shift_reg_V_1_24;
        shift_reg_V_1_26 <= shift_reg_V_1_25;
        shift_reg_V_1_27 <= shift_reg_V_1_26;
        shift_reg_V_1_28 <= shift_reg_V_1_27;
        shift_reg_V_1_29 <= shift_reg_V_1_28;
        shift_reg_V_1_3 <= shift_reg_V_1_2;
        shift_reg_V_1_30 <= shift_reg_V_1_29;
        shift_reg_V_1_4 <= shift_reg_V_1_3;
        shift_reg_V_1_5 <= shift_reg_V_1_4;
        shift_reg_V_1_6 <= shift_reg_V_1_5;
        shift_reg_V_1_7 <= shift_reg_V_1_6;
        shift_reg_V_1_8 <= shift_reg_V_1_7;
        shift_reg_V_1_9 <= shift_reg_V_1_8;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        y_V_ap_vld = 1'b1;
    end else begin
        y_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_10_fu_664_p2 = (mul_ln700_13_reg_853 + mul_ln700_12_reg_848);

assign add_ln700_11_fu_668_p2 = (mul_ln700_15_reg_863 + mul_ln700_14_reg_858);

assign add_ln700_12_fu_672_p2 = (add_ln700_10_fu_664_p2 + add_ln700_11_fu_668_p2);

assign add_ln700_13_fu_727_p2 = (add_ln700_9_reg_963 + add_ln700_12_reg_968);

assign add_ln700_14_fu_731_p2 = (add_ln700_6_fu_722_p2 + add_ln700_13_fu_727_p2);

assign add_ln700_15_fu_678_p2 = (mul_ln700_17_reg_873 + mul_ln700_16_reg_868);

assign add_ln700_16_fu_682_p2 = (mul_ln700_19_reg_883 + mul_ln700_18_reg_878);

assign add_ln700_17_fu_686_p2 = (add_ln700_15_fu_678_p2 + add_ln700_16_fu_682_p2);

assign add_ln700_18_fu_692_p2 = (mul_ln700_21_reg_893 + mul_ln700_20_reg_888);

assign add_ln700_19_fu_696_p2 = (mul_ln700_23_reg_903 + mul_ln700_22_reg_898);

assign add_ln700_1_fu_632_p2 = (mul_ln700_3_reg_803 + mul_ln700_2_reg_798);

assign add_ln700_20_fu_737_p2 = (add_ln700_18_reg_978 + add_ln700_19_reg_983);

assign add_ln700_21_fu_741_p2 = (add_ln700_17_reg_973 + add_ln700_20_fu_737_p2);

assign add_ln700_22_fu_700_p2 = (mul_ln700_25_reg_913 + mul_ln700_24_reg_908);

assign add_ln700_23_fu_704_p2 = (mul_ln700_27_reg_923 + mul_ln700_26_reg_918);

assign add_ln700_24_fu_708_p2 = (add_ln700_22_fu_700_p2 + add_ln700_23_fu_704_p2);

assign add_ln700_25_fu_714_p2 = ($signed(mul_ln700_29_fu_775_p2) + $signed(mul_ln700_28_reg_928));

assign add_ln700_27_fu_749_p2 = ($signed(add_ln700_25_reg_993) + $signed(sext_ln700_1_fu_746_p1));

assign add_ln700_28_fu_754_p2 = (add_ln700_24_reg_988 + add_ln700_27_fu_749_p2);

assign add_ln700_29_fu_759_p2 = (add_ln700_21_reg_1008 + add_ln700_28_reg_1013);

assign add_ln700_2_fu_636_p2 = (add_ln700_fu_628_p2 + add_ln700_1_fu_632_p2);

assign add_ln700_3_fu_642_p2 = (mul_ln700_5_reg_813 + mul_ln700_4_reg_808);

assign add_ln700_4_fu_646_p2 = (mul_ln700_7_reg_823 + mul_ln700_6_reg_818);

assign add_ln700_5_fu_718_p2 = (add_ln700_3_reg_953 + add_ln700_4_reg_958);

assign add_ln700_6_fu_722_p2 = (add_ln700_2_reg_948 + add_ln700_5_fu_718_p2);

assign add_ln700_7_fu_650_p2 = (mul_ln700_9_reg_833 + mul_ln700_8_reg_828);

assign add_ln700_8_fu_654_p2 = (mul_ln700_11_reg_843 + mul_ln700_10_reg_838);

assign add_ln700_9_fu_658_p2 = (add_ln700_7_fu_650_p2 + add_ln700_8_fu_654_p2);

assign add_ln700_fu_628_p2 = (mul_ln700_1_reg_793 + mul_ln700_reg_788);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign grp_fu_781_p1 = 26'd67108447;

assign mul_ln700_10_fu_297_p0 = shift_reg_V_1_20;

assign mul_ln700_10_fu_297_p2 = ($signed(mul_ln700_10_fu_297_p0) * $signed('hC83));

assign mul_ln700_11_fu_313_p0 = shift_reg_V_1_19;

assign mul_ln700_11_fu_313_p2 = ($signed(mul_ln700_11_fu_313_p0) * $signed('h104C));

assign mul_ln700_12_fu_329_p0 = shift_reg_V_1_18;

assign mul_ln700_12_fu_329_p2 = ($signed(mul_ln700_12_fu_329_p0) * $signed('h13D7));

assign mul_ln700_13_fu_345_p0 = shift_reg_V_1_17;

assign mul_ln700_13_fu_345_p2 = ($signed(mul_ln700_13_fu_345_p0) * $signed('h16D5));

assign mul_ln700_14_fu_361_p0 = shift_reg_V_1_16;

assign mul_ln700_14_fu_361_p2 = ($signed(mul_ln700_14_fu_361_p0) * $signed('h1901));

assign mul_ln700_15_fu_377_p0 = shift_reg_V_1_15;

assign mul_ln700_15_fu_377_p2 = ($signed(mul_ln700_15_fu_377_p0) * $signed('h1A25));

assign mul_ln700_16_fu_393_p0 = shift_reg_V_1_14;

assign mul_ln700_16_fu_393_p2 = ($signed(mul_ln700_16_fu_393_p0) * $signed('h1A25));

assign mul_ln700_17_fu_409_p0 = shift_reg_V_1_13;

assign mul_ln700_17_fu_409_p2 = ($signed(mul_ln700_17_fu_409_p0) * $signed('h1901));

assign mul_ln700_18_fu_425_p0 = shift_reg_V_1_12;

assign mul_ln700_18_fu_425_p2 = ($signed(mul_ln700_18_fu_425_p0) * $signed('h16D5));

assign mul_ln700_19_fu_441_p0 = shift_reg_V_1_11;

assign mul_ln700_19_fu_441_p2 = ($signed(mul_ln700_19_fu_441_p0) * $signed('h13D7));

assign mul_ln700_1_fu_153_p0 = shift_reg_V_1_29;

assign mul_ln700_1_fu_153_p2 = ($signed(mul_ln700_1_fu_153_p0) * $signed(-'h1A1));

assign mul_ln700_20_fu_457_p0 = shift_reg_V_1_10;

assign mul_ln700_20_fu_457_p2 = ($signed(mul_ln700_20_fu_457_p0) * $signed('h104C));

assign mul_ln700_21_fu_473_p0 = shift_reg_V_1_9;

assign mul_ln700_21_fu_473_p2 = ($signed(mul_ln700_21_fu_473_p0) * $signed('hC83));

assign mul_ln700_22_fu_489_p0 = shift_reg_V_1_8;

assign mul_ln700_22_fu_489_p2 = ($signed(mul_ln700_22_fu_489_p0) * $signed('h8CC));

assign mul_ln700_23_fu_505_p0 = shift_reg_V_1_7;

assign mul_ln700_23_fu_505_p2 = ($signed(mul_ln700_23_fu_505_p0) * $signed('h56A));

assign mul_ln700_24_fu_521_p0 = shift_reg_V_1_6;

assign mul_ln700_24_fu_521_p2 = ($signed(mul_ln700_24_fu_521_p0) * $signed('h294));

assign mul_ln700_25_fu_537_p0 = shift_reg_V_1_5;

assign mul_ln700_25_fu_537_p2 = ($signed(mul_ln700_25_fu_537_p0) * $signed('h67));

assign mul_ln700_26_fu_553_p0 = shift_reg_V_1_4;

assign mul_ln700_26_fu_553_p2 = ($signed(mul_ln700_26_fu_553_p0) * $signed(-'h113));

assign mul_ln700_27_fu_569_p0 = shift_reg_V_1_3;

assign mul_ln700_27_fu_569_p2 = ($signed(mul_ln700_27_fu_569_p0) * $signed(-'h1E5));

assign mul_ln700_28_fu_585_p0 = shift_reg_V_1_2;

assign mul_ln700_28_fu_585_p2 = ($signed(mul_ln700_28_fu_585_p0) * $signed(-'h22A));

assign mul_ln700_29_fu_775_p0 = sext_ln180_reg_933;

assign mul_ln700_29_fu_775_p1 = 32'd4294966777;

assign mul_ln700_2_fu_169_p0 = shift_reg_V_1_28;

assign mul_ln700_2_fu_169_p2 = ($signed(mul_ln700_2_fu_169_p0) * $signed(-'h207));

assign mul_ln700_31_fu_769_p1 = 26'd67108391;

assign mul_ln700_3_fu_185_p0 = shift_reg_V_1_27;

assign mul_ln700_3_fu_185_p2 = ($signed(mul_ln700_3_fu_185_p0) * $signed(-'h22A));

assign mul_ln700_4_fu_201_p0 = shift_reg_V_1_26;

assign mul_ln700_4_fu_201_p2 = ($signed(mul_ln700_4_fu_201_p0) * $signed(-'h1E5));

assign mul_ln700_5_fu_217_p0 = shift_reg_V_1_25;

assign mul_ln700_5_fu_217_p2 = ($signed(mul_ln700_5_fu_217_p0) * $signed(-'h113));

assign mul_ln700_6_fu_233_p0 = shift_reg_V_1_24;

assign mul_ln700_6_fu_233_p2 = ($signed(mul_ln700_6_fu_233_p0) * $signed('h67));

assign mul_ln700_7_fu_249_p0 = shift_reg_V_1_23;

assign mul_ln700_7_fu_249_p2 = ($signed(mul_ln700_7_fu_249_p0) * $signed('h294));

assign mul_ln700_8_fu_265_p0 = shift_reg_V_1_22;

assign mul_ln700_8_fu_265_p2 = ($signed(mul_ln700_8_fu_265_p0) * $signed('h56A));

assign mul_ln700_9_fu_281_p0 = shift_reg_V_1_21;

assign mul_ln700_9_fu_281_p2 = ($signed(mul_ln700_9_fu_281_p0) * $signed('h8CC));

assign mul_ln700_fu_137_p0 = shift_reg_V_1_30;

assign mul_ln700_fu_137_p2 = ($signed(mul_ln700_fu_137_p0) * $signed(-'h1D9));

assign sext_ln180_fu_595_p0 = shift_reg_V_1_1;

assign sext_ln180_fu_595_p1 = sext_ln180_fu_595_p0;

assign sext_ln700_1_fu_746_p1 = add_ln700_26_reg_998;

assign y_V = (add_ln700_14_reg_1003 + add_ln700_29_fu_759_p2);

always @ (posedge ap_clk) begin
    mul_ln700_3_reg_803[0] <= 1'b0;
    mul_ln700_7_reg_823[1:0] <= 2'b00;
    mul_ln700_8_reg_828[0] <= 1'b0;
    mul_ln700_9_reg_833[1:0] <= 2'b00;
    mul_ln700_11_reg_843[1:0] <= 2'b00;
    mul_ln700_20_reg_888[1:0] <= 2'b00;
    mul_ln700_22_reg_898[1:0] <= 2'b00;
    mul_ln700_23_reg_903[0] <= 1'b0;
    mul_ln700_24_reg_908[1:0] <= 2'b00;
    mul_ln700_28_reg_928[0] <= 1'b0;
    add_ln700_19_reg_983[0] <= 1'b0;
end

endmodule //fir_filter_b
