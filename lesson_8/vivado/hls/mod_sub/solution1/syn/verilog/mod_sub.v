// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="mod_sub,hls_ip_2019_1_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045-ffg900-2,HLS_INPUT_CLOCK=100.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=12.347000,HLS_SYN_LAT=2,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=8,HLS_SYN_FF=204,HLS_SYN_LUT=780,HLS_VERSION=2019_1_2}" *)

module mod_sub (
        ix_V,
        qx_V,
        i_mod_V,
        q_mod_V,
        iy_V,
        qy_V,
        period_V,
        mux_V,
        ap_clk,
        ap_rst,
        ix_V_ap_vld,
        qx_V_ap_vld,
        i_mod_V_ap_vld,
        q_mod_V_ap_vld,
        period_V_ap_vld,
        mux_V_ap_vld,
        iy_V_ap_vld,
        qy_V_ap_vld
);


input  [31:0] ix_V;
input  [31:0] qx_V;
input  [7:0] i_mod_V;
input  [7:0] q_mod_V;
output  [31:0] iy_V;
output  [31:0] qy_V;
input  [7:0] period_V;
input  [1:0] mux_V;
input   ap_clk;
input   ap_rst;
input   ix_V_ap_vld;
input   qx_V_ap_vld;
input   i_mod_V_ap_vld;
input   q_mod_V_ap_vld;
input   period_V_ap_vld;
input   mux_V_ap_vld;
output   iy_V_ap_vld;
output   qy_V_ap_vld;

wire    mod_sub_entry23_U0_ap_start;
wire    mod_sub_entry23_U0_start_full_n;
wire    mod_sub_entry23_U0_ap_done;
wire    mod_sub_entry23_U0_ap_continue;
wire    mod_sub_entry23_U0_ap_idle;
wire    mod_sub_entry23_U0_ap_ready;
wire    mod_sub_entry23_U0_start_out;
wire    mod_sub_entry23_U0_start_write;
wire   [31:0] mod_sub_entry23_U0_ix_V_out_din;
wire    mod_sub_entry23_U0_ix_V_out_write;
wire   [31:0] mod_sub_entry23_U0_qx_V_out_din;
wire    mod_sub_entry23_U0_qx_V_out_write;
wire   [7:0] mod_sub_entry23_U0_i_mod_V_out_din;
wire    mod_sub_entry23_U0_i_mod_V_out_write;
wire   [7:0] mod_sub_entry23_U0_q_mod_V_out_din;
wire    mod_sub_entry23_U0_q_mod_V_out_write;
wire   [7:0] mod_sub_entry23_U0_period_V_out_din;
wire    mod_sub_entry23_U0_period_V_out_write;
wire   [1:0] mod_sub_entry23_U0_mux_V_out_din;
wire    mod_sub_entry23_U0_mux_V_out_write;
wire    freqm_U0_ap_start;
wire    freqm_U0_ap_done;
wire    freqm_U0_ap_continue;
wire    freqm_U0_ap_idle;
wire    freqm_U0_ap_ready;
wire    freqm_U0_ix_V_read;
wire    freqm_U0_qx_V_read;
wire    freqm_U0_i_mod_V_read;
wire    freqm_U0_q_mod_V_read;
wire   [31:0] freqm_U0_ix_V_out_din;
wire    freqm_U0_ix_V_out_write;
wire   [31:0] freqm_U0_qx_V_out_din;
wire    freqm_U0_qx_V_out_write;
wire   [31:0] freqm_U0_ap_return_0;
wire   [31:0] freqm_U0_ap_return_1;
wire    ap_channel_done_q_fr_V;
wire    q_fr_V_full_n;
reg    ap_sync_reg_channel_write_q_fr_V;
wire    ap_sync_channel_write_q_fr_V;
wire    ap_channel_done_i_fr_V;
wire    i_fr_V_full_n;
reg    ap_sync_reg_channel_write_i_fr_V;
wire    ap_sync_channel_write_i_fr_V;
wire    phasm_U0_ap_start;
wire    phasm_U0_ap_done;
wire    phasm_U0_ap_continue;
wire    phasm_U0_ap_idle;
wire    phasm_U0_ap_ready;
wire    phasm_U0_period_V_read;
wire   [0:0] phasm_U0_ap_return;
wire    ap_channel_done_flag;
wire    flag_full_n;
wire    o_mux_U0_ap_start;
wire    o_mux_U0_ap_done;
wire    o_mux_U0_ap_continue;
wire    o_mux_U0_ap_idle;
wire    o_mux_U0_ap_ready;
wire    o_mux_U0_ix_V_read;
wire    o_mux_U0_qx_V_read;
wire   [31:0] o_mux_U0_iy_V;
wire    o_mux_U0_iy_V_ap_vld;
wire   [31:0] o_mux_U0_qy_V;
wire    o_mux_U0_qy_V_ap_vld;
wire    o_mux_U0_flag;
wire    o_mux_U0_mux_V_read;
wire    ap_sync_continue;
wire    ix_V_c_full_n;
wire   [31:0] ix_V_c_dout;
wire    ix_V_c_empty_n;
wire    qx_V_c_full_n;
wire   [31:0] qx_V_c_dout;
wire    qx_V_c_empty_n;
wire    i_mod_V_c_full_n;
wire   [7:0] i_mod_V_c_dout;
wire    i_mod_V_c_empty_n;
wire    q_mod_V_c_full_n;
wire   [7:0] q_mod_V_c_dout;
wire    q_mod_V_c_empty_n;
wire    period_V_c_full_n;
wire   [7:0] period_V_c_dout;
wire    period_V_c_empty_n;
wire    mux_V_c_full_n;
wire   [1:0] mux_V_c_dout;
wire    mux_V_c_empty_n;
wire    ix_V_c2_full_n;
wire   [31:0] ix_V_c2_dout;
wire    ix_V_c2_empty_n;
wire    qx_V_c3_full_n;
wire   [31:0] qx_V_c3_dout;
wire    qx_V_c3_empty_n;
wire   [31:0] i_fr_V_dout;
wire    i_fr_V_empty_n;
wire   [31:0] q_fr_V_dout;
wire    q_fr_V_empty_n;
wire   [0:0] flag_dout;
wire    flag_empty_n;
wire   [0:0] start_for_freqm_U0_din;
wire    start_for_freqm_U0_full_n;
wire   [0:0] start_for_freqm_U0_dout;
wire    start_for_freqm_U0_empty_n;
wire   [0:0] start_for_phasm_U0_din;
wire    start_for_phasm_U0_full_n;
wire   [0:0] start_for_phasm_U0_dout;
wire    start_for_phasm_U0_empty_n;
wire    freqm_U0_start_full_n;
wire    freqm_U0_start_write;
wire    phasm_U0_start_full_n;
wire    phasm_U0_start_write;
wire    o_mux_U0_start_full_n;
wire    o_mux_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_q_fr_V = 1'b0;
#0 ap_sync_reg_channel_write_i_fr_V = 1'b0;
end

mod_sub_entry23 mod_sub_entry23_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(mod_sub_entry23_U0_ap_start),
    .start_full_n(mod_sub_entry23_U0_start_full_n),
    .ap_done(mod_sub_entry23_U0_ap_done),
    .ap_continue(mod_sub_entry23_U0_ap_continue),
    .ap_idle(mod_sub_entry23_U0_ap_idle),
    .ap_ready(mod_sub_entry23_U0_ap_ready),
    .start_out(mod_sub_entry23_U0_start_out),
    .start_write(mod_sub_entry23_U0_start_write),
    .ix_V(ix_V),
    .ix_V_ap_vld(ix_V_ap_vld),
    .qx_V(qx_V),
    .qx_V_ap_vld(qx_V_ap_vld),
    .i_mod_V(i_mod_V),
    .i_mod_V_ap_vld(i_mod_V_ap_vld),
    .q_mod_V(q_mod_V),
    .q_mod_V_ap_vld(q_mod_V_ap_vld),
    .period_V(period_V),
    .period_V_ap_vld(period_V_ap_vld),
    .mux_V(mux_V),
    .mux_V_ap_vld(mux_V_ap_vld),
    .ix_V_out_din(mod_sub_entry23_U0_ix_V_out_din),
    .ix_V_out_full_n(ix_V_c_full_n),
    .ix_V_out_write(mod_sub_entry23_U0_ix_V_out_write),
    .qx_V_out_din(mod_sub_entry23_U0_qx_V_out_din),
    .qx_V_out_full_n(qx_V_c_full_n),
    .qx_V_out_write(mod_sub_entry23_U0_qx_V_out_write),
    .i_mod_V_out_din(mod_sub_entry23_U0_i_mod_V_out_din),
    .i_mod_V_out_full_n(i_mod_V_c_full_n),
    .i_mod_V_out_write(mod_sub_entry23_U0_i_mod_V_out_write),
    .q_mod_V_out_din(mod_sub_entry23_U0_q_mod_V_out_din),
    .q_mod_V_out_full_n(q_mod_V_c_full_n),
    .q_mod_V_out_write(mod_sub_entry23_U0_q_mod_V_out_write),
    .period_V_out_din(mod_sub_entry23_U0_period_V_out_din),
    .period_V_out_full_n(period_V_c_full_n),
    .period_V_out_write(mod_sub_entry23_U0_period_V_out_write),
    .mux_V_out_din(mod_sub_entry23_U0_mux_V_out_din),
    .mux_V_out_full_n(mux_V_c_full_n),
    .mux_V_out_write(mod_sub_entry23_U0_mux_V_out_write)
);

freqm freqm_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(freqm_U0_ap_start),
    .ap_done(freqm_U0_ap_done),
    .ap_continue(freqm_U0_ap_continue),
    .ap_idle(freqm_U0_ap_idle),
    .ap_ready(freqm_U0_ap_ready),
    .ix_V_dout(ix_V_c_dout),
    .ix_V_empty_n(ix_V_c_empty_n),
    .ix_V_read(freqm_U0_ix_V_read),
    .qx_V_dout(qx_V_c_dout),
    .qx_V_empty_n(qx_V_c_empty_n),
    .qx_V_read(freqm_U0_qx_V_read),
    .i_mod_V_dout(i_mod_V_c_dout),
    .i_mod_V_empty_n(i_mod_V_c_empty_n),
    .i_mod_V_read(freqm_U0_i_mod_V_read),
    .q_mod_V_dout(q_mod_V_c_dout),
    .q_mod_V_empty_n(q_mod_V_c_empty_n),
    .q_mod_V_read(freqm_U0_q_mod_V_read),
    .ix_V_out_din(freqm_U0_ix_V_out_din),
    .ix_V_out_full_n(ix_V_c2_full_n),
    .ix_V_out_write(freqm_U0_ix_V_out_write),
    .qx_V_out_din(freqm_U0_qx_V_out_din),
    .qx_V_out_full_n(qx_V_c3_full_n),
    .qx_V_out_write(freqm_U0_qx_V_out_write),
    .ap_return_0(freqm_U0_ap_return_0),
    .ap_return_1(freqm_U0_ap_return_1)
);

phasm phasm_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(phasm_U0_ap_start),
    .ap_done(phasm_U0_ap_done),
    .ap_continue(phasm_U0_ap_continue),
    .ap_idle(phasm_U0_ap_idle),
    .ap_ready(phasm_U0_ap_ready),
    .period_V_dout(period_V_c_dout),
    .period_V_empty_n(period_V_c_empty_n),
    .period_V_read(phasm_U0_period_V_read),
    .ap_return(phasm_U0_ap_return)
);

o_mux o_mux_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(o_mux_U0_ap_start),
    .ap_done(o_mux_U0_ap_done),
    .ap_continue(o_mux_U0_ap_continue),
    .ap_idle(o_mux_U0_ap_idle),
    .ap_ready(o_mux_U0_ap_ready),
    .ix_V_dout(ix_V_c2_dout),
    .ix_V_empty_n(ix_V_c2_empty_n),
    .ix_V_read(o_mux_U0_ix_V_read),
    .qx_V_dout(qx_V_c3_dout),
    .qx_V_empty_n(qx_V_c3_empty_n),
    .qx_V_read(o_mux_U0_qx_V_read),
    .p_read(i_fr_V_dout),
    .p_read1(q_fr_V_dout),
    .iy_V(o_mux_U0_iy_V),
    .iy_V_ap_vld(o_mux_U0_iy_V_ap_vld),
    .qy_V(o_mux_U0_qy_V),
    .qy_V_ap_vld(o_mux_U0_qy_V_ap_vld),
    .flag(o_mux_U0_flag),
    .mux_V_dout(mux_V_c_dout),
    .mux_V_empty_n(mux_V_c_empty_n),
    .mux_V_read(o_mux_U0_mux_V_read)
);

fifo_w32_d2_A ix_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mod_sub_entry23_U0_ix_V_out_din),
    .if_full_n(ix_V_c_full_n),
    .if_write(mod_sub_entry23_U0_ix_V_out_write),
    .if_dout(ix_V_c_dout),
    .if_empty_n(ix_V_c_empty_n),
    .if_read(freqm_U0_ix_V_read)
);

fifo_w32_d2_A qx_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mod_sub_entry23_U0_qx_V_out_din),
    .if_full_n(qx_V_c_full_n),
    .if_write(mod_sub_entry23_U0_qx_V_out_write),
    .if_dout(qx_V_c_dout),
    .if_empty_n(qx_V_c_empty_n),
    .if_read(freqm_U0_qx_V_read)
);

fifo_w8_d2_A i_mod_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mod_sub_entry23_U0_i_mod_V_out_din),
    .if_full_n(i_mod_V_c_full_n),
    .if_write(mod_sub_entry23_U0_i_mod_V_out_write),
    .if_dout(i_mod_V_c_dout),
    .if_empty_n(i_mod_V_c_empty_n),
    .if_read(freqm_U0_i_mod_V_read)
);

fifo_w8_d2_A q_mod_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mod_sub_entry23_U0_q_mod_V_out_din),
    .if_full_n(q_mod_V_c_full_n),
    .if_write(mod_sub_entry23_U0_q_mod_V_out_write),
    .if_dout(q_mod_V_c_dout),
    .if_empty_n(q_mod_V_c_empty_n),
    .if_read(freqm_U0_q_mod_V_read)
);

fifo_w8_d2_A period_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mod_sub_entry23_U0_period_V_out_din),
    .if_full_n(period_V_c_full_n),
    .if_write(mod_sub_entry23_U0_period_V_out_write),
    .if_dout(period_V_c_dout),
    .if_empty_n(period_V_c_empty_n),
    .if_read(phasm_U0_period_V_read)
);

fifo_w2_d3_A mux_V_c_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(mod_sub_entry23_U0_mux_V_out_din),
    .if_full_n(mux_V_c_full_n),
    .if_write(mod_sub_entry23_U0_mux_V_out_write),
    .if_dout(mux_V_c_dout),
    .if_empty_n(mux_V_c_empty_n),
    .if_read(o_mux_U0_mux_V_read)
);

fifo_w32_d2_A ix_V_c2_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(freqm_U0_ix_V_out_din),
    .if_full_n(ix_V_c2_full_n),
    .if_write(freqm_U0_ix_V_out_write),
    .if_dout(ix_V_c2_dout),
    .if_empty_n(ix_V_c2_empty_n),
    .if_read(o_mux_U0_ix_V_read)
);

fifo_w32_d2_A qx_V_c3_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(freqm_U0_qx_V_out_din),
    .if_full_n(qx_V_c3_full_n),
    .if_write(freqm_U0_qx_V_out_write),
    .if_dout(qx_V_c3_dout),
    .if_empty_n(qx_V_c3_empty_n),
    .if_read(o_mux_U0_qx_V_read)
);

fifo_w32_d2_A i_fr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(freqm_U0_ap_return_0),
    .if_full_n(i_fr_V_full_n),
    .if_write(ap_channel_done_i_fr_V),
    .if_dout(i_fr_V_dout),
    .if_empty_n(i_fr_V_empty_n),
    .if_read(o_mux_U0_ap_ready)
);

fifo_w32_d2_A q_fr_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(freqm_U0_ap_return_1),
    .if_full_n(q_fr_V_full_n),
    .if_write(ap_channel_done_q_fr_V),
    .if_dout(q_fr_V_dout),
    .if_empty_n(q_fr_V_empty_n),
    .if_read(o_mux_U0_ap_ready)
);

fifo_w1_d2_A flag_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(phasm_U0_ap_return),
    .if_full_n(flag_full_n),
    .if_write(phasm_U0_ap_done),
    .if_dout(flag_dout),
    .if_empty_n(flag_empty_n),
    .if_read(o_mux_U0_ap_ready)
);

start_for_freqm_U0 start_for_freqm_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_freqm_U0_din),
    .if_full_n(start_for_freqm_U0_full_n),
    .if_write(mod_sub_entry23_U0_start_write),
    .if_dout(start_for_freqm_U0_dout),
    .if_empty_n(start_for_freqm_U0_empty_n),
    .if_read(freqm_U0_ap_ready)
);

start_for_phasm_U0 start_for_phasm_U0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(start_for_phasm_U0_din),
    .if_full_n(start_for_phasm_U0_full_n),
    .if_write(mod_sub_entry23_U0_start_write),
    .if_dout(start_for_phasm_U0_dout),
    .if_empty_n(start_for_phasm_U0_empty_n),
    .if_read(phasm_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_i_fr_V <= 1'b0;
    end else begin
        if (((freqm_U0_ap_done & freqm_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_i_fr_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_i_fr_V <= ap_sync_channel_write_i_fr_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_q_fr_V <= 1'b0;
    end else begin
        if (((freqm_U0_ap_done & freqm_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_q_fr_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_q_fr_V <= ap_sync_channel_write_q_fr_V;
        end
    end
end

assign ap_channel_done_flag = phasm_U0_ap_done;

assign ap_channel_done_i_fr_V = (freqm_U0_ap_done & (ap_sync_reg_channel_write_i_fr_V ^ 1'b1));

assign ap_channel_done_q_fr_V = (freqm_U0_ap_done & (ap_sync_reg_channel_write_q_fr_V ^ 1'b1));

assign ap_sync_channel_write_i_fr_V = ((i_fr_V_full_n & ap_channel_done_i_fr_V) | ap_sync_reg_channel_write_i_fr_V);

assign ap_sync_channel_write_q_fr_V = ((q_fr_V_full_n & ap_channel_done_q_fr_V) | ap_sync_reg_channel_write_q_fr_V);

assign ap_sync_continue = 1'b0;

assign freqm_U0_ap_continue = (ap_sync_channel_write_q_fr_V & ap_sync_channel_write_i_fr_V);

assign freqm_U0_ap_start = start_for_freqm_U0_empty_n;

assign freqm_U0_start_full_n = 1'b1;

assign freqm_U0_start_write = 1'b0;

assign iy_V = o_mux_U0_iy_V;

assign iy_V_ap_vld = o_mux_U0_iy_V_ap_vld;

assign mod_sub_entry23_U0_ap_continue = 1'b1;

assign mod_sub_entry23_U0_ap_start = 1'b1;

assign mod_sub_entry23_U0_start_full_n = (start_for_phasm_U0_full_n & start_for_freqm_U0_full_n);

assign o_mux_U0_ap_continue = 1'b1;

assign o_mux_U0_ap_start = (q_fr_V_empty_n & i_fr_V_empty_n & flag_empty_n);

assign o_mux_U0_flag = flag_dout;

assign o_mux_U0_start_full_n = 1'b1;

assign o_mux_U0_start_write = 1'b0;

assign phasm_U0_ap_continue = flag_full_n;

assign phasm_U0_ap_start = start_for_phasm_U0_empty_n;

assign phasm_U0_start_full_n = 1'b1;

assign phasm_U0_start_write = 1'b0;

assign qy_V = o_mux_U0_qy_V;

assign qy_V_ap_vld = o_mux_U0_qy_V_ap_vld;

assign start_for_freqm_U0_din = 1'b1;

assign start_for_phasm_U0_din = 1'b1;

endmodule //mod_sub
