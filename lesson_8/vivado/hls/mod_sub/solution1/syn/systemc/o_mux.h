// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _o_mux_HH_
#define _o_mux_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct o_mux : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > ix_V_dout;
    sc_in< sc_logic > ix_V_empty_n;
    sc_out< sc_logic > ix_V_read;
    sc_in< sc_lv<32> > qx_V_dout;
    sc_in< sc_logic > qx_V_empty_n;
    sc_out< sc_logic > qx_V_read;
    sc_in< sc_lv<32> > p_read;
    sc_in< sc_lv<32> > p_read1;
    sc_out< sc_lv<32> > iy_V;
    sc_out< sc_logic > iy_V_ap_vld;
    sc_out< sc_lv<32> > qy_V;
    sc_out< sc_logic > qy_V_ap_vld;
    sc_in< sc_logic > flag;
    sc_in< sc_lv<2> > mux_V_dout;
    sc_in< sc_logic > mux_V_empty_n;
    sc_out< sc_logic > mux_V_read;


    // Module declarations
    o_mux(sc_module_name name);
    SC_HAS_PROCESS(o_mux);

    ~o_mux();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ix_V_blk_n;
    sc_signal< sc_logic > qx_V_blk_n;
    sc_signal< sc_logic > mux_V_blk_n;
    sc_signal< sc_lv<32> > sub_ln68_3_fu_169_p2;
    sc_signal< sc_lv<32> > ap_phi_mux_storemerge_i_i_phi_fu_143_p4;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<2> > mux_V_read_read_fu_114_p2;
    sc_signal< sc_lv<1> > flag_read_read_fu_84_p2;
    sc_signal< sc_lv<32> > sub_ln68_1_fu_183_p2;
    sc_signal< sc_lv<32> > ap_phi_mux_storemerge1_i_i_phi_fu_154_p4;
    sc_signal< sc_lv<32> > sub_ln68_2_fu_162_p2;
    sc_signal< sc_lv<32> > iy_V_preg;
    sc_signal< sc_lv<32> > sub_ln68_fu_176_p2;
    sc_signal< sc_lv<32> > qy_V_preg;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< bool > ap_condition_60;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_state1;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<2> ap_const_lv2_3;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<2> ap_const_lv2_1;
    static const sc_lv<2> ap_const_lv2_2;
    static const sc_lv<2> ap_const_lv2_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_block_state1();
    void thread_ap_condition_60();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_phi_mux_storemerge1_i_i_phi_fu_154_p4();
    void thread_ap_phi_mux_storemerge_i_i_phi_fu_143_p4();
    void thread_ap_ready();
    void thread_flag_read_read_fu_84_p2();
    void thread_ix_V_blk_n();
    void thread_ix_V_read();
    void thread_iy_V();
    void thread_iy_V_ap_vld();
    void thread_mux_V_blk_n();
    void thread_mux_V_read();
    void thread_mux_V_read_read_fu_114_p2();
    void thread_qx_V_blk_n();
    void thread_qx_V_read();
    void thread_qy_V();
    void thread_qy_V_ap_vld();
    void thread_sub_ln68_1_fu_183_p2();
    void thread_sub_ln68_2_fu_162_p2();
    void thread_sub_ln68_3_fu_169_p2();
    void thread_sub_ln68_fu_176_p2();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
