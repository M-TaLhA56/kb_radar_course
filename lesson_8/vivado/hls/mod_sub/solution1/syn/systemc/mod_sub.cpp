// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "mod_sub.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_lv<32> mod_sub::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_logic mod_sub::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic mod_sub::ap_const_logic_0 = sc_dt::Log_0;
const bool mod_sub::ap_const_boolean_1 = true;

mod_sub::mod_sub(sc_module_name name) : sc_module(name), mVcdFile(0) {
    mod_sub_entry23_U0 = new mod_sub_entry23("mod_sub_entry23_U0");
    mod_sub_entry23_U0->ap_clk(ap_clk);
    mod_sub_entry23_U0->ap_rst(ap_rst);
    mod_sub_entry23_U0->ap_start(mod_sub_entry23_U0_ap_start);
    mod_sub_entry23_U0->start_full_n(mod_sub_entry23_U0_start_full_n);
    mod_sub_entry23_U0->ap_done(mod_sub_entry23_U0_ap_done);
    mod_sub_entry23_U0->ap_continue(mod_sub_entry23_U0_ap_continue);
    mod_sub_entry23_U0->ap_idle(mod_sub_entry23_U0_ap_idle);
    mod_sub_entry23_U0->ap_ready(mod_sub_entry23_U0_ap_ready);
    mod_sub_entry23_U0->start_out(mod_sub_entry23_U0_start_out);
    mod_sub_entry23_U0->start_write(mod_sub_entry23_U0_start_write);
    mod_sub_entry23_U0->ix_V(ix_V);
    mod_sub_entry23_U0->ix_V_ap_vld(ix_V_ap_vld);
    mod_sub_entry23_U0->qx_V(qx_V);
    mod_sub_entry23_U0->qx_V_ap_vld(qx_V_ap_vld);
    mod_sub_entry23_U0->i_mod_V(i_mod_V);
    mod_sub_entry23_U0->i_mod_V_ap_vld(i_mod_V_ap_vld);
    mod_sub_entry23_U0->q_mod_V(q_mod_V);
    mod_sub_entry23_U0->q_mod_V_ap_vld(q_mod_V_ap_vld);
    mod_sub_entry23_U0->period_V(period_V);
    mod_sub_entry23_U0->period_V_ap_vld(period_V_ap_vld);
    mod_sub_entry23_U0->mux_V(mux_V);
    mod_sub_entry23_U0->mux_V_ap_vld(mux_V_ap_vld);
    mod_sub_entry23_U0->ix_V_out_din(mod_sub_entry23_U0_ix_V_out_din);
    mod_sub_entry23_U0->ix_V_out_full_n(ix_V_c_full_n);
    mod_sub_entry23_U0->ix_V_out_write(mod_sub_entry23_U0_ix_V_out_write);
    mod_sub_entry23_U0->qx_V_out_din(mod_sub_entry23_U0_qx_V_out_din);
    mod_sub_entry23_U0->qx_V_out_full_n(qx_V_c_full_n);
    mod_sub_entry23_U0->qx_V_out_write(mod_sub_entry23_U0_qx_V_out_write);
    mod_sub_entry23_U0->i_mod_V_out_din(mod_sub_entry23_U0_i_mod_V_out_din);
    mod_sub_entry23_U0->i_mod_V_out_full_n(i_mod_V_c_full_n);
    mod_sub_entry23_U0->i_mod_V_out_write(mod_sub_entry23_U0_i_mod_V_out_write);
    mod_sub_entry23_U0->q_mod_V_out_din(mod_sub_entry23_U0_q_mod_V_out_din);
    mod_sub_entry23_U0->q_mod_V_out_full_n(q_mod_V_c_full_n);
    mod_sub_entry23_U0->q_mod_V_out_write(mod_sub_entry23_U0_q_mod_V_out_write);
    mod_sub_entry23_U0->period_V_out_din(mod_sub_entry23_U0_period_V_out_din);
    mod_sub_entry23_U0->period_V_out_full_n(period_V_c_full_n);
    mod_sub_entry23_U0->period_V_out_write(mod_sub_entry23_U0_period_V_out_write);
    mod_sub_entry23_U0->mux_V_out_din(mod_sub_entry23_U0_mux_V_out_din);
    mod_sub_entry23_U0->mux_V_out_full_n(mux_V_c_full_n);
    mod_sub_entry23_U0->mux_V_out_write(mod_sub_entry23_U0_mux_V_out_write);
    freqm_U0 = new freqm("freqm_U0");
    freqm_U0->ap_clk(ap_clk);
    freqm_U0->ap_rst(ap_rst);
    freqm_U0->ap_start(freqm_U0_ap_start);
    freqm_U0->ap_done(freqm_U0_ap_done);
    freqm_U0->ap_continue(freqm_U0_ap_continue);
    freqm_U0->ap_idle(freqm_U0_ap_idle);
    freqm_U0->ap_ready(freqm_U0_ap_ready);
    freqm_U0->ix_V_dout(ix_V_c_dout);
    freqm_U0->ix_V_empty_n(ix_V_c_empty_n);
    freqm_U0->ix_V_read(freqm_U0_ix_V_read);
    freqm_U0->qx_V_dout(qx_V_c_dout);
    freqm_U0->qx_V_empty_n(qx_V_c_empty_n);
    freqm_U0->qx_V_read(freqm_U0_qx_V_read);
    freqm_U0->i_mod_V_dout(i_mod_V_c_dout);
    freqm_U0->i_mod_V_empty_n(i_mod_V_c_empty_n);
    freqm_U0->i_mod_V_read(freqm_U0_i_mod_V_read);
    freqm_U0->q_mod_V_dout(q_mod_V_c_dout);
    freqm_U0->q_mod_V_empty_n(q_mod_V_c_empty_n);
    freqm_U0->q_mod_V_read(freqm_U0_q_mod_V_read);
    freqm_U0->ix_V_out_din(freqm_U0_ix_V_out_din);
    freqm_U0->ix_V_out_full_n(ix_V_c2_full_n);
    freqm_U0->ix_V_out_write(freqm_U0_ix_V_out_write);
    freqm_U0->qx_V_out_din(freqm_U0_qx_V_out_din);
    freqm_U0->qx_V_out_full_n(qx_V_c3_full_n);
    freqm_U0->qx_V_out_write(freqm_U0_qx_V_out_write);
    freqm_U0->ap_return_0(freqm_U0_ap_return_0);
    freqm_U0->ap_return_1(freqm_U0_ap_return_1);
    phasm_U0 = new phasm("phasm_U0");
    phasm_U0->ap_clk(ap_clk);
    phasm_U0->ap_rst(ap_rst);
    phasm_U0->ap_start(phasm_U0_ap_start);
    phasm_U0->ap_done(phasm_U0_ap_done);
    phasm_U0->ap_continue(phasm_U0_ap_continue);
    phasm_U0->ap_idle(phasm_U0_ap_idle);
    phasm_U0->ap_ready(phasm_U0_ap_ready);
    phasm_U0->period_V_dout(period_V_c_dout);
    phasm_U0->period_V_empty_n(period_V_c_empty_n);
    phasm_U0->period_V_read(phasm_U0_period_V_read);
    phasm_U0->ap_return(phasm_U0_ap_return);
    o_mux_U0 = new o_mux("o_mux_U0");
    o_mux_U0->ap_clk(ap_clk);
    o_mux_U0->ap_rst(ap_rst);
    o_mux_U0->ap_start(o_mux_U0_ap_start);
    o_mux_U0->ap_done(o_mux_U0_ap_done);
    o_mux_U0->ap_continue(o_mux_U0_ap_continue);
    o_mux_U0->ap_idle(o_mux_U0_ap_idle);
    o_mux_U0->ap_ready(o_mux_U0_ap_ready);
    o_mux_U0->ix_V_dout(ix_V_c2_dout);
    o_mux_U0->ix_V_empty_n(ix_V_c2_empty_n);
    o_mux_U0->ix_V_read(o_mux_U0_ix_V_read);
    o_mux_U0->qx_V_dout(qx_V_c3_dout);
    o_mux_U0->qx_V_empty_n(qx_V_c3_empty_n);
    o_mux_U0->qx_V_read(o_mux_U0_qx_V_read);
    o_mux_U0->p_read(i_fr_V_dout);
    o_mux_U0->p_read1(q_fr_V_dout);
    o_mux_U0->iy_V(o_mux_U0_iy_V);
    o_mux_U0->iy_V_ap_vld(o_mux_U0_iy_V_ap_vld);
    o_mux_U0->qy_V(o_mux_U0_qy_V);
    o_mux_U0->qy_V_ap_vld(o_mux_U0_qy_V_ap_vld);
    o_mux_U0->flag(o_mux_U0_flag);
    o_mux_U0->mux_V_dout(mux_V_c_dout);
    o_mux_U0->mux_V_empty_n(mux_V_c_empty_n);
    o_mux_U0->mux_V_read(o_mux_U0_mux_V_read);
    ix_V_c_U = new fifo_w32_d2_A("ix_V_c_U");
    ix_V_c_U->clk(ap_clk);
    ix_V_c_U->reset(ap_rst);
    ix_V_c_U->if_read_ce(ap_var_for_const0);
    ix_V_c_U->if_write_ce(ap_var_for_const0);
    ix_V_c_U->if_din(mod_sub_entry23_U0_ix_V_out_din);
    ix_V_c_U->if_full_n(ix_V_c_full_n);
    ix_V_c_U->if_write(mod_sub_entry23_U0_ix_V_out_write);
    ix_V_c_U->if_dout(ix_V_c_dout);
    ix_V_c_U->if_empty_n(ix_V_c_empty_n);
    ix_V_c_U->if_read(freqm_U0_ix_V_read);
    qx_V_c_U = new fifo_w32_d2_A("qx_V_c_U");
    qx_V_c_U->clk(ap_clk);
    qx_V_c_U->reset(ap_rst);
    qx_V_c_U->if_read_ce(ap_var_for_const0);
    qx_V_c_U->if_write_ce(ap_var_for_const0);
    qx_V_c_U->if_din(mod_sub_entry23_U0_qx_V_out_din);
    qx_V_c_U->if_full_n(qx_V_c_full_n);
    qx_V_c_U->if_write(mod_sub_entry23_U0_qx_V_out_write);
    qx_V_c_U->if_dout(qx_V_c_dout);
    qx_V_c_U->if_empty_n(qx_V_c_empty_n);
    qx_V_c_U->if_read(freqm_U0_qx_V_read);
    i_mod_V_c_U = new fifo_w8_d2_A("i_mod_V_c_U");
    i_mod_V_c_U->clk(ap_clk);
    i_mod_V_c_U->reset(ap_rst);
    i_mod_V_c_U->if_read_ce(ap_var_for_const0);
    i_mod_V_c_U->if_write_ce(ap_var_for_const0);
    i_mod_V_c_U->if_din(mod_sub_entry23_U0_i_mod_V_out_din);
    i_mod_V_c_U->if_full_n(i_mod_V_c_full_n);
    i_mod_V_c_U->if_write(mod_sub_entry23_U0_i_mod_V_out_write);
    i_mod_V_c_U->if_dout(i_mod_V_c_dout);
    i_mod_V_c_U->if_empty_n(i_mod_V_c_empty_n);
    i_mod_V_c_U->if_read(freqm_U0_i_mod_V_read);
    q_mod_V_c_U = new fifo_w8_d2_A("q_mod_V_c_U");
    q_mod_V_c_U->clk(ap_clk);
    q_mod_V_c_U->reset(ap_rst);
    q_mod_V_c_U->if_read_ce(ap_var_for_const0);
    q_mod_V_c_U->if_write_ce(ap_var_for_const0);
    q_mod_V_c_U->if_din(mod_sub_entry23_U0_q_mod_V_out_din);
    q_mod_V_c_U->if_full_n(q_mod_V_c_full_n);
    q_mod_V_c_U->if_write(mod_sub_entry23_U0_q_mod_V_out_write);
    q_mod_V_c_U->if_dout(q_mod_V_c_dout);
    q_mod_V_c_U->if_empty_n(q_mod_V_c_empty_n);
    q_mod_V_c_U->if_read(freqm_U0_q_mod_V_read);
    period_V_c_U = new fifo_w8_d2_A("period_V_c_U");
    period_V_c_U->clk(ap_clk);
    period_V_c_U->reset(ap_rst);
    period_V_c_U->if_read_ce(ap_var_for_const0);
    period_V_c_U->if_write_ce(ap_var_for_const0);
    period_V_c_U->if_din(mod_sub_entry23_U0_period_V_out_din);
    period_V_c_U->if_full_n(period_V_c_full_n);
    period_V_c_U->if_write(mod_sub_entry23_U0_period_V_out_write);
    period_V_c_U->if_dout(period_V_c_dout);
    period_V_c_U->if_empty_n(period_V_c_empty_n);
    period_V_c_U->if_read(phasm_U0_period_V_read);
    mux_V_c_U = new fifo_w2_d3_A("mux_V_c_U");
    mux_V_c_U->clk(ap_clk);
    mux_V_c_U->reset(ap_rst);
    mux_V_c_U->if_read_ce(ap_var_for_const0);
    mux_V_c_U->if_write_ce(ap_var_for_const0);
    mux_V_c_U->if_din(mod_sub_entry23_U0_mux_V_out_din);
    mux_V_c_U->if_full_n(mux_V_c_full_n);
    mux_V_c_U->if_write(mod_sub_entry23_U0_mux_V_out_write);
    mux_V_c_U->if_dout(mux_V_c_dout);
    mux_V_c_U->if_empty_n(mux_V_c_empty_n);
    mux_V_c_U->if_read(o_mux_U0_mux_V_read);
    ix_V_c2_U = new fifo_w32_d2_A("ix_V_c2_U");
    ix_V_c2_U->clk(ap_clk);
    ix_V_c2_U->reset(ap_rst);
    ix_V_c2_U->if_read_ce(ap_var_for_const0);
    ix_V_c2_U->if_write_ce(ap_var_for_const0);
    ix_V_c2_U->if_din(freqm_U0_ix_V_out_din);
    ix_V_c2_U->if_full_n(ix_V_c2_full_n);
    ix_V_c2_U->if_write(freqm_U0_ix_V_out_write);
    ix_V_c2_U->if_dout(ix_V_c2_dout);
    ix_V_c2_U->if_empty_n(ix_V_c2_empty_n);
    ix_V_c2_U->if_read(o_mux_U0_ix_V_read);
    qx_V_c3_U = new fifo_w32_d2_A("qx_V_c3_U");
    qx_V_c3_U->clk(ap_clk);
    qx_V_c3_U->reset(ap_rst);
    qx_V_c3_U->if_read_ce(ap_var_for_const0);
    qx_V_c3_U->if_write_ce(ap_var_for_const0);
    qx_V_c3_U->if_din(freqm_U0_qx_V_out_din);
    qx_V_c3_U->if_full_n(qx_V_c3_full_n);
    qx_V_c3_U->if_write(freqm_U0_qx_V_out_write);
    qx_V_c3_U->if_dout(qx_V_c3_dout);
    qx_V_c3_U->if_empty_n(qx_V_c3_empty_n);
    qx_V_c3_U->if_read(o_mux_U0_qx_V_read);
    i_fr_V_U = new fifo_w32_d2_A("i_fr_V_U");
    i_fr_V_U->clk(ap_clk);
    i_fr_V_U->reset(ap_rst);
    i_fr_V_U->if_read_ce(ap_var_for_const0);
    i_fr_V_U->if_write_ce(ap_var_for_const0);
    i_fr_V_U->if_din(freqm_U0_ap_return_0);
    i_fr_V_U->if_full_n(i_fr_V_full_n);
    i_fr_V_U->if_write(ap_channel_done_i_fr_V);
    i_fr_V_U->if_dout(i_fr_V_dout);
    i_fr_V_U->if_empty_n(i_fr_V_empty_n);
    i_fr_V_U->if_read(o_mux_U0_ap_ready);
    q_fr_V_U = new fifo_w32_d2_A("q_fr_V_U");
    q_fr_V_U->clk(ap_clk);
    q_fr_V_U->reset(ap_rst);
    q_fr_V_U->if_read_ce(ap_var_for_const0);
    q_fr_V_U->if_write_ce(ap_var_for_const0);
    q_fr_V_U->if_din(freqm_U0_ap_return_1);
    q_fr_V_U->if_full_n(q_fr_V_full_n);
    q_fr_V_U->if_write(ap_channel_done_q_fr_V);
    q_fr_V_U->if_dout(q_fr_V_dout);
    q_fr_V_U->if_empty_n(q_fr_V_empty_n);
    q_fr_V_U->if_read(o_mux_U0_ap_ready);
    flag_U = new fifo_w1_d2_A("flag_U");
    flag_U->clk(ap_clk);
    flag_U->reset(ap_rst);
    flag_U->if_read_ce(ap_var_for_const0);
    flag_U->if_write_ce(ap_var_for_const0);
    flag_U->if_din(phasm_U0_ap_return);
    flag_U->if_full_n(flag_full_n);
    flag_U->if_write(phasm_U0_ap_done);
    flag_U->if_dout(flag_dout);
    flag_U->if_empty_n(flag_empty_n);
    flag_U->if_read(o_mux_U0_ap_ready);
    start_for_freqm_U0_U = new start_for_freqm_U0("start_for_freqm_U0_U");
    start_for_freqm_U0_U->clk(ap_clk);
    start_for_freqm_U0_U->reset(ap_rst);
    start_for_freqm_U0_U->if_read_ce(ap_var_for_const0);
    start_for_freqm_U0_U->if_write_ce(ap_var_for_const0);
    start_for_freqm_U0_U->if_din(start_for_freqm_U0_din);
    start_for_freqm_U0_U->if_full_n(start_for_freqm_U0_full_n);
    start_for_freqm_U0_U->if_write(mod_sub_entry23_U0_start_write);
    start_for_freqm_U0_U->if_dout(start_for_freqm_U0_dout);
    start_for_freqm_U0_U->if_empty_n(start_for_freqm_U0_empty_n);
    start_for_freqm_U0_U->if_read(freqm_U0_ap_ready);
    start_for_phasm_U0_U = new start_for_phasm_U0("start_for_phasm_U0_U");
    start_for_phasm_U0_U->clk(ap_clk);
    start_for_phasm_U0_U->reset(ap_rst);
    start_for_phasm_U0_U->if_read_ce(ap_var_for_const0);
    start_for_phasm_U0_U->if_write_ce(ap_var_for_const0);
    start_for_phasm_U0_U->if_din(start_for_phasm_U0_din);
    start_for_phasm_U0_U->if_full_n(start_for_phasm_U0_full_n);
    start_for_phasm_U0_U->if_write(mod_sub_entry23_U0_start_write);
    start_for_phasm_U0_U->if_dout(start_for_phasm_U0_dout);
    start_for_phasm_U0_U->if_empty_n(start_for_phasm_U0_empty_n);
    start_for_phasm_U0_U->if_read(phasm_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_channel_done_flag);
    sensitive << ( phasm_U0_ap_done );

    SC_METHOD(thread_ap_channel_done_i_fr_V);
    sensitive << ( freqm_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_i_fr_V );

    SC_METHOD(thread_ap_channel_done_q_fr_V);
    sensitive << ( freqm_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_q_fr_V );

    SC_METHOD(thread_ap_sync_channel_write_i_fr_V);
    sensitive << ( ap_channel_done_i_fr_V );
    sensitive << ( i_fr_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_i_fr_V );

    SC_METHOD(thread_ap_sync_channel_write_q_fr_V);
    sensitive << ( ap_channel_done_q_fr_V );
    sensitive << ( q_fr_V_full_n );
    sensitive << ( ap_sync_reg_channel_write_q_fr_V );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_freqm_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_q_fr_V );
    sensitive << ( ap_sync_channel_write_i_fr_V );

    SC_METHOD(thread_freqm_U0_ap_start);
    sensitive << ( start_for_freqm_U0_empty_n );

    SC_METHOD(thread_freqm_U0_start_full_n);

    SC_METHOD(thread_freqm_U0_start_write);

    SC_METHOD(thread_iy_V);
    sensitive << ( o_mux_U0_iy_V );

    SC_METHOD(thread_iy_V_ap_vld);
    sensitive << ( o_mux_U0_iy_V_ap_vld );

    SC_METHOD(thread_mod_sub_entry23_U0_ap_continue);

    SC_METHOD(thread_mod_sub_entry23_U0_ap_start);

    SC_METHOD(thread_mod_sub_entry23_U0_start_full_n);
    sensitive << ( start_for_freqm_U0_full_n );
    sensitive << ( start_for_phasm_U0_full_n );

    SC_METHOD(thread_o_mux_U0_ap_continue);

    SC_METHOD(thread_o_mux_U0_ap_start);
    sensitive << ( i_fr_V_empty_n );
    sensitive << ( q_fr_V_empty_n );
    sensitive << ( flag_empty_n );

    SC_METHOD(thread_o_mux_U0_flag);
    sensitive << ( flag_dout );

    SC_METHOD(thread_o_mux_U0_start_full_n);

    SC_METHOD(thread_o_mux_U0_start_write);

    SC_METHOD(thread_phasm_U0_ap_continue);
    sensitive << ( flag_full_n );

    SC_METHOD(thread_phasm_U0_ap_start);
    sensitive << ( start_for_phasm_U0_empty_n );

    SC_METHOD(thread_phasm_U0_start_full_n);

    SC_METHOD(thread_phasm_U0_start_write);

    SC_METHOD(thread_qy_V);
    sensitive << ( o_mux_U0_qy_V );

    SC_METHOD(thread_qy_V_ap_vld);
    sensitive << ( o_mux_U0_qy_V_ap_vld );

    SC_METHOD(thread_start_for_freqm_U0_din);

    SC_METHOD(thread_start_for_phasm_U0_din);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_sync_reg_channel_write_q_fr_V = SC_LOGIC_0;
    ap_sync_reg_channel_write_i_fr_V = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "mod_sub_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ix_V, "(port)ix_V");
    sc_trace(mVcdFile, qx_V, "(port)qx_V");
    sc_trace(mVcdFile, i_mod_V, "(port)i_mod_V");
    sc_trace(mVcdFile, q_mod_V, "(port)q_mod_V");
    sc_trace(mVcdFile, iy_V, "(port)iy_V");
    sc_trace(mVcdFile, qy_V, "(port)qy_V");
    sc_trace(mVcdFile, period_V, "(port)period_V");
    sc_trace(mVcdFile, mux_V, "(port)mux_V");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ix_V_ap_vld, "(port)ix_V_ap_vld");
    sc_trace(mVcdFile, qx_V_ap_vld, "(port)qx_V_ap_vld");
    sc_trace(mVcdFile, i_mod_V_ap_vld, "(port)i_mod_V_ap_vld");
    sc_trace(mVcdFile, q_mod_V_ap_vld, "(port)q_mod_V_ap_vld");
    sc_trace(mVcdFile, period_V_ap_vld, "(port)period_V_ap_vld");
    sc_trace(mVcdFile, mux_V_ap_vld, "(port)mux_V_ap_vld");
    sc_trace(mVcdFile, iy_V_ap_vld, "(port)iy_V_ap_vld");
    sc_trace(mVcdFile, qy_V_ap_vld, "(port)qy_V_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, mod_sub_entry23_U0_ap_start, "mod_sub_entry23_U0_ap_start");
    sc_trace(mVcdFile, mod_sub_entry23_U0_start_full_n, "mod_sub_entry23_U0_start_full_n");
    sc_trace(mVcdFile, mod_sub_entry23_U0_ap_done, "mod_sub_entry23_U0_ap_done");
    sc_trace(mVcdFile, mod_sub_entry23_U0_ap_continue, "mod_sub_entry23_U0_ap_continue");
    sc_trace(mVcdFile, mod_sub_entry23_U0_ap_idle, "mod_sub_entry23_U0_ap_idle");
    sc_trace(mVcdFile, mod_sub_entry23_U0_ap_ready, "mod_sub_entry23_U0_ap_ready");
    sc_trace(mVcdFile, mod_sub_entry23_U0_start_out, "mod_sub_entry23_U0_start_out");
    sc_trace(mVcdFile, mod_sub_entry23_U0_start_write, "mod_sub_entry23_U0_start_write");
    sc_trace(mVcdFile, mod_sub_entry23_U0_ix_V_out_din, "mod_sub_entry23_U0_ix_V_out_din");
    sc_trace(mVcdFile, mod_sub_entry23_U0_ix_V_out_write, "mod_sub_entry23_U0_ix_V_out_write");
    sc_trace(mVcdFile, mod_sub_entry23_U0_qx_V_out_din, "mod_sub_entry23_U0_qx_V_out_din");
    sc_trace(mVcdFile, mod_sub_entry23_U0_qx_V_out_write, "mod_sub_entry23_U0_qx_V_out_write");
    sc_trace(mVcdFile, mod_sub_entry23_U0_i_mod_V_out_din, "mod_sub_entry23_U0_i_mod_V_out_din");
    sc_trace(mVcdFile, mod_sub_entry23_U0_i_mod_V_out_write, "mod_sub_entry23_U0_i_mod_V_out_write");
    sc_trace(mVcdFile, mod_sub_entry23_U0_q_mod_V_out_din, "mod_sub_entry23_U0_q_mod_V_out_din");
    sc_trace(mVcdFile, mod_sub_entry23_U0_q_mod_V_out_write, "mod_sub_entry23_U0_q_mod_V_out_write");
    sc_trace(mVcdFile, mod_sub_entry23_U0_period_V_out_din, "mod_sub_entry23_U0_period_V_out_din");
    sc_trace(mVcdFile, mod_sub_entry23_U0_period_V_out_write, "mod_sub_entry23_U0_period_V_out_write");
    sc_trace(mVcdFile, mod_sub_entry23_U0_mux_V_out_din, "mod_sub_entry23_U0_mux_V_out_din");
    sc_trace(mVcdFile, mod_sub_entry23_U0_mux_V_out_write, "mod_sub_entry23_U0_mux_V_out_write");
    sc_trace(mVcdFile, freqm_U0_ap_start, "freqm_U0_ap_start");
    sc_trace(mVcdFile, freqm_U0_ap_done, "freqm_U0_ap_done");
    sc_trace(mVcdFile, freqm_U0_ap_continue, "freqm_U0_ap_continue");
    sc_trace(mVcdFile, freqm_U0_ap_idle, "freqm_U0_ap_idle");
    sc_trace(mVcdFile, freqm_U0_ap_ready, "freqm_U0_ap_ready");
    sc_trace(mVcdFile, freqm_U0_ix_V_read, "freqm_U0_ix_V_read");
    sc_trace(mVcdFile, freqm_U0_qx_V_read, "freqm_U0_qx_V_read");
    sc_trace(mVcdFile, freqm_U0_i_mod_V_read, "freqm_U0_i_mod_V_read");
    sc_trace(mVcdFile, freqm_U0_q_mod_V_read, "freqm_U0_q_mod_V_read");
    sc_trace(mVcdFile, freqm_U0_ix_V_out_din, "freqm_U0_ix_V_out_din");
    sc_trace(mVcdFile, freqm_U0_ix_V_out_write, "freqm_U0_ix_V_out_write");
    sc_trace(mVcdFile, freqm_U0_qx_V_out_din, "freqm_U0_qx_V_out_din");
    sc_trace(mVcdFile, freqm_U0_qx_V_out_write, "freqm_U0_qx_V_out_write");
    sc_trace(mVcdFile, freqm_U0_ap_return_0, "freqm_U0_ap_return_0");
    sc_trace(mVcdFile, freqm_U0_ap_return_1, "freqm_U0_ap_return_1");
    sc_trace(mVcdFile, ap_channel_done_q_fr_V, "ap_channel_done_q_fr_V");
    sc_trace(mVcdFile, q_fr_V_full_n, "q_fr_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_q_fr_V, "ap_sync_reg_channel_write_q_fr_V");
    sc_trace(mVcdFile, ap_sync_channel_write_q_fr_V, "ap_sync_channel_write_q_fr_V");
    sc_trace(mVcdFile, ap_channel_done_i_fr_V, "ap_channel_done_i_fr_V");
    sc_trace(mVcdFile, i_fr_V_full_n, "i_fr_V_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_i_fr_V, "ap_sync_reg_channel_write_i_fr_V");
    sc_trace(mVcdFile, ap_sync_channel_write_i_fr_V, "ap_sync_channel_write_i_fr_V");
    sc_trace(mVcdFile, phasm_U0_ap_start, "phasm_U0_ap_start");
    sc_trace(mVcdFile, phasm_U0_ap_done, "phasm_U0_ap_done");
    sc_trace(mVcdFile, phasm_U0_ap_continue, "phasm_U0_ap_continue");
    sc_trace(mVcdFile, phasm_U0_ap_idle, "phasm_U0_ap_idle");
    sc_trace(mVcdFile, phasm_U0_ap_ready, "phasm_U0_ap_ready");
    sc_trace(mVcdFile, phasm_U0_period_V_read, "phasm_U0_period_V_read");
    sc_trace(mVcdFile, phasm_U0_ap_return, "phasm_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_flag, "ap_channel_done_flag");
    sc_trace(mVcdFile, flag_full_n, "flag_full_n");
    sc_trace(mVcdFile, o_mux_U0_ap_start, "o_mux_U0_ap_start");
    sc_trace(mVcdFile, o_mux_U0_ap_done, "o_mux_U0_ap_done");
    sc_trace(mVcdFile, o_mux_U0_ap_continue, "o_mux_U0_ap_continue");
    sc_trace(mVcdFile, o_mux_U0_ap_idle, "o_mux_U0_ap_idle");
    sc_trace(mVcdFile, o_mux_U0_ap_ready, "o_mux_U0_ap_ready");
    sc_trace(mVcdFile, o_mux_U0_ix_V_read, "o_mux_U0_ix_V_read");
    sc_trace(mVcdFile, o_mux_U0_qx_V_read, "o_mux_U0_qx_V_read");
    sc_trace(mVcdFile, o_mux_U0_iy_V, "o_mux_U0_iy_V");
    sc_trace(mVcdFile, o_mux_U0_iy_V_ap_vld, "o_mux_U0_iy_V_ap_vld");
    sc_trace(mVcdFile, o_mux_U0_qy_V, "o_mux_U0_qy_V");
    sc_trace(mVcdFile, o_mux_U0_qy_V_ap_vld, "o_mux_U0_qy_V_ap_vld");
    sc_trace(mVcdFile, o_mux_U0_flag, "o_mux_U0_flag");
    sc_trace(mVcdFile, o_mux_U0_mux_V_read, "o_mux_U0_mux_V_read");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, ix_V_c_full_n, "ix_V_c_full_n");
    sc_trace(mVcdFile, ix_V_c_dout, "ix_V_c_dout");
    sc_trace(mVcdFile, ix_V_c_empty_n, "ix_V_c_empty_n");
    sc_trace(mVcdFile, qx_V_c_full_n, "qx_V_c_full_n");
    sc_trace(mVcdFile, qx_V_c_dout, "qx_V_c_dout");
    sc_trace(mVcdFile, qx_V_c_empty_n, "qx_V_c_empty_n");
    sc_trace(mVcdFile, i_mod_V_c_full_n, "i_mod_V_c_full_n");
    sc_trace(mVcdFile, i_mod_V_c_dout, "i_mod_V_c_dout");
    sc_trace(mVcdFile, i_mod_V_c_empty_n, "i_mod_V_c_empty_n");
    sc_trace(mVcdFile, q_mod_V_c_full_n, "q_mod_V_c_full_n");
    sc_trace(mVcdFile, q_mod_V_c_dout, "q_mod_V_c_dout");
    sc_trace(mVcdFile, q_mod_V_c_empty_n, "q_mod_V_c_empty_n");
    sc_trace(mVcdFile, period_V_c_full_n, "period_V_c_full_n");
    sc_trace(mVcdFile, period_V_c_dout, "period_V_c_dout");
    sc_trace(mVcdFile, period_V_c_empty_n, "period_V_c_empty_n");
    sc_trace(mVcdFile, mux_V_c_full_n, "mux_V_c_full_n");
    sc_trace(mVcdFile, mux_V_c_dout, "mux_V_c_dout");
    sc_trace(mVcdFile, mux_V_c_empty_n, "mux_V_c_empty_n");
    sc_trace(mVcdFile, ix_V_c2_full_n, "ix_V_c2_full_n");
    sc_trace(mVcdFile, ix_V_c2_dout, "ix_V_c2_dout");
    sc_trace(mVcdFile, ix_V_c2_empty_n, "ix_V_c2_empty_n");
    sc_trace(mVcdFile, qx_V_c3_full_n, "qx_V_c3_full_n");
    sc_trace(mVcdFile, qx_V_c3_dout, "qx_V_c3_dout");
    sc_trace(mVcdFile, qx_V_c3_empty_n, "qx_V_c3_empty_n");
    sc_trace(mVcdFile, i_fr_V_dout, "i_fr_V_dout");
    sc_trace(mVcdFile, i_fr_V_empty_n, "i_fr_V_empty_n");
    sc_trace(mVcdFile, q_fr_V_dout, "q_fr_V_dout");
    sc_trace(mVcdFile, q_fr_V_empty_n, "q_fr_V_empty_n");
    sc_trace(mVcdFile, flag_dout, "flag_dout");
    sc_trace(mVcdFile, flag_empty_n, "flag_empty_n");
    sc_trace(mVcdFile, start_for_freqm_U0_din, "start_for_freqm_U0_din");
    sc_trace(mVcdFile, start_for_freqm_U0_full_n, "start_for_freqm_U0_full_n");
    sc_trace(mVcdFile, start_for_freqm_U0_dout, "start_for_freqm_U0_dout");
    sc_trace(mVcdFile, start_for_freqm_U0_empty_n, "start_for_freqm_U0_empty_n");
    sc_trace(mVcdFile, start_for_phasm_U0_din, "start_for_phasm_U0_din");
    sc_trace(mVcdFile, start_for_phasm_U0_full_n, "start_for_phasm_U0_full_n");
    sc_trace(mVcdFile, start_for_phasm_U0_dout, "start_for_phasm_U0_dout");
    sc_trace(mVcdFile, start_for_phasm_U0_empty_n, "start_for_phasm_U0_empty_n");
    sc_trace(mVcdFile, freqm_U0_start_full_n, "freqm_U0_start_full_n");
    sc_trace(mVcdFile, freqm_U0_start_write, "freqm_U0_start_write");
    sc_trace(mVcdFile, phasm_U0_start_full_n, "phasm_U0_start_full_n");
    sc_trace(mVcdFile, phasm_U0_start_write, "phasm_U0_start_write");
    sc_trace(mVcdFile, o_mux_U0_start_full_n, "o_mux_U0_start_full_n");
    sc_trace(mVcdFile, o_mux_U0_start_write, "o_mux_U0_start_write");
#endif

    }
    mHdltvinHandle.open("mod_sub.hdltvin.dat");
    mHdltvoutHandle.open("mod_sub.hdltvout.dat");
}

mod_sub::~mod_sub() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete mod_sub_entry23_U0;
    delete freqm_U0;
    delete phasm_U0;
    delete o_mux_U0;
    delete ix_V_c_U;
    delete qx_V_c_U;
    delete i_mod_V_c_U;
    delete q_mod_V_c_U;
    delete period_V_c_U;
    delete mux_V_c_U;
    delete ix_V_c2_U;
    delete qx_V_c3_U;
    delete i_fr_V_U;
    delete q_fr_V_U;
    delete flag_U;
    delete start_for_freqm_U0_U;
    delete start_for_phasm_U0_U;
}

void mod_sub::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void mod_sub::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_i_fr_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (freqm_U0_ap_done.read() & 
             freqm_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_i_fr_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_i_fr_V = ap_sync_channel_write_i_fr_V.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_q_fr_V = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (freqm_U0_ap_done.read() & 
             freqm_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_q_fr_V = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_q_fr_V = ap_sync_channel_write_q_fr_V.read();
        }
    }
}

void mod_sub::thread_ap_channel_done_flag() {
    ap_channel_done_flag = phasm_U0_ap_done.read();
}

void mod_sub::thread_ap_channel_done_i_fr_V() {
    ap_channel_done_i_fr_V = (freqm_U0_ap_done.read() & (ap_sync_reg_channel_write_i_fr_V.read() ^ 
  ap_const_logic_1));
}

void mod_sub::thread_ap_channel_done_q_fr_V() {
    ap_channel_done_q_fr_V = (freqm_U0_ap_done.read() & (ap_sync_reg_channel_write_q_fr_V.read() ^ 
  ap_const_logic_1));
}

void mod_sub::thread_ap_sync_channel_write_i_fr_V() {
    ap_sync_channel_write_i_fr_V = ((ap_channel_done_i_fr_V.read() & 
  i_fr_V_full_n.read()) | ap_sync_reg_channel_write_i_fr_V.read());
}

void mod_sub::thread_ap_sync_channel_write_q_fr_V() {
    ap_sync_channel_write_q_fr_V = ((ap_channel_done_q_fr_V.read() & 
  q_fr_V_full_n.read()) | ap_sync_reg_channel_write_q_fr_V.read());
}

void mod_sub::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_0;
}

void mod_sub::thread_freqm_U0_ap_continue() {
    freqm_U0_ap_continue = (ap_sync_channel_write_q_fr_V.read() & ap_sync_channel_write_i_fr_V.read());
}

void mod_sub::thread_freqm_U0_ap_start() {
    freqm_U0_ap_start = start_for_freqm_U0_empty_n.read();
}

void mod_sub::thread_freqm_U0_start_full_n() {
    freqm_U0_start_full_n = ap_const_logic_1;
}

void mod_sub::thread_freqm_U0_start_write() {
    freqm_U0_start_write = ap_const_logic_0;
}

void mod_sub::thread_iy_V() {
    iy_V = o_mux_U0_iy_V.read();
}

void mod_sub::thread_iy_V_ap_vld() {
    iy_V_ap_vld = o_mux_U0_iy_V_ap_vld.read();
}

void mod_sub::thread_mod_sub_entry23_U0_ap_continue() {
    mod_sub_entry23_U0_ap_continue = ap_const_logic_1;
}

void mod_sub::thread_mod_sub_entry23_U0_ap_start() {
    mod_sub_entry23_U0_ap_start = ap_const_logic_1;
}

void mod_sub::thread_mod_sub_entry23_U0_start_full_n() {
    mod_sub_entry23_U0_start_full_n = (start_for_freqm_U0_full_n.read() & start_for_phasm_U0_full_n.read());
}

void mod_sub::thread_o_mux_U0_ap_continue() {
    o_mux_U0_ap_continue = ap_const_logic_1;
}

void mod_sub::thread_o_mux_U0_ap_start() {
    o_mux_U0_ap_start = (i_fr_V_empty_n.read() & q_fr_V_empty_n.read() & flag_empty_n.read());
}

void mod_sub::thread_o_mux_U0_flag() {
    o_mux_U0_flag =  (sc_logic) (flag_dout.read()[0]);
}

void mod_sub::thread_o_mux_U0_start_full_n() {
    o_mux_U0_start_full_n = ap_const_logic_1;
}

void mod_sub::thread_o_mux_U0_start_write() {
    o_mux_U0_start_write = ap_const_logic_0;
}

void mod_sub::thread_phasm_U0_ap_continue() {
    phasm_U0_ap_continue = flag_full_n.read();
}

void mod_sub::thread_phasm_U0_ap_start() {
    phasm_U0_ap_start = start_for_phasm_U0_empty_n.read();
}

void mod_sub::thread_phasm_U0_start_full_n() {
    phasm_U0_start_full_n = ap_const_logic_1;
}

void mod_sub::thread_phasm_U0_start_write() {
    phasm_U0_start_write = ap_const_logic_0;
}

void mod_sub::thread_qy_V() {
    qy_V = o_mux_U0_qy_V.read();
}

void mod_sub::thread_qy_V_ap_vld() {
    qy_V_ap_vld = o_mux_U0_qy_V_ap_vld.read();
}

void mod_sub::thread_start_for_freqm_U0_din() {
    start_for_freqm_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void mod_sub::thread_start_for_phasm_U0_din() {
    start_for_phasm_U0_din =  (sc_lv<1>) (ap_const_logic_1);
}

void mod_sub::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ix_V\" :  \"" << ix_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"qx_V\" :  \"" << qx_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_mod_V\" :  \"" << i_mod_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"q_mod_V\" :  \"" << q_mod_V.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"iy_V\" :  \"" << iy_V.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"qy_V\" :  \"" << qy_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"period_V\" :  \"" << period_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_V\" :  \"" << mux_V.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ix_V_ap_vld\" :  \"" << ix_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"qx_V_ap_vld\" :  \"" << qx_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"i_mod_V_ap_vld\" :  \"" << i_mod_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"q_mod_V_ap_vld\" :  \"" << q_mod_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"period_V_ap_vld\" :  \"" << period_V_ap_vld.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mux_V_ap_vld\" :  \"" << mux_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"iy_V_ap_vld\" :  \"" << iy_V_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"qy_V_ap_vld\" :  \"" << qy_V_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

