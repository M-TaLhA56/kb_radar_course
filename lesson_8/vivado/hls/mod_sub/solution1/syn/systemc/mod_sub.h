// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _mod_sub_HH_
#define _mod_sub_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "mod_sub_entry23.h"
#include "freqm.h"
#include "phasm.h"
#include "o_mux.h"
#include "fifo_w32_d2_A.h"
#include "fifo_w8_d2_A.h"
#include "fifo_w2_d3_A.h"
#include "fifo_w1_d2_A.h"
#include "start_for_freqm_U0.h"
#include "start_for_phasm_U0.h"

namespace ap_rtl {

struct mod_sub : public sc_module {
    // Port declarations 18
    sc_in< sc_lv<32> > ix_V;
    sc_in< sc_lv<32> > qx_V;
    sc_in< sc_lv<8> > i_mod_V;
    sc_in< sc_lv<8> > q_mod_V;
    sc_out< sc_lv<32> > iy_V;
    sc_out< sc_lv<32> > qy_V;
    sc_in< sc_lv<8> > period_V;
    sc_in< sc_lv<2> > mux_V;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ix_V_ap_vld;
    sc_in< sc_logic > qx_V_ap_vld;
    sc_in< sc_logic > i_mod_V_ap_vld;
    sc_in< sc_logic > q_mod_V_ap_vld;
    sc_in< sc_logic > period_V_ap_vld;
    sc_in< sc_logic > mux_V_ap_vld;
    sc_out< sc_logic > iy_V_ap_vld;
    sc_out< sc_logic > qy_V_ap_vld;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    mod_sub(sc_module_name name);
    SC_HAS_PROCESS(mod_sub);

    ~mod_sub();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    mod_sub_entry23* mod_sub_entry23_U0;
    freqm* freqm_U0;
    phasm* phasm_U0;
    o_mux* o_mux_U0;
    fifo_w32_d2_A* ix_V_c_U;
    fifo_w32_d2_A* qx_V_c_U;
    fifo_w8_d2_A* i_mod_V_c_U;
    fifo_w8_d2_A* q_mod_V_c_U;
    fifo_w8_d2_A* period_V_c_U;
    fifo_w2_d3_A* mux_V_c_U;
    fifo_w32_d2_A* ix_V_c2_U;
    fifo_w32_d2_A* qx_V_c3_U;
    fifo_w32_d2_A* i_fr_V_U;
    fifo_w32_d2_A* q_fr_V_U;
    fifo_w1_d2_A* flag_U;
    start_for_freqm_U0* start_for_freqm_U0_U;
    start_for_phasm_U0* start_for_phasm_U0_U;
    sc_signal< sc_logic > mod_sub_entry23_U0_ap_start;
    sc_signal< sc_logic > mod_sub_entry23_U0_start_full_n;
    sc_signal< sc_logic > mod_sub_entry23_U0_ap_done;
    sc_signal< sc_logic > mod_sub_entry23_U0_ap_continue;
    sc_signal< sc_logic > mod_sub_entry23_U0_ap_idle;
    sc_signal< sc_logic > mod_sub_entry23_U0_ap_ready;
    sc_signal< sc_logic > mod_sub_entry23_U0_start_out;
    sc_signal< sc_logic > mod_sub_entry23_U0_start_write;
    sc_signal< sc_lv<32> > mod_sub_entry23_U0_ix_V_out_din;
    sc_signal< sc_logic > mod_sub_entry23_U0_ix_V_out_write;
    sc_signal< sc_lv<32> > mod_sub_entry23_U0_qx_V_out_din;
    sc_signal< sc_logic > mod_sub_entry23_U0_qx_V_out_write;
    sc_signal< sc_lv<8> > mod_sub_entry23_U0_i_mod_V_out_din;
    sc_signal< sc_logic > mod_sub_entry23_U0_i_mod_V_out_write;
    sc_signal< sc_lv<8> > mod_sub_entry23_U0_q_mod_V_out_din;
    sc_signal< sc_logic > mod_sub_entry23_U0_q_mod_V_out_write;
    sc_signal< sc_lv<8> > mod_sub_entry23_U0_period_V_out_din;
    sc_signal< sc_logic > mod_sub_entry23_U0_period_V_out_write;
    sc_signal< sc_lv<2> > mod_sub_entry23_U0_mux_V_out_din;
    sc_signal< sc_logic > mod_sub_entry23_U0_mux_V_out_write;
    sc_signal< sc_logic > freqm_U0_ap_start;
    sc_signal< sc_logic > freqm_U0_ap_done;
    sc_signal< sc_logic > freqm_U0_ap_continue;
    sc_signal< sc_logic > freqm_U0_ap_idle;
    sc_signal< sc_logic > freqm_U0_ap_ready;
    sc_signal< sc_logic > freqm_U0_ix_V_read;
    sc_signal< sc_logic > freqm_U0_qx_V_read;
    sc_signal< sc_logic > freqm_U0_i_mod_V_read;
    sc_signal< sc_logic > freqm_U0_q_mod_V_read;
    sc_signal< sc_lv<32> > freqm_U0_ix_V_out_din;
    sc_signal< sc_logic > freqm_U0_ix_V_out_write;
    sc_signal< sc_lv<32> > freqm_U0_qx_V_out_din;
    sc_signal< sc_logic > freqm_U0_qx_V_out_write;
    sc_signal< sc_lv<32> > freqm_U0_ap_return_0;
    sc_signal< sc_lv<32> > freqm_U0_ap_return_1;
    sc_signal< sc_logic > ap_channel_done_q_fr_V;
    sc_signal< sc_logic > q_fr_V_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_q_fr_V;
    sc_signal< sc_logic > ap_sync_channel_write_q_fr_V;
    sc_signal< sc_logic > ap_channel_done_i_fr_V;
    sc_signal< sc_logic > i_fr_V_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_i_fr_V;
    sc_signal< sc_logic > ap_sync_channel_write_i_fr_V;
    sc_signal< sc_logic > phasm_U0_ap_start;
    sc_signal< sc_logic > phasm_U0_ap_done;
    sc_signal< sc_logic > phasm_U0_ap_continue;
    sc_signal< sc_logic > phasm_U0_ap_idle;
    sc_signal< sc_logic > phasm_U0_ap_ready;
    sc_signal< sc_logic > phasm_U0_period_V_read;
    sc_signal< sc_lv<1> > phasm_U0_ap_return;
    sc_signal< sc_logic > ap_channel_done_flag;
    sc_signal< sc_logic > flag_full_n;
    sc_signal< sc_logic > o_mux_U0_ap_start;
    sc_signal< sc_logic > o_mux_U0_ap_done;
    sc_signal< sc_logic > o_mux_U0_ap_continue;
    sc_signal< sc_logic > o_mux_U0_ap_idle;
    sc_signal< sc_logic > o_mux_U0_ap_ready;
    sc_signal< sc_logic > o_mux_U0_ix_V_read;
    sc_signal< sc_logic > o_mux_U0_qx_V_read;
    sc_signal< sc_lv<32> > o_mux_U0_iy_V;
    sc_signal< sc_logic > o_mux_U0_iy_V_ap_vld;
    sc_signal< sc_lv<32> > o_mux_U0_qy_V;
    sc_signal< sc_logic > o_mux_U0_qy_V_ap_vld;
    sc_signal< sc_logic > o_mux_U0_flag;
    sc_signal< sc_logic > o_mux_U0_mux_V_read;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_logic > ix_V_c_full_n;
    sc_signal< sc_lv<32> > ix_V_c_dout;
    sc_signal< sc_logic > ix_V_c_empty_n;
    sc_signal< sc_logic > qx_V_c_full_n;
    sc_signal< sc_lv<32> > qx_V_c_dout;
    sc_signal< sc_logic > qx_V_c_empty_n;
    sc_signal< sc_logic > i_mod_V_c_full_n;
    sc_signal< sc_lv<8> > i_mod_V_c_dout;
    sc_signal< sc_logic > i_mod_V_c_empty_n;
    sc_signal< sc_logic > q_mod_V_c_full_n;
    sc_signal< sc_lv<8> > q_mod_V_c_dout;
    sc_signal< sc_logic > q_mod_V_c_empty_n;
    sc_signal< sc_logic > period_V_c_full_n;
    sc_signal< sc_lv<8> > period_V_c_dout;
    sc_signal< sc_logic > period_V_c_empty_n;
    sc_signal< sc_logic > mux_V_c_full_n;
    sc_signal< sc_lv<2> > mux_V_c_dout;
    sc_signal< sc_logic > mux_V_c_empty_n;
    sc_signal< sc_logic > ix_V_c2_full_n;
    sc_signal< sc_lv<32> > ix_V_c2_dout;
    sc_signal< sc_logic > ix_V_c2_empty_n;
    sc_signal< sc_logic > qx_V_c3_full_n;
    sc_signal< sc_lv<32> > qx_V_c3_dout;
    sc_signal< sc_logic > qx_V_c3_empty_n;
    sc_signal< sc_lv<32> > i_fr_V_dout;
    sc_signal< sc_logic > i_fr_V_empty_n;
    sc_signal< sc_lv<32> > q_fr_V_dout;
    sc_signal< sc_logic > q_fr_V_empty_n;
    sc_signal< sc_lv<1> > flag_dout;
    sc_signal< sc_logic > flag_empty_n;
    sc_signal< sc_lv<1> > start_for_freqm_U0_din;
    sc_signal< sc_logic > start_for_freqm_U0_full_n;
    sc_signal< sc_lv<1> > start_for_freqm_U0_dout;
    sc_signal< sc_logic > start_for_freqm_U0_empty_n;
    sc_signal< sc_lv<1> > start_for_phasm_U0_din;
    sc_signal< sc_logic > start_for_phasm_U0_full_n;
    sc_signal< sc_lv<1> > start_for_phasm_U0_dout;
    sc_signal< sc_logic > start_for_phasm_U0_empty_n;
    sc_signal< sc_logic > freqm_U0_start_full_n;
    sc_signal< sc_logic > freqm_U0_start_write;
    sc_signal< sc_logic > phasm_U0_start_full_n;
    sc_signal< sc_logic > phasm_U0_start_write;
    sc_signal< sc_logic > o_mux_U0_start_full_n;
    sc_signal< sc_logic > o_mux_U0_start_write;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_channel_done_flag();
    void thread_ap_channel_done_i_fr_V();
    void thread_ap_channel_done_q_fr_V();
    void thread_ap_sync_channel_write_i_fr_V();
    void thread_ap_sync_channel_write_q_fr_V();
    void thread_ap_sync_continue();
    void thread_freqm_U0_ap_continue();
    void thread_freqm_U0_ap_start();
    void thread_freqm_U0_start_full_n();
    void thread_freqm_U0_start_write();
    void thread_iy_V();
    void thread_iy_V_ap_vld();
    void thread_mod_sub_entry23_U0_ap_continue();
    void thread_mod_sub_entry23_U0_ap_start();
    void thread_mod_sub_entry23_U0_start_full_n();
    void thread_o_mux_U0_ap_continue();
    void thread_o_mux_U0_ap_start();
    void thread_o_mux_U0_flag();
    void thread_o_mux_U0_start_full_n();
    void thread_o_mux_U0_start_write();
    void thread_phasm_U0_ap_continue();
    void thread_phasm_U0_ap_start();
    void thread_phasm_U0_start_full_n();
    void thread_phasm_U0_start_write();
    void thread_qy_V();
    void thread_qy_V_ap_vld();
    void thread_start_for_freqm_U0_din();
    void thread_start_for_phasm_U0_din();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
