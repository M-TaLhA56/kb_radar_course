// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "phasm.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic phasm::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic phasm::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<1> phasm::ap_ST_fsm_state1 = "1";
const sc_lv<32> phasm::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<8> phasm::ap_const_lv8_0 = "00000000";
const sc_lv<1> phasm::ap_const_lv1_0 = "0";
const sc_lv<1> phasm::ap_const_lv1_1 = "1";
const sc_lv<8> phasm::ap_const_lv8_1 = "1";
const bool phasm::ap_const_boolean_1 = true;

phasm::phasm(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln700_fu_84_p2);
    sensitive << ( count_V );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( period_V_empty_n );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( period_V_empty_n );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_phi_mux_flag_write_assign_phi_fu_53_p4);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( tmp );
    sensitive << ( xor_ln48_fu_91_p2 );
    sensitive << ( icmp_ln879_fu_73_p2 );

    SC_METHOD(thread_ap_phi_mux_storemerge_i_phi_fu_62_p4);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( icmp_ln879_fu_73_p2 );
    sensitive << ( add_ln700_fu_84_p2 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( period_V_empty_n );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( period_V_empty_n );
    sensitive << ( ap_phi_mux_flag_write_assign_phi_fu_53_p4 );
    sensitive << ( ap_return_preg );

    SC_METHOD(thread_icmp_ln879_fu_73_p2);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( period_V_dout );
    sensitive << ( period_V_empty_n );
    sensitive << ( count_V );

    SC_METHOD(thread_period_V_blk_n);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( period_V_empty_n );

    SC_METHOD(thread_period_V_read);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( period_V_empty_n );

    SC_METHOD(thread_xor_ln48_fu_91_p2);
    sensitive << ( tmp );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( period_V_empty_n );

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "1";
    count_V = "00000000";
    tmp = "0";
    ap_return_preg = "0";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "phasm_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, period_V_dout, "(port)period_V_dout");
    sc_trace(mVcdFile, period_V_empty_n, "(port)period_V_empty_n");
    sc_trace(mVcdFile, period_V_read, "(port)period_V_read");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, count_V, "count_V");
    sc_trace(mVcdFile, tmp, "tmp");
    sc_trace(mVcdFile, period_V_blk_n, "period_V_blk_n");
    sc_trace(mVcdFile, xor_ln48_fu_91_p2, "xor_ln48_fu_91_p2");
    sc_trace(mVcdFile, ap_phi_mux_flag_write_assign_phi_fu_53_p4, "ap_phi_mux_flag_write_assign_phi_fu_53_p4");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, icmp_ln879_fu_73_p2, "icmp_ln879_fu_73_p2");
    sc_trace(mVcdFile, ap_phi_mux_storemerge_i_phi_fu_62_p4, "ap_phi_mux_storemerge_i_phi_fu_62_p4");
    sc_trace(mVcdFile, add_ln700_fu_84_p2, "add_ln700_fu_84_p2");
    sc_trace(mVcdFile, ap_return_preg, "ap_return_preg");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

phasm::~phasm() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void phasm::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, period_V_empty_n.read())))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_return_preg = ap_const_lv1_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, period_V_empty_n.read())))) {
            ap_return_preg = ap_phi_mux_flag_write_assign_phi_fu_53_p4.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, period_V_empty_n.read())))) {
        count_V = ap_phi_mux_storemerge_i_phi_fu_62_p4.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, period_V_empty_n.read())) && esl_seteq<1,1,1>(icmp_ln879_fu_73_p2.read(), ap_const_lv1_1))) {
        tmp = xor_ln48_fu_91_p2.read();
    }
}

void phasm::thread_add_ln700_fu_84_p2() {
    add_ln700_fu_84_p2 = (!count_V.read().is_01() || !ap_const_lv8_1.is_01())? sc_lv<8>(): (sc_biguint<8>(count_V.read()) + sc_biguint<8>(ap_const_lv8_1));
}

void phasm::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void phasm::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, period_V_empty_n.read()));
}

void phasm::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, period_V_empty_n.read())))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void phasm::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void phasm::thread_ap_phi_mux_flag_write_assign_phi_fu_53_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_73_p2.read())) {
            ap_phi_mux_flag_write_assign_phi_fu_53_p4 = tmp.read();
        } else if (esl_seteq<1,1,1>(icmp_ln879_fu_73_p2.read(), ap_const_lv1_1)) {
            ap_phi_mux_flag_write_assign_phi_fu_53_p4 = xor_ln48_fu_91_p2.read();
        } else {
            ap_phi_mux_flag_write_assign_phi_fu_53_p4 = "X";
        }
    } else {
        ap_phi_mux_flag_write_assign_phi_fu_53_p4 = "X";
    }
}

void phasm::thread_ap_phi_mux_storemerge_i_phi_fu_62_p4() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        if (esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln879_fu_73_p2.read())) {
            ap_phi_mux_storemerge_i_phi_fu_62_p4 = add_ln700_fu_84_p2.read();
        } else if (esl_seteq<1,1,1>(icmp_ln879_fu_73_p2.read(), ap_const_lv1_1)) {
            ap_phi_mux_storemerge_i_phi_fu_62_p4 = ap_const_lv8_0;
        } else {
            ap_phi_mux_storemerge_i_phi_fu_62_p4 =  (sc_lv<8>) ("XXXXXXXX");
        }
    } else {
        ap_phi_mux_storemerge_i_phi_fu_62_p4 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void phasm::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, period_V_empty_n.read())))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void phasm::thread_ap_return() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, period_V_empty_n.read())))) {
        ap_return = ap_phi_mux_flag_write_assign_phi_fu_53_p4.read();
    } else {
        ap_return = ap_return_preg.read();
    }
}

void phasm::thread_icmp_ln879_fu_73_p2() {
    icmp_ln879_fu_73_p2 = (!count_V.read().is_01() || !period_V_dout.read().is_01())? sc_lv<1>(): sc_lv<1>(count_V.read() == period_V_dout.read());
}

void phasm::thread_period_V_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        period_V_blk_n = period_V_empty_n.read();
    } else {
        period_V_blk_n = ap_const_logic_1;
    }
}

void phasm::thread_period_V_read() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1) || esl_seteq<1,1,1>(ap_const_logic_0, period_V_empty_n.read())))) {
        period_V_read = ap_const_logic_1;
    } else {
        period_V_read = ap_const_logic_0;
    }
}

void phasm::thread_xor_ln48_fu_91_p2() {
    xor_ln48_fu_91_p2 = (tmp.read() ^ ap_const_lv1_1);
}

void phasm::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            ap_NS_fsm = ap_ST_fsm_state1;
break;
        default : 
            ap_NS_fsm = "X";
            break;
    }
}

}

