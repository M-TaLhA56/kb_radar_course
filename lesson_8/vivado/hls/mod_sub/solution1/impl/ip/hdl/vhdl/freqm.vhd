-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity freqm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ix_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ix_V_empty_n : IN STD_LOGIC;
    ix_V_read : OUT STD_LOGIC;
    qx_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    qx_V_empty_n : IN STD_LOGIC;
    qx_V_read : OUT STD_LOGIC;
    i_mod_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    i_mod_V_empty_n : IN STD_LOGIC;
    i_mod_V_read : OUT STD_LOGIC;
    q_mod_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
    q_mod_V_empty_n : IN STD_LOGIC;
    q_mod_V_read : OUT STD_LOGIC;
    ix_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    ix_V_out_full_n : IN STD_LOGIC;
    ix_V_out_write : OUT STD_LOGIC;
    qx_V_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
    qx_V_out_full_n : IN STD_LOGIC;
    qx_V_out_write : OUT STD_LOGIC;
    ap_return_0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of freqm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ix_V_blk_n : STD_LOGIC;
    signal qx_V_blk_n : STD_LOGIC;
    signal i_mod_V_blk_n : STD_LOGIC;
    signal q_mod_V_blk_n : STD_LOGIC;
    signal ix_V_out_blk_n : STD_LOGIC;
    signal qx_V_out_blk_n : STD_LOGIC;
    signal ap_block_state1 : BOOLEAN;
    signal mul_ln68_fu_144_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_fu_144_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln68_fu_140_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_1_fu_154_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_1_fu_154_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sext_ln68_1_fu_150_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_fu_144_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_1_fu_154_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_2_fu_166_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_2_fu_166_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln68_3_fu_172_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_3_fu_172_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal mul_ln68_2_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln68_3_fu_172_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_fu_160_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln68_fu_178_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_return_0_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_return_1_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_return_0_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_0_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_0_preg <= sub_ln68_fu_160_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_return_1_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_1_preg <= ap_const_lv32_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_return_1_preg <= add_ln68_fu_178_p2;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, i_mod_V_empty_n, q_mod_V_empty_n, ix_V_out_full_n, qx_V_out_full_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    add_ln68_fu_178_p2 <= std_logic_vector(unsigned(mul_ln68_2_fu_166_p2) + unsigned(mul_ln68_3_fu_172_p2));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, ix_V_empty_n, qx_V_empty_n, i_mod_V_empty_n, q_mod_V_empty_n, ix_V_out_full_n, qx_V_out_full_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, i_mod_V_empty_n, q_mod_V_empty_n, ix_V_out_full_n, qx_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, i_mod_V_empty_n, q_mod_V_empty_n, ix_V_out_full_n, qx_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_0_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, i_mod_V_empty_n, q_mod_V_empty_n, ix_V_out_full_n, qx_V_out_full_n, sub_ln68_fu_160_p2, ap_return_0_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_0 <= sub_ln68_fu_160_p2;
        else 
            ap_return_0 <= ap_return_0_preg;
        end if; 
    end process;


    ap_return_1_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, i_mod_V_empty_n, q_mod_V_empty_n, ix_V_out_full_n, qx_V_out_full_n, add_ln68_fu_178_p2, ap_return_1_preg)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_return_1 <= add_ln68_fu_178_p2;
        else 
            ap_return_1 <= ap_return_1_preg;
        end if; 
    end process;


    i_mod_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, i_mod_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_mod_V_blk_n <= i_mod_V_empty_n;
        else 
            i_mod_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    i_mod_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, i_mod_V_empty_n, q_mod_V_empty_n, ix_V_out_full_n, qx_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            i_mod_V_read <= ap_const_logic_1;
        else 
            i_mod_V_read <= ap_const_logic_0;
        end if; 
    end process;


    ix_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ix_V_blk_n <= ix_V_empty_n;
        else 
            ix_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ix_V_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ix_V_out_blk_n <= ix_V_out_full_n;
        else 
            ix_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    ix_V_out_din <= ix_V_dout;

    ix_V_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, i_mod_V_empty_n, q_mod_V_empty_n, ix_V_out_full_n, qx_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ix_V_out_write <= ap_const_logic_1;
        else 
            ix_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    ix_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, i_mod_V_empty_n, q_mod_V_empty_n, ix_V_out_full_n, qx_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ix_V_read <= ap_const_logic_1;
        else 
            ix_V_read <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln68_1_fu_154_p0 <= qx_V_dout;
    mul_ln68_1_fu_154_p1 <= sext_ln68_1_fu_150_p1(8 - 1 downto 0);
    mul_ln68_1_fu_154_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln68_1_fu_154_p0) * signed(mul_ln68_1_fu_154_p1))), 32));
    mul_ln68_2_fu_166_p0 <= ix_V_dout;
    mul_ln68_2_fu_166_p1 <= sext_ln68_1_fu_150_p1(8 - 1 downto 0);
    mul_ln68_2_fu_166_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln68_2_fu_166_p0) * signed(mul_ln68_2_fu_166_p1))), 32));
    mul_ln68_3_fu_172_p0 <= qx_V_dout;
    mul_ln68_3_fu_172_p1 <= sext_ln68_fu_140_p1(8 - 1 downto 0);
    mul_ln68_3_fu_172_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln68_3_fu_172_p0) * signed(mul_ln68_3_fu_172_p1))), 32));
    mul_ln68_fu_144_p0 <= ix_V_dout;
    mul_ln68_fu_144_p1 <= sext_ln68_fu_140_p1(8 - 1 downto 0);
    mul_ln68_fu_144_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(mul_ln68_fu_144_p0) * signed(mul_ln68_fu_144_p1))), 32));

    q_mod_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, q_mod_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            q_mod_V_blk_n <= q_mod_V_empty_n;
        else 
            q_mod_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    q_mod_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, i_mod_V_empty_n, q_mod_V_empty_n, ix_V_out_full_n, qx_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            q_mod_V_read <= ap_const_logic_1;
        else 
            q_mod_V_read <= ap_const_logic_0;
        end if; 
    end process;


    qx_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, qx_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            qx_V_blk_n <= qx_V_empty_n;
        else 
            qx_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    qx_V_out_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, qx_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            qx_V_out_blk_n <= qx_V_out_full_n;
        else 
            qx_V_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    qx_V_out_din <= qx_V_dout;

    qx_V_out_write_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, i_mod_V_empty_n, q_mod_V_empty_n, ix_V_out_full_n, qx_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            qx_V_out_write <= ap_const_logic_1;
        else 
            qx_V_out_write <= ap_const_logic_0;
        end if; 
    end process;


    qx_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, i_mod_V_empty_n, q_mod_V_empty_n, ix_V_out_full_n, qx_V_out_full_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (qx_V_out_full_n = ap_const_logic_0) or (ix_V_out_full_n = ap_const_logic_0) or (q_mod_V_empty_n = ap_const_logic_0) or (i_mod_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            qx_V_read <= ap_const_logic_1;
        else 
            qx_V_read <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln68_1_fu_150_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_mod_V_dout),32));

        sext_ln68_fu_140_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(q_mod_V_dout),32));

    sub_ln68_fu_160_p2 <= std_logic_vector(unsigned(mul_ln68_fu_144_p2) - unsigned(mul_ln68_1_fu_154_p2));
end behav;
