-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity o_mux is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ix_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    ix_V_empty_n : IN STD_LOGIC;
    ix_V_read : OUT STD_LOGIC;
    qx_V_dout : IN STD_LOGIC_VECTOR (31 downto 0);
    qx_V_empty_n : IN STD_LOGIC;
    qx_V_read : OUT STD_LOGIC;
    p_read : IN STD_LOGIC_VECTOR (31 downto 0);
    p_read1 : IN STD_LOGIC_VECTOR (31 downto 0);
    iy_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    iy_V_ap_vld : OUT STD_LOGIC;
    qy_V : OUT STD_LOGIC_VECTOR (31 downto 0);
    qy_V_ap_vld : OUT STD_LOGIC;
    flag : IN STD_LOGIC;
    mux_V_dout : IN STD_LOGIC_VECTOR (1 downto 0);
    mux_V_empty_n : IN STD_LOGIC;
    mux_V_read : OUT STD_LOGIC );
end;


architecture behav of o_mux is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";

    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ix_V_blk_n : STD_LOGIC;
    signal qx_V_blk_n : STD_LOGIC;
    signal mux_V_blk_n : STD_LOGIC;
    signal sub_ln68_3_fu_169_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge_i_i_phi_fu_143_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal mux_V_read_read_fu_114_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal flag_read_read_fu_84_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln68_1_fu_183_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_storemerge1_i_i_phi_fu_154_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sub_ln68_2_fu_162_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal iy_V_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal sub_ln68_fu_176_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal qy_V_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_60 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    iy_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                iy_V_preg <= ap_const_lv32_0;
            else
                if (((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (flag_read_read_fu_84_p2 = ap_const_lv1_1) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    iy_V_preg <= ix_V_dout;
                elsif ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (flag_read_read_fu_84_p2 = ap_const_lv1_0) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    iy_V_preg <= sub_ln68_fu_176_p2;
                elsif (((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (flag_read_read_fu_84_p2 = ap_const_lv1_1) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
                    iy_V_preg <= p_read;
                elsif ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (flag_read_read_fu_84_p2 = ap_const_lv1_0) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    iy_V_preg <= sub_ln68_2_fu_162_p2;
                end if; 
            end if;
        end if;
    end process;


    qy_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                qy_V_preg <= ap_const_lv32_0;
            else
                if ((ap_const_boolean_1 = ap_condition_60)) then
                    if ((mux_V_read_read_fu_114_p2 = ap_const_lv2_0)) then 
                        qy_V_preg <= qx_V_dout;
                    elsif ((mux_V_read_read_fu_114_p2 = ap_const_lv2_1)) then 
                        qy_V_preg <= ap_phi_mux_storemerge1_i_i_phi_fu_154_p4;
                    elsif ((mux_V_read_read_fu_114_p2 = ap_const_lv2_2)) then 
                        qy_V_preg <= p_read1;
                    elsif ((mux_V_read_read_fu_114_p2 = ap_const_lv2_3)) then 
                        qy_V_preg <= ap_phi_mux_storemerge_i_i_phi_fu_143_p4;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_done_reg, ap_CS_fsm, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, mux_V_empty_n)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, ap_done_reg, ix_V_empty_n, qx_V_empty_n, mux_V_empty_n)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1));
    end process;


    ap_condition_60_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, mux_V_empty_n)
    begin
                ap_condition_60 <= (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1));
    end process;


    ap_done_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, mux_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_done_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge1_i_i_phi_fu_154_p4_assign_proc : process(ap_CS_fsm_state1, qx_V_dout, mux_V_read_read_fu_114_p2, flag_read_read_fu_84_p2, sub_ln68_1_fu_183_p2)
    begin
        if (((mux_V_read_read_fu_114_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((flag_read_read_fu_84_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge1_i_i_phi_fu_154_p4 <= qx_V_dout;
            elsif ((flag_read_read_fu_84_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge1_i_i_phi_fu_154_p4 <= sub_ln68_1_fu_183_p2;
            else 
                ap_phi_mux_storemerge1_i_i_phi_fu_154_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge1_i_i_phi_fu_154_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_phi_mux_storemerge_i_i_phi_fu_143_p4_assign_proc : process(ap_CS_fsm_state1, p_read1, sub_ln68_3_fu_169_p2, mux_V_read_read_fu_114_p2, flag_read_read_fu_84_p2)
    begin
        if (((mux_V_read_read_fu_114_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
            if ((flag_read_read_fu_84_p2 = ap_const_lv1_1)) then 
                ap_phi_mux_storemerge_i_i_phi_fu_143_p4 <= p_read1;
            elsif ((flag_read_read_fu_84_p2 = ap_const_lv1_0)) then 
                ap_phi_mux_storemerge_i_i_phi_fu_143_p4 <= sub_ln68_3_fu_169_p2;
            else 
                ap_phi_mux_storemerge_i_i_phi_fu_143_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_storemerge_i_i_phi_fu_143_p4 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, mux_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    flag_read_read_fu_84_p2 <= (0=>flag, others=>'-');

    ix_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ix_V_blk_n <= ix_V_empty_n;
        else 
            ix_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    ix_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, mux_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ix_V_read <= ap_const_logic_1;
        else 
            ix_V_read <= ap_const_logic_0;
        end if; 
    end process;


    iy_V_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_dout, ix_V_empty_n, qx_V_empty_n, p_read, mux_V_empty_n, mux_V_read_read_fu_114_p2, flag_read_read_fu_84_p2, sub_ln68_2_fu_162_p2, iy_V_preg, sub_ln68_fu_176_p2)
    begin
        if (not((ap_const_boolean_1 = ap_const_boolean_1))) then 
            iy_V <= ap_const_lv32_0;
        elsif (((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (flag_read_read_fu_84_p2 = ap_const_lv1_1) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            iy_V <= ix_V_dout;
        elsif ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (flag_read_read_fu_84_p2 = ap_const_lv1_0) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            iy_V <= sub_ln68_fu_176_p2;
        elsif (((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (flag_read_read_fu_84_p2 = ap_const_lv1_1) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            iy_V <= p_read;
        elsif ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (flag_read_read_fu_84_p2 = ap_const_lv1_0) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            iy_V <= sub_ln68_2_fu_162_p2;
        else 
            iy_V <= iy_V_preg;
        end if; 
    end process;


    iy_V_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, mux_V_empty_n, mux_V_read_read_fu_114_p2, flag_read_read_fu_84_p2)
    begin
        if (((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (flag_read_read_fu_84_p2 = ap_const_lv1_1) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (flag_read_read_fu_84_p2 = ap_const_lv1_0) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (flag_read_read_fu_84_p2 = ap_const_lv1_1) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (flag_read_read_fu_84_p2 = ap_const_lv1_0) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            iy_V_ap_vld <= ap_const_logic_1;
        else 
            iy_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    mux_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, mux_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_V_blk_n <= mux_V_empty_n;
        else 
            mux_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    mux_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, mux_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            mux_V_read <= ap_const_logic_1;
        else 
            mux_V_read <= ap_const_logic_0;
        end if; 
    end process;

    mux_V_read_read_fu_114_p2 <= mux_V_dout;

    qx_V_blk_n_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, qx_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            qx_V_blk_n <= qx_V_empty_n;
        else 
            qx_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    qx_V_read_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, mux_V_empty_n)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            qx_V_read <= ap_const_logic_1;
        else 
            qx_V_read <= ap_const_logic_0;
        end if; 
    end process;


    qy_V_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_dout, qx_V_empty_n, p_read1, mux_V_empty_n, ap_phi_mux_storemerge_i_i_phi_fu_143_p4, mux_V_read_read_fu_114_p2, ap_phi_mux_storemerge1_i_i_phi_fu_154_p4, qy_V_preg)
    begin
        if (not((ap_const_boolean_1 = ap_const_boolean_1))) then 
            qy_V <= ap_const_lv32_0;
        elsif ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            qy_V <= qx_V_dout;
        elsif ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            qy_V <= ap_phi_mux_storemerge1_i_i_phi_fu_154_p4;
        elsif ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            qy_V <= p_read1;
        elsif ((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            qy_V <= ap_phi_mux_storemerge_i_i_phi_fu_143_p4;
        else 
            qy_V <= qy_V_preg;
        end if; 
    end process;


    qy_V_ap_vld_assign_proc : process(ap_start, ap_done_reg, ap_CS_fsm_state1, ix_V_empty_n, qx_V_empty_n, mux_V_empty_n, mux_V_read_read_fu_114_p2)
    begin
        if (((not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_2) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_1) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (not(((ap_start = ap_const_logic_0) or (mux_V_empty_n = ap_const_logic_0) or (qx_V_empty_n = ap_const_logic_0) or (ix_V_empty_n = ap_const_logic_0) or (ap_done_reg = ap_const_logic_1))) and (mux_V_read_read_fu_114_p2 = ap_const_lv2_3) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            qy_V_ap_vld <= ap_const_logic_1;
        else 
            qy_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    sub_ln68_1_fu_183_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(qx_V_dout));
    sub_ln68_2_fu_162_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_read));
    sub_ln68_3_fu_169_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(p_read1));
    sub_ln68_fu_176_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(ix_V_dout));
end behav;
