-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2019.1.3
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity up_conv is
port (
    x_i : IN STD_LOGIC_VECTOR (31 downto 0);
    x_q : IN STD_LOGIC_VECTOR (31 downto 0);
    ref_i_V : IN STD_LOGIC_VECTOR (7 downto 0);
    ref_q_V : IN STD_LOGIC_VECTOR (7 downto 0);
    y : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    x_i_ap_vld : IN STD_LOGIC;
    x_q_ap_vld : IN STD_LOGIC;
    ref_i_V_ap_vld : IN STD_LOGIC;
    ref_q_V_ap_vld : IN STD_LOGIC;
    y_ap_vld : OUT STD_LOGIC );
end;


architecture behav of up_conv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "up_conv,hls_ip_2019_1_3,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045-ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.172000,HLS_SYN_LAT=5,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=236,HLS_SYN_FF=10113,HLS_SYN_LUT=7214,HLS_VERSION=2019_1_3}";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';

    signal up_conv_entry14_U0_ap_start : STD_LOGIC;
    signal up_conv_entry14_U0_start_full_n : STD_LOGIC;
    signal up_conv_entry14_U0_ap_done : STD_LOGIC;
    signal up_conv_entry14_U0_ap_continue : STD_LOGIC;
    signal up_conv_entry14_U0_ap_idle : STD_LOGIC;
    signal up_conv_entry14_U0_ap_ready : STD_LOGIC;
    signal up_conv_entry14_U0_start_out : STD_LOGIC;
    signal up_conv_entry14_U0_start_write : STD_LOGIC;
    signal up_conv_entry14_U0_x_i_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal up_conv_entry14_U0_x_i_out_write : STD_LOGIC;
    signal up_conv_entry14_U0_x_q_out_din : STD_LOGIC_VECTOR (31 downto 0);
    signal up_conv_entry14_U0_x_q_out_write : STD_LOGIC;
    signal up_conv_entry14_U0_ref_i_V_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal up_conv_entry14_U0_ref_i_V_out_write : STD_LOGIC;
    signal up_conv_entry14_U0_ref_q_V_out_din : STD_LOGIC_VECTOR (7 downto 0);
    signal up_conv_entry14_U0_ref_q_V_out_write : STD_LOGIC;
    signal fir_filter_a_U0_ap_start : STD_LOGIC;
    signal fir_filter_a_U0_ap_done : STD_LOGIC;
    signal fir_filter_a_U0_ap_continue : STD_LOGIC;
    signal fir_filter_a_U0_ap_idle : STD_LOGIC;
    signal fir_filter_a_U0_ap_ready : STD_LOGIC;
    signal fir_filter_a_U0_x_read : STD_LOGIC;
    signal fir_filter_a_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_i_tmp : STD_LOGIC;
    signal i_tmp_full_n : STD_LOGIC;
    signal fir_filter_b_U0_ap_start : STD_LOGIC;
    signal fir_filter_b_U0_ap_done : STD_LOGIC;
    signal fir_filter_b_U0_ap_continue : STD_LOGIC;
    signal fir_filter_b_U0_ap_idle : STD_LOGIC;
    signal fir_filter_b_U0_ap_ready : STD_LOGIC;
    signal fir_filter_b_U0_x_read : STD_LOGIC;
    signal fir_filter_b_U0_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_q_tmp : STD_LOGIC;
    signal q_tmp_full_n : STD_LOGIC;
    signal iq_mult_U0_ap_start : STD_LOGIC;
    signal iq_mult_U0_ap_done : STD_LOGIC;
    signal iq_mult_U0_ap_continue : STD_LOGIC;
    signal iq_mult_U0_ap_idle : STD_LOGIC;
    signal iq_mult_U0_ap_ready : STD_LOGIC;
    signal iq_mult_U0_ref_i_V_read : STD_LOGIC;
    signal iq_mult_U0_ref_q_V_read : STD_LOGIC;
    signal iq_mult_U0_y : STD_LOGIC_VECTOR (31 downto 0);
    signal iq_mult_U0_y_ap_vld : STD_LOGIC;
    signal ap_sync_continue : STD_LOGIC;
    signal x_i_c_full_n : STD_LOGIC;
    signal x_i_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal x_i_c_empty_n : STD_LOGIC;
    signal x_q_c_full_n : STD_LOGIC;
    signal x_q_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal x_q_c_empty_n : STD_LOGIC;
    signal ref_i_V_c_full_n : STD_LOGIC;
    signal ref_i_V_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ref_i_V_c_empty_n : STD_LOGIC;
    signal ref_q_V_c_full_n : STD_LOGIC;
    signal ref_q_V_c_dout : STD_LOGIC_VECTOR (7 downto 0);
    signal ref_q_V_c_empty_n : STD_LOGIC;
    signal i_tmp_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal i_tmp_empty_n : STD_LOGIC;
    signal q_tmp_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal q_tmp_empty_n : STD_LOGIC;
    signal start_for_fir_filter_a_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fir_filter_a_U0_full_n : STD_LOGIC;
    signal start_for_fir_filter_a_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fir_filter_a_U0_empty_n : STD_LOGIC;
    signal start_for_fir_filter_b_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fir_filter_b_U0_full_n : STD_LOGIC;
    signal start_for_fir_filter_b_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_fir_filter_b_U0_empty_n : STD_LOGIC;
    signal fir_filter_a_U0_start_full_n : STD_LOGIC;
    signal fir_filter_a_U0_start_write : STD_LOGIC;
    signal fir_filter_b_U0_start_full_n : STD_LOGIC;
    signal fir_filter_b_U0_start_write : STD_LOGIC;
    signal iq_mult_U0_start_full_n : STD_LOGIC;
    signal iq_mult_U0_start_write : STD_LOGIC;

    component up_conv_entry14 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        x_i : IN STD_LOGIC_VECTOR (31 downto 0);
        x_i_ap_vld : IN STD_LOGIC;
        x_q : IN STD_LOGIC_VECTOR (31 downto 0);
        x_q_ap_vld : IN STD_LOGIC;
        ref_i_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ref_i_V_ap_vld : IN STD_LOGIC;
        ref_q_V : IN STD_LOGIC_VECTOR (7 downto 0);
        ref_q_V_ap_vld : IN STD_LOGIC;
        x_i_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_i_out_full_n : IN STD_LOGIC;
        x_i_out_write : OUT STD_LOGIC;
        x_q_out_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        x_q_out_full_n : IN STD_LOGIC;
        x_q_out_write : OUT STD_LOGIC;
        ref_i_V_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        ref_i_V_out_full_n : IN STD_LOGIC;
        ref_i_V_out_write : OUT STD_LOGIC;
        ref_q_V_out_din : OUT STD_LOGIC_VECTOR (7 downto 0);
        ref_q_V_out_full_n : IN STD_LOGIC;
        ref_q_V_out_write : OUT STD_LOGIC );
    end component;


    component fir_filter_a IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        x_empty_n : IN STD_LOGIC;
        x_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fir_filter_b IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        x_empty_n : IN STD_LOGIC;
        x_read : OUT STD_LOGIC;
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component iq_mult IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ref_i_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        ref_i_V_empty_n : IN STD_LOGIC;
        ref_i_V_read : OUT STD_LOGIC;
        ref_q_V_dout : IN STD_LOGIC_VECTOR (7 downto 0);
        ref_q_V_empty_n : IN STD_LOGIC;
        ref_q_V_read : OUT STD_LOGIC;
        x_i : IN STD_LOGIC_VECTOR (31 downto 0);
        x_q : IN STD_LOGIC_VECTOR (31 downto 0);
        y : OUT STD_LOGIC_VECTOR (31 downto 0);
        y_ap_vld : OUT STD_LOGIC );
    end component;


    component fifo_w32_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component fifo_w8_d3_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (7 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (7 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_fir_filbkb IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component start_for_fir_filcud IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    up_conv_entry14_U0 : component up_conv_entry14
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => up_conv_entry14_U0_ap_start,
        start_full_n => up_conv_entry14_U0_start_full_n,
        ap_done => up_conv_entry14_U0_ap_done,
        ap_continue => up_conv_entry14_U0_ap_continue,
        ap_idle => up_conv_entry14_U0_ap_idle,
        ap_ready => up_conv_entry14_U0_ap_ready,
        start_out => up_conv_entry14_U0_start_out,
        start_write => up_conv_entry14_U0_start_write,
        x_i => x_i,
        x_i_ap_vld => x_i_ap_vld,
        x_q => x_q,
        x_q_ap_vld => x_q_ap_vld,
        ref_i_V => ref_i_V,
        ref_i_V_ap_vld => ref_i_V_ap_vld,
        ref_q_V => ref_q_V,
        ref_q_V_ap_vld => ref_q_V_ap_vld,
        x_i_out_din => up_conv_entry14_U0_x_i_out_din,
        x_i_out_full_n => x_i_c_full_n,
        x_i_out_write => up_conv_entry14_U0_x_i_out_write,
        x_q_out_din => up_conv_entry14_U0_x_q_out_din,
        x_q_out_full_n => x_q_c_full_n,
        x_q_out_write => up_conv_entry14_U0_x_q_out_write,
        ref_i_V_out_din => up_conv_entry14_U0_ref_i_V_out_din,
        ref_i_V_out_full_n => ref_i_V_c_full_n,
        ref_i_V_out_write => up_conv_entry14_U0_ref_i_V_out_write,
        ref_q_V_out_din => up_conv_entry14_U0_ref_q_V_out_din,
        ref_q_V_out_full_n => ref_q_V_c_full_n,
        ref_q_V_out_write => up_conv_entry14_U0_ref_q_V_out_write);

    fir_filter_a_U0 : component fir_filter_a
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fir_filter_a_U0_ap_start,
        ap_done => fir_filter_a_U0_ap_done,
        ap_continue => fir_filter_a_U0_ap_continue,
        ap_idle => fir_filter_a_U0_ap_idle,
        ap_ready => fir_filter_a_U0_ap_ready,
        x_dout => x_i_c_dout,
        x_empty_n => x_i_c_empty_n,
        x_read => fir_filter_a_U0_x_read,
        ap_return => fir_filter_a_U0_ap_return);

    fir_filter_b_U0 : component fir_filter_b
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => fir_filter_b_U0_ap_start,
        ap_done => fir_filter_b_U0_ap_done,
        ap_continue => fir_filter_b_U0_ap_continue,
        ap_idle => fir_filter_b_U0_ap_idle,
        ap_ready => fir_filter_b_U0_ap_ready,
        x_dout => x_q_c_dout,
        x_empty_n => x_q_c_empty_n,
        x_read => fir_filter_b_U0_x_read,
        ap_return => fir_filter_b_U0_ap_return);

    iq_mult_U0 : component iq_mult
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => iq_mult_U0_ap_start,
        ap_done => iq_mult_U0_ap_done,
        ap_continue => iq_mult_U0_ap_continue,
        ap_idle => iq_mult_U0_ap_idle,
        ap_ready => iq_mult_U0_ap_ready,
        ref_i_V_dout => ref_i_V_c_dout,
        ref_i_V_empty_n => ref_i_V_c_empty_n,
        ref_i_V_read => iq_mult_U0_ref_i_V_read,
        ref_q_V_dout => ref_q_V_c_dout,
        ref_q_V_empty_n => ref_q_V_c_empty_n,
        ref_q_V_read => iq_mult_U0_ref_q_V_read,
        x_i => i_tmp_dout,
        x_q => q_tmp_dout,
        y => iq_mult_U0_y,
        y_ap_vld => iq_mult_U0_y_ap_vld);

    x_i_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => up_conv_entry14_U0_x_i_out_din,
        if_full_n => x_i_c_full_n,
        if_write => up_conv_entry14_U0_x_i_out_write,
        if_dout => x_i_c_dout,
        if_empty_n => x_i_c_empty_n,
        if_read => fir_filter_a_U0_x_read);

    x_q_c_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => up_conv_entry14_U0_x_q_out_din,
        if_full_n => x_q_c_full_n,
        if_write => up_conv_entry14_U0_x_q_out_write,
        if_dout => x_q_c_dout,
        if_empty_n => x_q_c_empty_n,
        if_read => fir_filter_b_U0_x_read);

    ref_i_V_c_U : component fifo_w8_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => up_conv_entry14_U0_ref_i_V_out_din,
        if_full_n => ref_i_V_c_full_n,
        if_write => up_conv_entry14_U0_ref_i_V_out_write,
        if_dout => ref_i_V_c_dout,
        if_empty_n => ref_i_V_c_empty_n,
        if_read => iq_mult_U0_ref_i_V_read);

    ref_q_V_c_U : component fifo_w8_d3_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => up_conv_entry14_U0_ref_q_V_out_din,
        if_full_n => ref_q_V_c_full_n,
        if_write => up_conv_entry14_U0_ref_q_V_out_write,
        if_dout => ref_q_V_c_dout,
        if_empty_n => ref_q_V_c_empty_n,
        if_read => iq_mult_U0_ref_q_V_read);

    i_tmp_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fir_filter_a_U0_ap_return,
        if_full_n => i_tmp_full_n,
        if_write => fir_filter_a_U0_ap_done,
        if_dout => i_tmp_dout,
        if_empty_n => i_tmp_empty_n,
        if_read => iq_mult_U0_ap_ready);

    q_tmp_U : component fifo_w32_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => fir_filter_b_U0_ap_return,
        if_full_n => q_tmp_full_n,
        if_write => fir_filter_b_U0_ap_done,
        if_dout => q_tmp_dout,
        if_empty_n => q_tmp_empty_n,
        if_read => iq_mult_U0_ap_ready);

    start_for_fir_filbkb_U : component start_for_fir_filbkb
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fir_filter_a_U0_din,
        if_full_n => start_for_fir_filter_a_U0_full_n,
        if_write => up_conv_entry14_U0_start_write,
        if_dout => start_for_fir_filter_a_U0_dout,
        if_empty_n => start_for_fir_filter_a_U0_empty_n,
        if_read => fir_filter_a_U0_ap_ready);

    start_for_fir_filcud_U : component start_for_fir_filcud
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_fir_filter_b_U0_din,
        if_full_n => start_for_fir_filter_b_U0_full_n,
        if_write => up_conv_entry14_U0_start_write,
        if_dout => start_for_fir_filter_b_U0_dout,
        if_empty_n => start_for_fir_filter_b_U0_empty_n,
        if_read => fir_filter_b_U0_ap_ready);




    ap_channel_done_i_tmp <= fir_filter_a_U0_ap_done;
    ap_channel_done_q_tmp <= fir_filter_b_U0_ap_done;
    ap_sync_continue <= ap_const_logic_0;
    fir_filter_a_U0_ap_continue <= i_tmp_full_n;
    fir_filter_a_U0_ap_start <= start_for_fir_filter_a_U0_empty_n;
    fir_filter_a_U0_start_full_n <= ap_const_logic_1;
    fir_filter_a_U0_start_write <= ap_const_logic_0;
    fir_filter_b_U0_ap_continue <= q_tmp_full_n;
    fir_filter_b_U0_ap_start <= start_for_fir_filter_b_U0_empty_n;
    fir_filter_b_U0_start_full_n <= ap_const_logic_1;
    fir_filter_b_U0_start_write <= ap_const_logic_0;
    iq_mult_U0_ap_continue <= ap_const_logic_1;
    iq_mult_U0_ap_start <= (q_tmp_empty_n and i_tmp_empty_n);
    iq_mult_U0_start_full_n <= ap_const_logic_1;
    iq_mult_U0_start_write <= ap_const_logic_0;
    start_for_fir_filter_a_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_fir_filter_b_U0_din <= (0=>ap_const_logic_1, others=>'-');
    up_conv_entry14_U0_ap_continue <= ap_const_logic_1;
    up_conv_entry14_U0_ap_start <= ap_const_logic_1;
    up_conv_entry14_U0_start_full_n <= (start_for_fir_filter_b_U0_full_n and start_for_fir_filter_a_U0_full_n);
    y <= iq_mult_U0_y;
    y_ap_vld <= iq_mult_U0_y_ap_vld;
end behav;
