// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module iq_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ref_i_V_dout,
        ref_i_V_empty_n,
        ref_i_V_read,
        ref_q_V_dout,
        ref_q_V_empty_n,
        ref_q_V_read,
        i_tmp_dout,
        i_tmp_empty_n,
        i_tmp_read,
        q_tmp_dout,
        q_tmp_empty_n,
        q_tmp_read,
        y,
        y_ap_vld
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] ref_i_V_dout;
input   ref_i_V_empty_n;
output   ref_i_V_read;
input  [7:0] ref_q_V_dout;
input   ref_q_V_empty_n;
output   ref_q_V_read;
input  [31:0] i_tmp_dout;
input   i_tmp_empty_n;
output   i_tmp_read;
input  [0:0] q_tmp_dout;
input   q_tmp_empty_n;
output   q_tmp_read;
output  [31:0] y;
output   y_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ref_i_V_read;
reg ref_q_V_read;
reg i_tmp_read;
reg q_tmp_read;
reg y_ap_vld;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_11001;
reg    i_tmp_blk_n;
wire    ap_block_pp0_stage0;
reg    q_tmp_blk_n;
reg    ref_i_V_blk_n;
reg    ref_q_V_blk_n;
reg   [7:0] ref_i_V_read_reg_143;
reg   [7:0] ref_q_V_read_reg_148;
reg   [7:0] ref_q_V_read_reg_148_pp0_iter1_reg;
reg  signed [31:0] i_tmp_read_reg_153;
reg   [0:0] q_tmp_read_reg_158;
reg   [0:0] q_tmp_read_reg_158_pp0_iter1_reg;
wire   [31:0] tmp_i_fu_116_p2;
reg   [31:0] tmp_i_reg_163;
reg    ap_block_pp0_stage0_subdone;
reg    ap_block_pp0_stage0_01001;
wire  signed [7:0] tmp_i_fu_116_p0;
wire   [7:0] select_ln35_fu_121_p3;
wire   [7:0] tmp_q_fu_128_p2;
wire  signed [31:0] sext_ln35_fu_133_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to1;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_tmp_read_reg_153 <= i_tmp_dout;
        q_tmp_read_reg_158 <= q_tmp_dout;
        q_tmp_read_reg_158_pp0_iter1_reg <= q_tmp_read_reg_158;
        ref_i_V_read_reg_143 <= ref_i_V_dout;
        ref_q_V_read_reg_148 <= ref_q_V_dout;
        ref_q_V_read_reg_148_pp0_iter1_reg <= ref_q_V_read_reg_148;
        tmp_i_reg_163 <= tmp_i_fu_116_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to1 = 1'b1;
    end else begin
        ap_idle_pp0_0to1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to1 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_tmp_blk_n = i_tmp_empty_n;
    end else begin
        i_tmp_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_tmp_read = 1'b1;
    end else begin
        i_tmp_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_tmp_blk_n = q_tmp_empty_n;
    end else begin
        q_tmp_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        q_tmp_read = 1'b1;
    end else begin
        q_tmp_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_i_V_blk_n = ref_i_V_empty_n;
    end else begin
        ref_i_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_i_V_read = 1'b1;
    end else begin
        ref_i_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_q_V_blk_n = ref_q_V_empty_n;
    end else begin
        ref_q_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ref_q_V_read = 1'b1;
    end else begin
        ref_q_V_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        y_ap_vld = 1'b1;
    end else begin
        y_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (q_tmp_empty_n == 1'b0) | (i_tmp_empty_n == 1'b0) | (ref_q_V_empty_n == 1'b0) | (ref_i_V_empty_n == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (q_tmp_empty_n == 1'b0) | (i_tmp_empty_n == 1'b0) | (ref_q_V_empty_n == 1'b0) | (ref_i_V_empty_n == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((ap_start == 1'b1) & ((ap_start == 1'b0) | (q_tmp_empty_n == 1'b0) | (i_tmp_empty_n == 1'b0) | (ref_q_V_empty_n == 1'b0) | (ref_i_V_empty_n == 1'b0) | (ap_done_reg == 1'b1))));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = ((ap_start == 1'b0) | (q_tmp_empty_n == 1'b0) | (i_tmp_empty_n == 1'b0) | (ref_q_V_empty_n == 1'b0) | (ref_i_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign select_ln35_fu_121_p3 = ((q_tmp_read_reg_158_pp0_iter1_reg[0:0] === 1'b1) ? 8'd255 : 8'd0);

assign sext_ln35_fu_133_p1 = $signed(tmp_q_fu_128_p2);

assign tmp_i_fu_116_p0 = ref_i_V_read_reg_143;

assign tmp_i_fu_116_p2 = ($signed(tmp_i_fu_116_p0) * $signed(i_tmp_read_reg_153));

assign tmp_q_fu_128_p2 = (select_ln35_fu_121_p3 & ref_q_V_read_reg_148_pp0_iter1_reg);

assign y = ($signed(tmp_i_reg_163) + $signed(sext_ln35_fu_133_p1));

endmodule //iq_mult
