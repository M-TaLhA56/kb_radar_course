// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _iq_mult_HH_
#define _iq_mult_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct iq_mult : public sc_module {
    // Port declarations 21
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<8> > ref_i_V_dout;
    sc_in< sc_logic > ref_i_V_empty_n;
    sc_out< sc_logic > ref_i_V_read;
    sc_in< sc_lv<8> > ref_q_V_dout;
    sc_in< sc_logic > ref_q_V_empty_n;
    sc_out< sc_logic > ref_q_V_read;
    sc_in< sc_lv<32> > i_tmp_dout;
    sc_in< sc_logic > i_tmp_empty_n;
    sc_out< sc_logic > i_tmp_read;
    sc_in< sc_lv<1> > q_tmp_dout;
    sc_in< sc_logic > q_tmp_empty_n;
    sc_out< sc_logic > q_tmp_read;
    sc_out< sc_lv<32> > y;
    sc_out< sc_logic > y_ap_vld;


    // Module declarations
    iq_mult(sc_module_name name);
    SC_HAS_PROCESS(iq_mult);

    ~iq_mult();

    sc_trace_file* mVcdFile;

    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<1> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter2;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< bool > ap_block_state1_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter1;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter2;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_logic > i_tmp_blk_n;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_logic > q_tmp_blk_n;
    sc_signal< sc_logic > ref_i_V_blk_n;
    sc_signal< sc_logic > ref_q_V_blk_n;
    sc_signal< sc_lv<8> > ref_i_V_read_reg_143;
    sc_signal< sc_lv<8> > ref_q_V_read_reg_148;
    sc_signal< sc_lv<8> > ref_q_V_read_reg_148_pp0_iter1_reg;
    sc_signal< sc_lv<32> > i_tmp_read_reg_153;
    sc_signal< sc_lv<1> > q_tmp_read_reg_158;
    sc_signal< sc_lv<1> > q_tmp_read_reg_158_pp0_iter1_reg;
    sc_signal< sc_lv<32> > tmp_i_fu_116_p2;
    sc_signal< sc_lv<32> > tmp_i_reg_163;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< bool > ap_block_pp0_stage0_01001;
    sc_signal< sc_lv<8> > tmp_i_fu_116_p0;
    sc_signal< sc_lv<8> > select_ln35_fu_121_p3;
    sc_signal< sc_lv<8> > tmp_q_fu_128_p2;
    sc_signal< sc_lv<32> > sext_ln35_fu_133_p1;
    sc_signal< sc_lv<1> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0_0to1;
    sc_signal< sc_logic > ap_reset_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<1> ap_ST_fsm_pp0_stage0;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_0;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_01001();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state1_pp0_stage0_iter0();
    void thread_ap_block_state2_pp0_stage0_iter1();
    void thread_ap_block_state3_pp0_stage0_iter2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_enable_reg_pp0_iter0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_idle_pp0_0to1();
    void thread_ap_ready();
    void thread_ap_reset_idle_pp0();
    void thread_i_tmp_blk_n();
    void thread_i_tmp_read();
    void thread_q_tmp_blk_n();
    void thread_q_tmp_read();
    void thread_ref_i_V_blk_n();
    void thread_ref_i_V_read();
    void thread_ref_q_V_blk_n();
    void thread_ref_q_V_read();
    void thread_select_ln35_fu_121_p3();
    void thread_sext_ln35_fu_133_p1();
    void thread_tmp_i_fu_116_p0();
    void thread_tmp_i_fu_116_p2();
    void thread_tmp_q_fu_128_p2();
    void thread_y();
    void thread_y_ap_vld();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
