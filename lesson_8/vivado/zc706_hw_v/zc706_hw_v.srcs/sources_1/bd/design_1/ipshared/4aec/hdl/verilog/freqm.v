// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.3
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module freqm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ix_V_dout,
        ix_V_empty_n,
        ix_V_read,
        qx_V_dout,
        qx_V_empty_n,
        qx_V_read,
        i_mod_V_dout,
        i_mod_V_empty_n,
        i_mod_V_read,
        q_mod_V_dout,
        q_mod_V_empty_n,
        q_mod_V_read,
        ix_V_out_din,
        ix_V_out_full_n,
        ix_V_out_write,
        qx_V_out_din,
        qx_V_out_full_n,
        qx_V_out_write,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] ix_V_dout;
input   ix_V_empty_n;
output   ix_V_read;
input  [31:0] qx_V_dout;
input   qx_V_empty_n;
output   qx_V_read;
input  [7:0] i_mod_V_dout;
input   i_mod_V_empty_n;
output   i_mod_V_read;
input  [7:0] q_mod_V_dout;
input   q_mod_V_empty_n;
output   q_mod_V_read;
output  [31:0] ix_V_out_din;
input   ix_V_out_full_n;
output   ix_V_out_write;
output  [31:0] qx_V_out_din;
input   qx_V_out_full_n;
output   qx_V_out_write;
output  [31:0] ap_return_0;
output  [31:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ix_V_read;
reg qx_V_read;
reg i_mod_V_read;
reg q_mod_V_read;
reg ix_V_out_write;
reg qx_V_out_write;
reg[31:0] ap_return_0;
reg[31:0] ap_return_1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ix_V_blk_n;
reg    qx_V_blk_n;
reg    i_mod_V_blk_n;
reg    q_mod_V_blk_n;
reg    ix_V_out_blk_n;
reg    qx_V_out_blk_n;
reg    ap_block_state1;
wire  signed [31:0] mul_ln68_fu_144_p0;
wire  signed [7:0] mul_ln68_fu_144_p1;
wire  signed [31:0] sext_ln68_fu_140_p1;
wire  signed [31:0] mul_ln68_1_fu_154_p0;
wire  signed [7:0] mul_ln68_1_fu_154_p1;
wire  signed [31:0] sext_ln68_1_fu_150_p1;
wire   [31:0] mul_ln68_fu_144_p2;
wire   [31:0] mul_ln68_1_fu_154_p2;
wire  signed [31:0] mul_ln68_2_fu_166_p0;
wire  signed [7:0] mul_ln68_2_fu_166_p1;
wire  signed [31:0] mul_ln68_3_fu_172_p0;
wire  signed [7:0] mul_ln68_3_fu_172_p1;
wire   [31:0] mul_ln68_2_fu_166_p2;
wire   [31:0] mul_ln68_3_fu_172_p2;
wire   [31:0] sub_ln68_fu_160_p2;
wire   [31:0] add_ln68_fu_178_p2;
reg   [31:0] ap_return_0_preg;
reg   [31:0] ap_return_1_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 32'd0;
#0 ap_return_1_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= sub_ln68_fu_160_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 32'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= add_ln68_fu_178_p2;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = sub_ln68_fu_160_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = add_ln68_fu_178_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_mod_V_blk_n = i_mod_V_empty_n;
    end else begin
        i_mod_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_mod_V_read = 1'b1;
    end else begin
        i_mod_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ix_V_blk_n = ix_V_empty_n;
    end else begin
        ix_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ix_V_out_blk_n = ix_V_out_full_n;
    end else begin
        ix_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ix_V_out_write = 1'b1;
    end else begin
        ix_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ix_V_read = 1'b1;
    end else begin
        ix_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        q_mod_V_blk_n = q_mod_V_empty_n;
    end else begin
        q_mod_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        q_mod_V_read = 1'b1;
    end else begin
        q_mod_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        qx_V_blk_n = qx_V_empty_n;
    end else begin
        qx_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        qx_V_out_blk_n = qx_V_out_full_n;
    end else begin
        qx_V_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        qx_V_out_write = 1'b1;
    end else begin
        qx_V_out_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        qx_V_read = 1'b1;
    end else begin
        qx_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln68_fu_178_p2 = (mul_ln68_2_fu_166_p2 + mul_ln68_3_fu_172_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (qx_V_out_full_n == 1'b0) | (ix_V_out_full_n == 1'b0) | (q_mod_V_empty_n == 1'b0) | (i_mod_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign ix_V_out_din = ix_V_dout;

assign mul_ln68_1_fu_154_p0 = qx_V_dout;

assign mul_ln68_1_fu_154_p1 = sext_ln68_1_fu_150_p1;

assign mul_ln68_1_fu_154_p2 = ($signed(mul_ln68_1_fu_154_p0) * $signed(mul_ln68_1_fu_154_p1));

assign mul_ln68_2_fu_166_p0 = ix_V_dout;

assign mul_ln68_2_fu_166_p1 = sext_ln68_1_fu_150_p1;

assign mul_ln68_2_fu_166_p2 = ($signed(mul_ln68_2_fu_166_p0) * $signed(mul_ln68_2_fu_166_p1));

assign mul_ln68_3_fu_172_p0 = qx_V_dout;

assign mul_ln68_3_fu_172_p1 = sext_ln68_fu_140_p1;

assign mul_ln68_3_fu_172_p2 = ($signed(mul_ln68_3_fu_172_p0) * $signed(mul_ln68_3_fu_172_p1));

assign mul_ln68_fu_144_p0 = ix_V_dout;

assign mul_ln68_fu_144_p1 = sext_ln68_fu_140_p1;

assign mul_ln68_fu_144_p2 = ($signed(mul_ln68_fu_144_p0) * $signed(mul_ln68_fu_144_p1));

assign qx_V_out_din = qx_V_dout;

assign sext_ln68_1_fu_150_p1 = $signed(i_mod_V_dout);

assign sext_ln68_fu_140_p1 = $signed(q_mod_V_dout);

assign sub_ln68_fu_160_p2 = (mul_ln68_fu_144_p2 - mul_ln68_1_fu_154_p2);

endmodule //freqm
