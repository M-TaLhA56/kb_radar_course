// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module o_mux (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        ix_V_dout,
        ix_V_empty_n,
        ix_V_read,
        qx_V_dout,
        qx_V_empty_n,
        qx_V_read,
        p_read,
        p_read1,
        iy_V,
        iy_V_ap_vld,
        qy_V,
        qy_V_ap_vld,
        flag,
        mux_V_dout,
        mux_V_empty_n,
        mux_V_read
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] ix_V_dout;
input   ix_V_empty_n;
output   ix_V_read;
input  [31:0] qx_V_dout;
input   qx_V_empty_n;
output   qx_V_read;
input  [31:0] p_read;
input  [31:0] p_read1;
output  [31:0] iy_V;
output   iy_V_ap_vld;
output  [31:0] qy_V;
output   qy_V_ap_vld;
input   flag;
input  [1:0] mux_V_dout;
input   mux_V_empty_n;
output   mux_V_read;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ix_V_read;
reg qx_V_read;
reg[31:0] iy_V;
reg iy_V_ap_vld;
reg[31:0] qy_V;
reg qy_V_ap_vld;
reg mux_V_read;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ix_V_blk_n;
reg    qx_V_blk_n;
reg    mux_V_blk_n;
wire   [31:0] sub_ln68_3_fu_169_p2;
reg   [31:0] ap_phi_mux_storemerge_i_i_phi_fu_143_p4;
reg    ap_block_state1;
wire   [1:0] mux_V_read_read_fu_114_p2;
wire   [0:0] flag_read_read_fu_84_p2;
wire   [31:0] sub_ln68_1_fu_183_p2;
reg   [31:0] ap_phi_mux_storemerge1_i_i_phi_fu_154_p4;
wire   [31:0] sub_ln68_2_fu_162_p2;
reg   [31:0] iy_V_preg;
wire   [31:0] sub_ln68_fu_176_p2;
reg   [31:0] qy_V_preg;
reg   [0:0] ap_NS_fsm;
reg    ap_condition_60;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 iy_V_preg = 32'd0;
#0 qy_V_preg = 32'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        iy_V_preg <= 32'd0;
    end else begin
        if (((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (flag_read_read_fu_84_p2 == 1'd1) & (mux_V_read_read_fu_114_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
            iy_V_preg <= ix_V_dout;
        end else if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (flag_read_read_fu_84_p2 == 1'd0) & (mux_V_read_read_fu_114_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state1))) begin
            iy_V_preg <= sub_ln68_fu_176_p2;
        end else if (((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (flag_read_read_fu_84_p2 == 1'd1) & (mux_V_read_read_fu_114_p2 == 2'd3) & (1'b1 == ap_CS_fsm_state1)))) begin
            iy_V_preg <= p_read;
        end else if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (flag_read_read_fu_84_p2 == 1'd0) & (mux_V_read_read_fu_114_p2 == 2'd3) & (1'b1 == ap_CS_fsm_state1))) begin
            iy_V_preg <= sub_ln68_2_fu_162_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        qy_V_preg <= 32'd0;
    end else begin
        if ((1'b1 == ap_condition_60)) begin
            if ((mux_V_read_read_fu_114_p2 == 2'd0)) begin
                qy_V_preg <= qx_V_dout;
            end else if ((mux_V_read_read_fu_114_p2 == 2'd1)) begin
                qy_V_preg <= ap_phi_mux_storemerge1_i_i_phi_fu_154_p4;
            end else if ((mux_V_read_read_fu_114_p2 == 2'd2)) begin
                qy_V_preg <= p_read1;
            end else if ((mux_V_read_read_fu_114_p2 == 2'd3)) begin
                qy_V_preg <= ap_phi_mux_storemerge_i_i_phi_fu_143_p4;
            end
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((mux_V_read_read_fu_114_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((flag_read_read_fu_84_p2 == 1'd1)) begin
            ap_phi_mux_storemerge1_i_i_phi_fu_154_p4 = qx_V_dout;
        end else if ((flag_read_read_fu_84_p2 == 1'd0)) begin
            ap_phi_mux_storemerge1_i_i_phi_fu_154_p4 = sub_ln68_1_fu_183_p2;
        end else begin
            ap_phi_mux_storemerge1_i_i_phi_fu_154_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge1_i_i_phi_fu_154_p4 = 'bx;
    end
end

always @ (*) begin
    if (((mux_V_read_read_fu_114_p2 == 2'd3) & (1'b1 == ap_CS_fsm_state1))) begin
        if ((flag_read_read_fu_84_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_i_i_phi_fu_143_p4 = p_read1;
        end else if ((flag_read_read_fu_84_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_i_i_phi_fu_143_p4 = sub_ln68_3_fu_169_p2;
        end else begin
            ap_phi_mux_storemerge_i_i_phi_fu_143_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge_i_i_phi_fu_143_p4 = 'bx;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ix_V_blk_n = ix_V_empty_n;
    end else begin
        ix_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ix_V_read = 1'b1;
    end else begin
        ix_V_read = 1'b0;
    end
end

always @ (*) begin
    if (~(1'b1 == 1'b1)) begin
        iy_V = 32'd0;
    end else if (((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (flag_read_read_fu_84_p2 == 1'd1) & (mux_V_read_read_fu_114_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state1)))) begin
        iy_V = ix_V_dout;
    end else if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (flag_read_read_fu_84_p2 == 1'd0) & (mux_V_read_read_fu_114_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        iy_V = sub_ln68_fu_176_p2;
    end else if (((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (flag_read_read_fu_84_p2 == 1'd1) & (mux_V_read_read_fu_114_p2 == 2'd3) & (1'b1 == ap_CS_fsm_state1)))) begin
        iy_V = p_read;
    end else if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (flag_read_read_fu_84_p2 == 1'd0) & (mux_V_read_read_fu_114_p2 == 2'd3) & (1'b1 == ap_CS_fsm_state1))) begin
        iy_V = sub_ln68_2_fu_162_p2;
    end else begin
        iy_V = iy_V_preg;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (flag_read_read_fu_84_p2 == 1'd1) & (mux_V_read_read_fu_114_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (flag_read_read_fu_84_p2 == 1'd0) & (mux_V_read_read_fu_114_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (flag_read_read_fu_84_p2 == 1'd1) & (mux_V_read_read_fu_114_p2 == 2'd3) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (flag_read_read_fu_84_p2 == 1'd0) & (mux_V_read_read_fu_114_p2 == 2'd3) & (1'b1 == ap_CS_fsm_state1)))) begin
        iy_V_ap_vld = 1'b1;
    end else begin
        iy_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mux_V_blk_n = mux_V_empty_n;
    end else begin
        mux_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        mux_V_read = 1'b1;
    end else begin
        mux_V_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        qx_V_blk_n = qx_V_empty_n;
    end else begin
        qx_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        qx_V_read = 1'b1;
    end else begin
        qx_V_read = 1'b0;
    end
end

always @ (*) begin
    if (~(1'b1 == 1'b1)) begin
        qy_V = 32'd0;
    end else if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd0) & (1'b1 == ap_CS_fsm_state1))) begin
        qy_V = qx_V_dout;
    end else if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        qy_V = ap_phi_mux_storemerge1_i_i_phi_fu_154_p4;
    end else if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state1))) begin
        qy_V = p_read1;
    end else if ((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd3) & (1'b1 == ap_CS_fsm_state1))) begin
        qy_V = ap_phi_mux_storemerge_i_i_phi_fu_143_p4;
    end else begin
        qy_V = qy_V_preg;
    end
end

always @ (*) begin
    if (((~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd0) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd2) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd1) & (1'b1 == ap_CS_fsm_state1)) | (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (mux_V_read_read_fu_114_p2 == 2'd3) & (1'b1 == ap_CS_fsm_state1)))) begin
        qy_V_ap_vld = 1'b1;
    end else begin
        qy_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_condition_60 = (~((ap_start == 1'b0) | (mux_V_empty_n == 1'b0) | (qx_V_empty_n == 1'b0) | (ix_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1));
end

assign flag_read_read_fu_84_p2 = flag;

assign mux_V_read_read_fu_114_p2 = mux_V_dout;

assign sub_ln68_1_fu_183_p2 = (32'd0 - qx_V_dout);

assign sub_ln68_2_fu_162_p2 = (32'd0 - p_read);

assign sub_ln68_3_fu_169_p2 = (32'd0 - p_read1);

assign sub_ln68_fu_176_p2 = (32'd0 - ix_V_dout);

endmodule //o_mux
