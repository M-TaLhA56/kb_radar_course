// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module phasm (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        period_V_dout,
        period_V_empty_n,
        period_V_read,
        ap_return
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] period_V_dout;
input   period_V_empty_n;
output   period_V_read;
output  [0:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg period_V_read;
reg[0:0] ap_return;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] count_V;
reg   [0:0] tmp;
reg    period_V_blk_n;
wire   [0:0] xor_ln48_fu_91_p2;
reg   [0:0] ap_phi_mux_flag_write_assign_phi_fu_53_p4;
reg    ap_block_state1;
wire   [0:0] icmp_ln879_fu_73_p2;
reg   [7:0] ap_phi_mux_storemerge_i_phi_fu_62_p4;
wire   [7:0] add_ln700_fu_84_p2;
reg   [0:0] ap_return_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 count_V = 8'd0;
#0 tmp = 1'd0;
#0 ap_return_preg = 1'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (period_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 1'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (period_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_preg <= ap_phi_mux_flag_write_assign_phi_fu_53_p4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (period_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        count_V <= ap_phi_mux_storemerge_i_phi_fu_62_p4;
    end
end

always @ (posedge ap_clk) begin
    if ((~((ap_start == 1'b0) | (period_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (icmp_ln879_fu_73_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state1))) begin
        tmp <= xor_ln48_fu_91_p2;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (period_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((icmp_ln879_fu_73_p2 == 1'd0)) begin
            ap_phi_mux_flag_write_assign_phi_fu_53_p4 = tmp;
        end else if ((icmp_ln879_fu_73_p2 == 1'd1)) begin
            ap_phi_mux_flag_write_assign_phi_fu_53_p4 = xor_ln48_fu_91_p2;
        end else begin
            ap_phi_mux_flag_write_assign_phi_fu_53_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_flag_write_assign_phi_fu_53_p4 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        if ((icmp_ln879_fu_73_p2 == 1'd0)) begin
            ap_phi_mux_storemerge_i_phi_fu_62_p4 = add_ln700_fu_84_p2;
        end else if ((icmp_ln879_fu_73_p2 == 1'd1)) begin
            ap_phi_mux_storemerge_i_phi_fu_62_p4 = 8'd0;
        end else begin
            ap_phi_mux_storemerge_i_phi_fu_62_p4 = 'bx;
        end
    end else begin
        ap_phi_mux_storemerge_i_phi_fu_62_p4 = 'bx;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (period_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (period_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return = ap_phi_mux_flag_write_assign_phi_fu_53_p4;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        period_V_blk_n = period_V_empty_n;
    end else begin
        period_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (period_V_empty_n == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        period_V_read = 1'b1;
    end else begin
        period_V_read = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln700_fu_84_p2 = (count_V + 8'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (period_V_empty_n == 1'b0) | (ap_done_reg == 1'b1));
end

assign icmp_ln879_fu_73_p2 = ((count_V == period_V_dout) ? 1'b1 : 1'b0);

assign xor_ln48_fu_91_p2 = (tmp ^ 1'd1);

endmodule //phasm
