// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="d_conv,hls_ip_2019_1_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z045-ffg900-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.446000,HLS_SYN_LAT=3,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=122,HLS_SYN_FF=4876,HLS_SYN_LUT=3390,HLS_VERSION=2019_1_2}" *)

module d_conv (
        x_V,
        ref_i_V,
        ref_q_V,
        y_i_V,
        y_q_V,
        ap_clk,
        ap_rst,
        x_V_ap_vld,
        ref_i_V_ap_vld,
        ref_q_V_ap_vld,
        y_i_V_ap_vld,
        y_q_V_ap_vld
);


input  [7:0] x_V;
input  [7:0] ref_i_V;
input  [7:0] ref_q_V;
output  [31:0] y_i_V;
output  [31:0] y_q_V;
input   ap_clk;
input   ap_rst;
input   x_V_ap_vld;
input   ref_i_V_ap_vld;
input   ref_q_V_ap_vld;
output   y_i_V_ap_vld;
output   y_q_V_ap_vld;

wire    iq_mult_U0_ap_start;
wire    iq_mult_U0_ap_done;
wire    iq_mult_U0_ap_continue;
wire    iq_mult_U0_ap_idle;
wire    iq_mult_U0_ap_ready;
wire   [15:0] iq_mult_U0_ap_return_0;
wire   [15:0] iq_mult_U0_ap_return_1;
wire    ap_channel_done_x_q_V;
wire    x_q_V_full_n;
reg    ap_sync_reg_channel_write_x_q_V;
wire    ap_sync_channel_write_x_q_V;
wire    ap_channel_done_x_i_V;
wire    x_i_V_full_n;
reg    ap_sync_reg_channel_write_x_i_V;
wire    ap_sync_channel_write_x_i_V;
wire    Block_proc_U0_ap_start;
wire    Block_proc_U0_ap_done;
wire    Block_proc_U0_ap_continue;
wire    Block_proc_U0_ap_idle;
wire    Block_proc_U0_ap_ready;
wire   [15:0] Block_proc_U0_ap_return;
wire    ap_channel_done_extLd_loc_channel;
wire    extLd_loc_channel_full_n;
wire    fir_filter_a_U0_ap_start;
wire    fir_filter_a_U0_ap_done;
wire    fir_filter_a_U0_ap_continue;
wire    fir_filter_a_U0_ap_idle;
wire    fir_filter_a_U0_ap_ready;
wire   [31:0] fir_filter_a_U0_y_V;
wire    fir_filter_a_U0_y_V_ap_vld;
wire    ap_sync_continue;
wire    Block_proc33_U0_ap_start;
wire    Block_proc33_U0_ap_done;
wire    Block_proc33_U0_ap_continue;
wire    Block_proc33_U0_ap_idle;
wire    Block_proc33_U0_ap_ready;
wire   [15:0] Block_proc33_U0_ap_return;
wire    ap_channel_done_extLd4_loc_channel;
wire    extLd4_loc_channel_full_n;
wire    fir_filter_b_U0_ap_start;
wire    fir_filter_b_U0_ap_done;
wire    fir_filter_b_U0_ap_continue;
wire    fir_filter_b_U0_ap_idle;
wire    fir_filter_b_U0_ap_ready;
wire   [31:0] fir_filter_b_U0_y_V;
wire    fir_filter_b_U0_y_V_ap_vld;
wire   [15:0] x_i_V_dout;
wire    x_i_V_empty_n;
wire   [15:0] x_q_V_dout;
wire    x_q_V_empty_n;
wire   [15:0] extLd_loc_channel_dout;
wire    extLd_loc_channel_empty_n;
wire   [15:0] extLd4_loc_channel_dout;
wire    extLd4_loc_channel_empty_n;
wire    iq_mult_U0_start_full_n;
wire    iq_mult_U0_start_write;
wire    Block_proc_U0_start_full_n;
wire    Block_proc_U0_start_write;
wire    fir_filter_a_U0_start_full_n;
wire    fir_filter_a_U0_start_write;
wire    Block_proc33_U0_start_full_n;
wire    Block_proc33_U0_start_write;
wire    fir_filter_b_U0_start_full_n;
wire    fir_filter_b_U0_start_write;

// power-on initialization
initial begin
#0 ap_sync_reg_channel_write_x_q_V = 1'b0;
#0 ap_sync_reg_channel_write_x_i_V = 1'b0;
end

iq_mult iq_mult_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(iq_mult_U0_ap_start),
    .ap_done(iq_mult_U0_ap_done),
    .ap_continue(iq_mult_U0_ap_continue),
    .ap_idle(iq_mult_U0_ap_idle),
    .ap_ready(iq_mult_U0_ap_ready),
    .x_V(x_V),
    .x_V_ap_vld(x_V_ap_vld),
    .ref_i_V(ref_i_V),
    .ref_i_V_ap_vld(ref_i_V_ap_vld),
    .ref_q_V(ref_q_V),
    .ref_q_V_ap_vld(ref_q_V_ap_vld),
    .ap_return_0(iq_mult_U0_ap_return_0),
    .ap_return_1(iq_mult_U0_ap_return_1)
);

Block_proc Block_proc_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_proc_U0_ap_start),
    .ap_done(Block_proc_U0_ap_done),
    .ap_continue(Block_proc_U0_ap_continue),
    .ap_idle(Block_proc_U0_ap_idle),
    .ap_ready(Block_proc_U0_ap_ready),
    .p_read(x_i_V_dout),
    .ap_return(Block_proc_U0_ap_return)
);

fir_filter_a fir_filter_a_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fir_filter_a_U0_ap_start),
    .ap_done(fir_filter_a_U0_ap_done),
    .ap_continue(fir_filter_a_U0_ap_continue),
    .ap_idle(fir_filter_a_U0_ap_idle),
    .ap_ready(fir_filter_a_U0_ap_ready),
    .extLd_loc_channel(extLd_loc_channel_dout),
    .y_V(fir_filter_a_U0_y_V),
    .y_V_ap_vld(fir_filter_a_U0_y_V_ap_vld)
);

Block_proc33 Block_proc33_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(Block_proc33_U0_ap_start),
    .ap_done(Block_proc33_U0_ap_done),
    .ap_continue(Block_proc33_U0_ap_continue),
    .ap_idle(Block_proc33_U0_ap_idle),
    .ap_ready(Block_proc33_U0_ap_ready),
    .p_read(x_q_V_dout),
    .ap_return(Block_proc33_U0_ap_return)
);

fir_filter_b fir_filter_b_U0(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(fir_filter_b_U0_ap_start),
    .ap_done(fir_filter_b_U0_ap_done),
    .ap_continue(fir_filter_b_U0_ap_continue),
    .ap_idle(fir_filter_b_U0_ap_idle),
    .ap_ready(fir_filter_b_U0_ap_ready),
    .extLd4_loc_channel(extLd4_loc_channel_dout),
    .y_V(fir_filter_b_U0_y_V),
    .y_V_ap_vld(fir_filter_b_U0_y_V_ap_vld)
);

fifo_w16_d2_A x_i_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(iq_mult_U0_ap_return_0),
    .if_full_n(x_i_V_full_n),
    .if_write(ap_channel_done_x_i_V),
    .if_dout(x_i_V_dout),
    .if_empty_n(x_i_V_empty_n),
    .if_read(Block_proc_U0_ap_ready)
);

fifo_w16_d2_A x_q_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(iq_mult_U0_ap_return_1),
    .if_full_n(x_q_V_full_n),
    .if_write(ap_channel_done_x_q_V),
    .if_dout(x_q_V_dout),
    .if_empty_n(x_q_V_empty_n),
    .if_read(Block_proc33_U0_ap_ready)
);

fifo_w16_d2_A extLd_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc_U0_ap_return),
    .if_full_n(extLd_loc_channel_full_n),
    .if_write(Block_proc_U0_ap_done),
    .if_dout(extLd_loc_channel_dout),
    .if_empty_n(extLd_loc_channel_empty_n),
    .if_read(fir_filter_a_U0_ap_ready)
);

fifo_w16_d2_A extLd4_loc_channel_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .if_read_ce(1'b1),
    .if_write_ce(1'b1),
    .if_din(Block_proc33_U0_ap_return),
    .if_full_n(extLd4_loc_channel_full_n),
    .if_write(Block_proc33_U0_ap_done),
    .if_dout(extLd4_loc_channel_dout),
    .if_empty_n(extLd4_loc_channel_empty_n),
    .if_read(fir_filter_b_U0_ap_ready)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_x_i_V <= 1'b0;
    end else begin
        if (((iq_mult_U0_ap_done & iq_mult_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_x_i_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_x_i_V <= ap_sync_channel_write_x_i_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_sync_reg_channel_write_x_q_V <= 1'b0;
    end else begin
        if (((iq_mult_U0_ap_done & iq_mult_U0_ap_continue) == 1'b1)) begin
            ap_sync_reg_channel_write_x_q_V <= 1'b0;
        end else begin
            ap_sync_reg_channel_write_x_q_V <= ap_sync_channel_write_x_q_V;
        end
    end
end

assign Block_proc33_U0_ap_continue = extLd4_loc_channel_full_n;

assign Block_proc33_U0_ap_start = x_q_V_empty_n;

assign Block_proc33_U0_start_full_n = 1'b1;

assign Block_proc33_U0_start_write = 1'b0;

assign Block_proc_U0_ap_continue = extLd_loc_channel_full_n;

assign Block_proc_U0_ap_start = x_i_V_empty_n;

assign Block_proc_U0_start_full_n = 1'b1;

assign Block_proc_U0_start_write = 1'b0;

assign ap_channel_done_extLd4_loc_channel = Block_proc33_U0_ap_done;

assign ap_channel_done_extLd_loc_channel = Block_proc_U0_ap_done;

assign ap_channel_done_x_i_V = (iq_mult_U0_ap_done & (ap_sync_reg_channel_write_x_i_V ^ 1'b1));

assign ap_channel_done_x_q_V = (iq_mult_U0_ap_done & (ap_sync_reg_channel_write_x_q_V ^ 1'b1));

assign ap_sync_channel_write_x_i_V = ((x_i_V_full_n & ap_channel_done_x_i_V) | ap_sync_reg_channel_write_x_i_V);

assign ap_sync_channel_write_x_q_V = ((x_q_V_full_n & ap_channel_done_x_q_V) | ap_sync_reg_channel_write_x_q_V);

assign ap_sync_continue = 1'b0;

assign fir_filter_a_U0_ap_continue = 1'b1;

assign fir_filter_a_U0_ap_start = extLd_loc_channel_empty_n;

assign fir_filter_a_U0_start_full_n = 1'b1;

assign fir_filter_a_U0_start_write = 1'b0;

assign fir_filter_b_U0_ap_continue = 1'b1;

assign fir_filter_b_U0_ap_start = extLd4_loc_channel_empty_n;

assign fir_filter_b_U0_start_full_n = 1'b1;

assign fir_filter_b_U0_start_write = 1'b0;

assign iq_mult_U0_ap_continue = (ap_sync_channel_write_x_q_V & ap_sync_channel_write_x_i_V);

assign iq_mult_U0_ap_start = 1'b1;

assign iq_mult_U0_start_full_n = 1'b1;

assign iq_mult_U0_start_write = 1'b0;

assign y_i_V = fir_filter_a_U0_y_V;

assign y_i_V_ap_vld = fir_filter_a_U0_y_V_ap_vld;

assign y_q_V = fir_filter_b_U0_y_V;

assign y_q_V_ap_vld = fir_filter_b_U0_y_V_ap_vld;

endmodule //d_conv
