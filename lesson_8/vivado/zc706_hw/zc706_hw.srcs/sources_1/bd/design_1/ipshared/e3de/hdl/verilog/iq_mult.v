// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module iq_mult (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        x_V,
        x_V_ap_vld,
        ref_i_V,
        ref_i_V_ap_vld,
        ref_q_V,
        ref_q_V_ap_vld,
        ap_return_0,
        ap_return_1
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [7:0] x_V;
input   x_V_ap_vld;
input  [7:0] ref_i_V;
input   ref_i_V_ap_vld;
input  [7:0] ref_q_V;
input   ref_q_V_ap_vld;
output  [15:0] ap_return_0;
output  [15:0] ap_return_1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] ap_return_0;
reg[15:0] ap_return_1;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    x_V_blk_n;
reg    ref_i_V_blk_n;
reg    ref_q_V_blk_n;
reg    ap_block_state1;
wire  signed [7:0] ret_V_fu_36_p0;
wire  signed [7:0] ret_V_fu_36_p1;
wire  signed [15:0] lhs_V_fu_28_p1;
wire  signed [7:0] ret_V_1_fu_46_p0;
wire  signed [7:0] ret_V_1_fu_46_p1;
wire   [15:0] ret_V_fu_36_p2;
wire   [15:0] ret_V_1_fu_46_p2;
reg   [15:0] ap_return_0_preg;
reg   [15:0] ap_return_1_preg;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_return_0_preg = 16'd0;
#0 ap_return_1_preg = 16'd0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if ((~((ap_start == 1'b0) | (ref_q_V_ap_vld == 1'b0) | (ref_i_V_ap_vld == 1'b0) | (x_V_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_0_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ref_q_V_ap_vld == 1'b0) | (ref_i_V_ap_vld == 1'b0) | (x_V_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_0_preg <= ret_V_fu_36_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_1_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) | (ref_q_V_ap_vld == 1'b0) | (ref_i_V_ap_vld == 1'b0) | (x_V_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_return_1_preg <= ret_V_1_fu_46_p2;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ref_q_V_ap_vld == 1'b0) | (ref_i_V_ap_vld == 1'b0) | (x_V_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ref_q_V_ap_vld == 1'b0) | (ref_i_V_ap_vld == 1'b0) | (x_V_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ref_q_V_ap_vld == 1'b0) | (ref_i_V_ap_vld == 1'b0) | (x_V_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_0 = ret_V_fu_36_p2;
    end else begin
        ap_return_0 = ap_return_0_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ref_q_V_ap_vld == 1'b0) | (ref_i_V_ap_vld == 1'b0) | (x_V_ap_vld == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_return_1 = ret_V_1_fu_46_p2;
    end else begin
        ap_return_1 = ap_return_1_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ref_i_V_blk_n = ref_i_V_ap_vld;
    end else begin
        ref_i_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        ref_q_V_blk_n = ref_q_V_ap_vld;
    end else begin
        ref_q_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        x_V_blk_n = x_V_ap_vld;
    end else begin
        x_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (ref_q_V_ap_vld == 1'b0) | (ref_i_V_ap_vld == 1'b0) | (x_V_ap_vld == 1'b0) | (ap_done_reg == 1'b1));
end

assign lhs_V_fu_28_p1 = $signed(x_V);

assign ret_V_1_fu_46_p0 = ref_q_V;

assign ret_V_1_fu_46_p1 = lhs_V_fu_28_p1;

assign ret_V_1_fu_46_p2 = ($signed(ret_V_1_fu_46_p0) * $signed(ret_V_1_fu_46_p1));

assign ret_V_fu_36_p0 = ref_i_V;

assign ret_V_fu_36_p1 = lhs_V_fu_28_p1;

assign ret_V_fu_36_p2 = ($signed(ret_V_fu_36_p0) * $signed(ret_V_fu_36_p1));

endmodule //iq_mult
